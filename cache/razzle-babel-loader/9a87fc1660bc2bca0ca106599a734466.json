{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/RenderBlocks.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { getBaseUrl, applyBlockDefaults } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData } from '@plone/volto/helpers';\nimport StyleWrapper from '@plone/volto/components/manage/Blocks/Block/StyleWrapper';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  }\n});\n\nconst RenderBlocks = props => {\n  const {\n    content,\n    intl,\n    location,\n    metadata\n  } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n  return hasBlocksData(content) ? __jsx(CustomTag, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, _map(content[blocksLayoutFieldname].items, block => {\n    var _blocksConfig$content, _content$blocksFieldn, _content$blocksFieldn2, _content$blocksFieldn3, _content$blocksFieldn4;\n\n    const Block = (_blocksConfig$content = blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _blocksConfig$content === void 0 ? void 0 : _blocksConfig$content.view;\n    const blockData = applyBlockDefaults({\n      data: content[blocksFieldname][block],\n      intl,\n      metadata,\n      properties: content\n    });\n    return Block ? __jsx(StyleWrapper, _extends({\n      key: block\n    }, props, {\n      id: block,\n      data: blockData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }), __jsx(Block, {\n      id: block,\n      metadata: metadata,\n      properties: content,\n      data: blockData,\n      path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n      blocksConfig: blocksConfig,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    })) : __jsx(\"div\", {\n      key: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, intl.formatMessage(messages.unknownBlock, {\n      block: (_content$blocksFieldn3 = content[blocksFieldname]) === null || _content$blocksFieldn3 === void 0 ? void 0 : (_content$blocksFieldn4 = _content$blocksFieldn3[block]) === null || _content$blocksFieldn4 === void 0 ? void 0 : _content$blocksFieldn4['@type']\n    }));\n  })) : '';\n};\n\nexport default injectIntl(RenderBlocks);","map":{"version":3,"names":["React","getBaseUrl","applyBlockDefaults","defineMessages","injectIntl","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","StyleWrapper","config","messages","unknownBlock","RenderBlocks","props","content","intl","location","metadata","blocksFieldname","blocksLayoutFieldname","blocksConfig","blocks","CustomTag","as","Fragment","items","block","Block","view","blockData","data","properties","pathname","formatMessage"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/RenderBlocks.jsx"],"sourcesContent":["import React from 'react';\nimport { getBaseUrl, applyBlockDefaults } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { map } from 'lodash';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers';\nimport StyleWrapper from '@plone/volto/components/manage/Blocks/Block/StyleWrapper';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\nconst RenderBlocks = (props) => {\n  const { content, intl, location, metadata } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n\n  return hasBlocksData(content) ? (\n    <CustomTag>\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          blocksConfig[content[blocksFieldname]?.[block]?.['@type']]?.view;\n\n        const blockData = applyBlockDefaults({\n          data: content[blocksFieldname][block],\n          intl,\n          metadata,\n          properties: content,\n        });\n\n        return Block ? (\n          <StyleWrapper key={block} {...props} id={block} data={blockData}>\n            <Block\n              id={block}\n              metadata={metadata}\n              properties={content}\n              data={blockData}\n              path={getBaseUrl(location?.pathname || '')}\n              blocksConfig={blocksConfig}\n            />\n          </StyleWrapper>\n        ) : (\n          <div key={block}>\n            {intl.formatMessage(messages.unknownBlock, {\n              block: content[blocksFieldname]?.[block]?.['@type'],\n            })}\n          </div>\n        );\n      })}\n    </CustomTag>\n  ) : (\n    ''\n  );\n};\n\nexport default injectIntl(RenderBlocks);\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,kBAArB,QAA+C,sBAA/C;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AAEA,SACEC,kBADF,EAEEC,wBAFF,EAGEC,aAHF,QAIO,sBAJP;AAKA,OAAOC,YAAP,MAAyB,0DAAzB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,MAAMC,QAAQ,GAAGP,cAAc,CAAC;EAC9BQ,YAAY;IAAA;IAAA;EAAA;AADkB,CAAD,CAA/B;;AAOA,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAC9B,MAAM;IAAEC,OAAF;IAAWC,IAAX;IAAiBC,QAAjB;IAA2BC;EAA3B,IAAwCJ,KAA9C;EACA,MAAMK,eAAe,GAAGb,kBAAkB,CAACS,OAAD,CAA1C;EACA,MAAMK,qBAAqB,GAAGb,wBAAwB,CAACQ,OAAD,CAAtD;EACA,MAAMM,YAAY,GAAGP,KAAK,CAACO,YAAN,IAAsBX,MAAM,CAACY,MAAP,CAAcD,YAAzD;EACA,MAAME,SAAS,GAAGT,KAAK,CAACU,EAAN,IAAYvB,KAAK,CAACwB,QAApC;EAEA,OAAOjB,aAAa,CAACO,OAAD,CAAb,GACL,MAAC,SAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACG,KAAIA,OAAO,CAACK,qBAAD,CAAP,CAA+BM,KAAnC,EAA2CC,KAAD,IAAW;IAAA;;IACpD,MAAMC,KAAK,4BACTP,YAAY,0BAACN,OAAO,CAACI,eAAD,CAAR,oFAAC,sBAA2BQ,KAA3B,CAAD,2DAAC,uBAAoC,OAApC,CAAD,CADH,0DACT,sBAA4DE,IAD9D;IAGA,MAAMC,SAAS,GAAG3B,kBAAkB,CAAC;MACnC4B,IAAI,EAAEhB,OAAO,CAACI,eAAD,CAAP,CAAyBQ,KAAzB,CAD6B;MAEnCX,IAFmC;MAGnCE,QAHmC;MAInCc,UAAU,EAAEjB;IAJuB,CAAD,CAApC;IAOA,OAAOa,KAAK,GACV,MAAC,YAAD;MAAc,GAAG,EAAED;IAAnB,GAA8Bb,KAA9B;MAAqC,EAAE,EAAEa,KAAzC;MAAgD,IAAI,EAAEG,SAAtD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IACE,MAAC,KAAD;MACE,EAAE,EAAEH,KADN;MAEE,QAAQ,EAAET,QAFZ;MAGE,UAAU,EAAEH,OAHd;MAIE,IAAI,EAAEe,SAJR;MAKE,IAAI,EAAE5B,UAAU,CAAC,CAAAe,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEgB,QAAV,KAAsB,EAAvB,CALlB;MAME,YAAY,EAAEZ,YANhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADU,GAYV;MAAK,GAAG,EAAEM,KAAV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGX,IAAI,CAACkB,aAAL,CAAmBvB,QAAQ,CAACC,YAA5B,EAA0C;MACzCe,KAAK,4BAAEZ,OAAO,CAACI,eAAD,CAAT,qFAAE,uBAA2BQ,KAA3B,CAAF,2DAAE,uBAAoC,OAApC;IADkC,CAA1C,CADH,CAZF;EAkBD,CA7BA,CADH,CADK,GAkCL,EAlCF;AAoCD,CA3CD;;AA6CA,eAAetB,UAAU,CAACQ,YAAD,CAAzB"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"}]}},"sourceType":"module"}