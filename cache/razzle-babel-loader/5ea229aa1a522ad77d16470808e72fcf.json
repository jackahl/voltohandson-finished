{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/MultilingualRedirector/MultilingualRedirector.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useCookies } from 'react-cookie';\nimport config from '@plone/volto/registry';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\n\nconst MultilingualRedirector = props => {\n  const {\n    settings\n  } = config;\n  const {\n    pathname,\n    children\n  } = props;\n  const [cookies] = useCookies();\n  const currentLanguage = cookies['I18N_LANGUAGE'] || settings.defaultLanguage;\n  const redirectToLanguage = settings.supportedLanguages.includes(currentLanguage) ? currentLanguage : settings.defaultLanguage;\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    // ToDo: Add means to support language negotiation (with config)\n    // const detectedLang = (navigator.language || navigator.userLanguage).substring(0, 2);\n    let mounted = true;\n\n    if (settings.isMultilingual && pathname === '/') {\n      const langFileName = normalizeLanguageName(redirectToLanguage);\n      import('@root/../locales/' + langFileName + '.json').then(locale => {\n        if (mounted) {\n          dispatch(changeLanguage(redirectToLanguage, locale.default));\n        }\n      });\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [pathname, dispatch, redirectToLanguage, settings.isMultilingual]);\n  return pathname === '/' && settings.isMultilingual ? __jsx(Redirect, {\n    to: `/${redirectToLanguage}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }) : __jsx(React.Fragment, null, children);\n};\n\nexport default MultilingualRedirector;","map":{"version":3,"names":["React","Redirect","useDispatch","useCookies","config","changeLanguage","normalizeLanguageName","MultilingualRedirector","props","settings","pathname","children","cookies","currentLanguage","defaultLanguage","redirectToLanguage","supportedLanguages","includes","dispatch","useEffect","mounted","isMultilingual","langFileName","then","locale","default"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/MultilingualRedirector/MultilingualRedirector.jsx"],"sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { useCookies } from 'react-cookie';\nimport config from '@plone/volto/registry';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\n\nconst MultilingualRedirector = (props) => {\n  const { settings } = config;\n  const { pathname, children } = props;\n  const [cookies] = useCookies();\n  const currentLanguage = cookies['I18N_LANGUAGE'] || settings.defaultLanguage;\n  const redirectToLanguage = settings.supportedLanguages.includes(\n    currentLanguage,\n  )\n    ? currentLanguage\n    : settings.defaultLanguage;\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    // ToDo: Add means to support language negotiation (with config)\n    // const detectedLang = (navigator.language || navigator.userLanguage).substring(0, 2);\n    let mounted = true;\n    if (settings.isMultilingual && pathname === '/') {\n      const langFileName = normalizeLanguageName(redirectToLanguage);\n      import('@root/../locales/' + langFileName + '.json').then((locale) => {\n        if (mounted) {\n          dispatch(changeLanguage(redirectToLanguage, locale.default));\n        }\n      });\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [pathname, dispatch, redirectToLanguage, settings.isMultilingual]);\n\n  return pathname === '/' && settings.isMultilingual ? (\n    <Redirect to={`/${redirectToLanguage}`} />\n  ) : (\n    <>{children}</>\n  );\n};\n\nexport default MultilingualRedirector;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,qBAAT,QAAsC,sBAAtC;;AAEA,MAAMC,sBAAsB,GAAIC,KAAD,IAAW;EACxC,MAAM;IAAEC;EAAF,IAAeL,MAArB;EACA,MAAM;IAAEM,QAAF;IAAYC;EAAZ,IAAyBH,KAA/B;EACA,MAAM,CAACI,OAAD,IAAYT,UAAU,EAA5B;EACA,MAAMU,eAAe,GAAGD,OAAO,CAAC,eAAD,CAAP,IAA4BH,QAAQ,CAACK,eAA7D;EACA,MAAMC,kBAAkB,GAAGN,QAAQ,CAACO,kBAAT,CAA4BC,QAA5B,CACzBJ,eADyB,IAGvBA,eAHuB,GAIvBJ,QAAQ,CAACK,eAJb;EAKA,MAAMI,QAAQ,GAAGhB,WAAW,EAA5B;EAEAF,KAAK,CAACmB,SAAN,CAAgB,MAAM;IACpB;IACA;IACA,IAAIC,OAAO,GAAG,IAAd;;IACA,IAAIX,QAAQ,CAACY,cAAT,IAA2BX,QAAQ,KAAK,GAA5C,EAAiD;MAC/C,MAAMY,YAAY,GAAGhB,qBAAqB,CAACS,kBAAD,CAA1C;MACA,OAAO,sBAAsBO,YAAtB,GAAqC,OAA5C,EAAqDC,IAArD,CAA2DC,MAAD,IAAY;QACpE,IAAIJ,OAAJ,EAAa;UACXF,QAAQ,CAACb,cAAc,CAACU,kBAAD,EAAqBS,MAAM,CAACC,OAA5B,CAAf,CAAR;QACD;MACF,CAJD;IAKD;;IACD,OAAO,MAAM;MACXL,OAAO,GAAG,KAAV;IACD,CAFD;EAGD,CAfD,EAeG,CAACV,QAAD,EAAWQ,QAAX,EAAqBH,kBAArB,EAAyCN,QAAQ,CAACY,cAAlD,CAfH;EAiBA,OAAOX,QAAQ,KAAK,GAAb,IAAoBD,QAAQ,CAACY,cAA7B,GACL,MAAC,QAAD;IAAU,EAAE,EAAG,IAAGN,kBAAmB,EAArC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADK,GAGL,4BAAGJ,QAAH,CAHF;AAKD,CAlCD;;AAoCA,eAAeJ,sBAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}