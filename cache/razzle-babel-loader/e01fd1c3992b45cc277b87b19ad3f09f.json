{"ast":null,"code":"import _uniqBy from \"lodash/uniqBy\";\nimport _map from \"lodash/map\";\nimport _last from \"lodash/last\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  stateTitle: {\n    \"id\": \"Change State\",\n    \"defaultMessage\": \"Change State\"\n  },\n  includeChildrenTitle: {\n    \"id\": \"Change workflow state recursively\",\n    \"defaultMessage\": \"Change workflow state recursively\"\n  },\n  stateDescription: {\n    \"id\": \"Select the transition to be used for modifying the items state.\",\n    \"defaultMessage\": \"Select the transition to be used for modifying the items state.\"\n  },\n  loadingMessage: {\n    \"id\": \"Workflow Change Loading Message\",\n    \"defaultMessage\": \"Updating workflow states...\"\n  }\n});\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\n\nclass ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n\n\n  onSubmit({\n    state,\n    include_children\n  }) {\n    if (!state) {\n      return;\n    }\n\n    this.props.transitionWorkflow(_filter(_map(_concat(..._map(this.props.workflows, workflow => workflow.transitions)), item => item['@id']), x => _last(x.split('/')) === state), include_children);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return this.props.open && this.props.workflows.length > 0 && __jsx(ModalForm, {\n      open: this.props.open,\n      loading: this.props.request.loading,\n      loadingMessage: this.props.intl.formatMessage(messages.loadingMessage),\n      onSubmit: this.onSubmit,\n      onCancel: this.props.onCancel,\n      title: this.props.intl.formatMessage(messages.stateTitle),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['state', 'include_children']\n        }],\n        properties: {\n          state: {\n            description: this.props.intl.formatMessage(messages.stateDescription),\n            title: this.props.intl.formatMessage(messages.stateTitle),\n            type: 'string',\n            choices: _map(_uniqBy(_concat(..._map(this.props.workflows, workflow => workflow.transitions)), x => x.title), y => [_last(y['@id'].split('/')), y.title])\n          },\n          include_children: {\n            title: this.props.intl.formatMessage(messages.includeChildrenTitle),\n            type: 'boolean'\n          }\n        },\n        required: []\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\n_defineProperty(ContentsWorkflowModal, \"propTypes\", {\n  getWorkflow: PropTypes.func.isRequired,\n  transitionWorkflow: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  workflows: PropTypes.arrayOf(PropTypes.shape({\n    transition: PropTypes.shape({\n      '@id': PropTypes.string,\n      title: PropTypes.string\n    })\n  })).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\n\nexport default compose(injectIntl, connect(state => ({\n  request: state.workflow.transition,\n  workflows: state.workflow.multiple\n}), {\n  getWorkflow,\n  transitionWorkflow\n}))(ContentsWorkflowModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getWorkflow","transitionWorkflow","ModalForm","messages","default","stateTitle","includeChildrenTitle","stateDescription","loadingMessage","ContentsWorkflowModal","constructor","props","onSubmit","bind","componentDidMount","items","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","state","include_children","workflows","workflow","transitions","item","x","split","render","open","length","intl","formatMessage","onCancel","fieldsets","id","title","fields","properties","description","type","choices","y","required","func","isRequired","arrayOf","string","shape","bool","transition","multiple"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx"],"sourcesContent":["/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  stateTitle: {\n    id: 'Change State',\n    defaultMessage: 'Change State',\n  },\n  includeChildrenTitle: {\n    id: 'Change workflow state recursively',\n    defaultMessage: 'Change workflow state recursively',\n  },\n  stateDescription: {\n    id: 'Select the transition to be used for modifying the items state.',\n    defaultMessage:\n      'Select the transition to be used for modifying the items state.',\n  },\n  loadingMessage: {\n    id: 'Workflow Change Loading Message',\n    defaultMessage: 'Updating workflow states...',\n  },\n});\n\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nclass ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    workflows: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition: PropTypes.shape({\n          '@id': PropTypes.string,\n          title: PropTypes.string,\n        }),\n      }),\n    ).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n  onSubmit({ state, include_children }) {\n    if (!state) {\n      return;\n    }\n\n    this.props.transitionWorkflow(\n      filter(\n        map(\n          concat(\n            ...map(this.props.workflows, (workflow) => workflow.transitions),\n          ),\n          (item) => item['@id'],\n        ),\n        (x) => last(x.split('/')) === state,\n      ),\n      include_children,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open &&\n      this.props.workflows.length > 0 && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.stateTitle)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['state', 'include_children'],\n              },\n            ],\n            properties: {\n              state: {\n                description: this.props.intl.formatMessage(\n                  messages.stateDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.stateTitle),\n                type: 'string',\n                choices: map(\n                  uniqBy(\n                    concat(\n                      ...map(\n                        this.props.workflows,\n                        (workflow) => workflow.transitions,\n                      ),\n                    ),\n                    (x) => x.title,\n                  ),\n                  (y) => [last(y['@id'].split('/')), y.title],\n                ),\n              },\n              include_children: {\n                title: this.props.intl.formatMessage(\n                  messages.includeChildrenTitle,\n                ),\n                type: 'boolean',\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.workflow.transition,\n      workflows: state.workflow.multiple,\n    }),\n    { getWorkflow, transitionWorkflow },\n  ),\n)(ContentsWorkflowModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Change State","defaultMessage":"Change State"},{"id":"Change workflow state recursively","defaultMessage":"Change workflow state recursively"},{"id":"Select the transition to be used for modifying the items state.","defaultMessage":"Select the transition to be used for modifying the items state."},{"id":"Workflow Change Loading Message","defaultMessage":"Updating workflow states..."}]}},"sourceType":"module"}