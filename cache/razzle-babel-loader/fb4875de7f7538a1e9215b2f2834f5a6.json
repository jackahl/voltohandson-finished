{"ast":null,"code":"import _difference from \"lodash/difference\";\nimport _pull from \"lodash/pull\";\nimport _map from \"lodash/map\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Users/UsersControlpanel.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport { createUser, deleteUser, listRoles, listGroups, listUsers, getControlpanel, updateUser, updateGroup } from '@plone/volto/actions';\nimport { Icon, ModalForm, Toast, Toolbar, RenderUsers, Pagination, Error } from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport { Confirm, Container, Form, Input, Button, Segment, Table } from 'semantic-ui-react';\n/**\n * UsersControlpanel class.\n * @class UsersControlpanel\n * @extends Component\n */\n\nclass UsersControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fetchData\", async () => {\n      await this.props.getControlpanel('usergroup');\n      await this.props.listRoles();\n\n      if (!this.props.many_users) {\n        this.props.listGroups();\n        await this.props.listUsers();\n        this.setState({\n          entries: this.props.users\n        });\n      }\n    });\n\n    _defineProperty(this, \"addUserToGroup\", user => {\n      const {\n        groups,\n        username\n      } = user;\n      groups.forEach(group => {\n        this.props.updateGroup(group, {\n          users: {\n            [username]: true\n          }\n        });\n      });\n    });\n\n    _defineProperty(this, \"updateUserRoleSubmit\", e => {\n      e.stopPropagation();\n      const roles = this.props.roles.map(item => item.id);\n      this.state.entries.forEach(item => {\n        const userData = {\n          roles: {}\n        };\n\n        const removedRoles = _difference(roles, item.roles);\n\n        removedRoles.forEach(role => {\n          userData.roles[role] = false;\n        });\n        item.roles.forEach(role => {\n          userData.roles[role] = true;\n        });\n        this.props.updateUser(item.id, userData);\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.updateRoles),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 7\n        }\n      }));\n    });\n\n    _defineProperty(this, \"onChangePage\", (event, {\n      value\n    }) => {\n      this.setState({\n        currentPage: value\n      });\n    });\n\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.delete = this.delete.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddUserSubmit = this.onAddUserSubmit.bind(this);\n    this.onAddUserError = this.onAddUserError.bind(this);\n    this.onAddUserSuccess = this.onAddUserSuccess.bind(this);\n    this.updateUserRole = this.updateUserRole.bind(this);\n    this.state = {\n      search: '',\n      showAddUser: false,\n      showAddUserErrorConfirm: false,\n      addUserError: '',\n      showDelete: false,\n      userToDelete: undefined,\n      entries: [],\n      isClient: false,\n      currentPage: 0,\n      pageSize: 10\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded || this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.props.listUsers({\n        query: this.state.search\n      });\n    }\n\n    if (this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.onAddUserSuccess();\n    }\n\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      this.onAddUserError(nextProps.createRequest.error);\n    }\n\n    if (this.props.loadRolesRequest.loading && nextProps.loadRolesRequest.error) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error\n      });\n    }\n  }\n\n  getUserFromProps(value) {\n    return _find(this.props.users, ['@id', value]);\n  }\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onSearch(event) {\n    event.preventDefault();\n    this.props.listUsers({\n      query: this.state.search\n    });\n  }\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n  /**\n   * Delete a user\n   * @method delete\n   * @param {object} event Event object.\n   * @param {string} value username.\n   * @returns {undefined}\n   */\n\n\n  delete(event, {\n    value\n  }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        userToDelete: this.getUserFromProps(value)\n      });\n    }\n  }\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n\n\n  onDeleteOk() {\n    if (this.state.userToDelete) {\n      this.props.deleteUser(this.state.userToDelete.id);\n      this.setState({\n        showDelete: false,\n        userToDelete: undefined\n      });\n    }\n  }\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n\n\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: []\n    });\n  }\n  /**\n   *@param {object} user\n   *@returns {undefined}\n   *@memberof UsersControlpanel\n   */\n\n\n  /**\n   * Callback to be called by the ModalForm when the form is submitted.\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @returns {undefined}\n   */\n  onAddUserSubmit(data, callback) {\n    const {\n      groups,\n      sendPasswordReset\n    } = data;\n    if (groups && groups.length > 0) this.addUserToGroup(data);\n    this.props.createUser(data, sendPasswordReset);\n    this.setState({\n      addUserSetFormDataCallback: callback\n    });\n  }\n  /**\n   * Handle Success after createUser()\n   *\n   * @returns {undefined}\n   */\n\n\n  onAddUserSuccess() {\n    this.state.addUserSetFormDataCallback({});\n    this.setState({\n      showAddUser: false,\n      addUserError: undefined,\n      addUserSetFormDataCallback: undefined\n    });\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.userCreated),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    }));\n  }\n  /**\n   *\n   *\n   * @param {*} data\n   * @param {*} callback\n   * @memberof UsersControlpanel\n   */\n\n\n  updateUserRole(name, value) {\n    this.setState({\n      entries: _map(this.state.entries, entry => _objectSpread(_objectSpread({}, entry), {}, {\n        roles: entry.id === name && !entry.roles.includes(value) ? [...entry.roles, value] : entry.id !== name ? entry.roles : _pull(entry.roles, value)\n      }))\n    });\n  }\n  /**\n   *\n   * @param {*} event\n   * @memberof UsersControlpanel\n   */\n\n\n  /**\n   * Handle Errors after createUser()\n   *\n   * @param {object} error object. Requires the property .message\n   * @returns {undefined}\n   */\n  onAddUserError(error) {\n    this.setState({\n      addUserError: error.response.body.error.message\n    });\n  }\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.users !== prevProps.users) {\n      this.setState({\n        entries: this.props.users\n      });\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$state$entries;\n\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 14\n        }\n      });\n    }\n    /*let fullnameToDelete = this.state.userToDelete\n        ? this.state.userToDelete.fullname\n        : '';*/\n\n\n    let usernameToDelete = this.state.userToDelete ? this.state.userToDelete.username : '';\n    return __jsx(Container, {\n      className: \"users-control-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.users),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }\n    }, __jsx(Confirm, {\n      open: this.state.showDelete,\n      header: this.props.intl.formatMessage(messages.deleteUserConfirmTitle),\n      content: __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }\n      }, __jsx(\"ul\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Do you really want to delete the user {username}?\",\n        defaultMessage: \"Do you really want to delete the user {username}?\",\n        values: {\n          username: __jsx(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 33\n            }\n          }, usernameToDelete)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 19\n        }\n      }))),\n      onCancel: this.onDeleteCancel,\n      onConfirm: this.onDeleteOk,\n      size: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }\n    }), this.state.showAddUser ? __jsx(ModalForm, {\n      open: this.state.showAddUser,\n      className: \"modal\",\n      onSubmit: this.onAddUserSubmit,\n      submitError: this.state.addUserError,\n      onCancel: () => this.setState({\n        showAddUser: false\n      }),\n      title: this.props.intl.formatMessage(messages.addUserFormTitle),\n      loading: this.props.createRequest.loading,\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: 'FIXME: User Data',\n          fields: ['username', 'fullname', 'email', 'password', 'sendPasswordReset', 'roles', 'groups']\n        }],\n        properties: {\n          username: {\n            title: this.props.intl.formatMessage(messages.addUserFormUsernameTitle),\n            type: 'string',\n            description: 'Enter a user name, usually something like \"jsmith\". No spaces or special characters. Usernames and passwords are case sensitive, make sure the caps lock key is not enabled. This is the name used to log in.'\n          },\n          fullname: {\n            title: this.props.intl.formatMessage(messages.addUserFormFullnameTitle),\n            type: 'string',\n            description: 'Enter full name, e.g. John Smith.'\n          },\n          email: {\n            title: this.props.intl.formatMessage(messages.addUserFormEmailTitle),\n            type: 'string',\n            description: 'Enter an email address. This is necessary in case the password is lost. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n            widget: 'email'\n          },\n          password: {\n            title: this.props.intl.formatMessage(messages.addUserFormPasswordTitle),\n            type: 'password',\n            description: 'Enter your new password. Minimum 5 characters.',\n            widget: 'password'\n          },\n          sendPasswordReset: {\n            title: this.props.intl.formatMessage(messages.addUserFormSendPasswordResetTitle),\n            type: 'boolean'\n          },\n          roles: {\n            title: this.props.intl.formatMessage(messages.addUserFormRolesTitle),\n            type: 'array',\n            choices: this.props.roles.map(role => [role.id, role.id]),\n            noValueOption: false,\n            description: ''\n          },\n          groups: {\n            title: this.props.intl.formatMessage(messages.addUserGroupNameTitle),\n            type: 'array',\n            choices: this.props.groups.map(group => [group.id, group.id]),\n            noValueOption: false,\n            description: ''\n          }\n        },\n        required: ['username', 'email']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 13\n      }\n    }) : null), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Users\",\n      defaultMessage: \"Users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\",\n      defaultMessage: \"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\",\n      values: {\n        plone_svg: __jsx(Icon, {\n          name: ploneSVG,\n          size: \"20px\",\n          color: \"#007EB1\",\n          title: 'plone-svg',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 19\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 13\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      name: \"SearchableText\",\n      action: {\n        icon: 'search'\n      },\n      placeholder: this.props.intl.formatMessage(messages.searchUsers),\n      onChange: this.onChangeSearch,\n      id: \"user-search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      padded: true,\n      striped: true,\n      attached: true,\n      unstackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"User name\",\n      defaultMessage: \"User name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 23\n      }\n    })), this.props.roles.map(role => __jsx(Table.HeaderCell, {\n      key: role.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 23\n      }\n    }, role.id)), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Actions\",\n      defaultMessage: \"Actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 23\n      }\n    })))), __jsx(Table.Body, {\n      \"data-user\": \"users\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 17\n      }\n    }, this.state.entries.slice(this.state.currentPage * 10, this.state.pageSize * (this.state.currentPage + 1)).map(user => __jsx(RenderUsers, {\n      key: user.id,\n      onDelete: this.delete,\n      roles: this.props.roles,\n      user: user,\n      updateUser: this.updateUserRole,\n      inheritedRole: this.props.inheritedRole,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 23\n      }\n    }))))), __jsx(\"div\", {\n      className: \"contents-pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 13\n      }\n    }, __jsx(Pagination, {\n      current: this.state.currentPage,\n      total: Math.ceil(((_this$state$entries = this.state.entries) === null || _this$state$entries === void 0 ? void 0 : _this$state$entries.length) / this.state.pageSize),\n      onChangePage: this.onChangePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 15\n      }\n    })))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: this.updateUserRoleSubmit,\n        loading: this.props.createRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 21\n        }\n      })), __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"cancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 610,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 21\n        }\n      })), __jsx(Button, {\n        id: \"toolbar-add\",\n        \"aria-label\": this.props.intl.formatMessage(messages.addUserButtonTitle),\n        onClick: () => {\n          this.setState({\n            showAddUser: true\n          });\n        },\n        loading: this.props.createRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: addUserSvg,\n        size: \"45px\",\n        color: \"#826A6A\",\n        title: this.props.intl.formatMessage(messages.addUserButtonTitle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(UsersControlpanel, \"propTypes\", {\n  listRoles: PropTypes.func.isRequired,\n  listUsers: PropTypes.func.isRequired,\n  updateUser: PropTypes.func,\n  listGroups: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    '@type': PropTypes.string,\n    id: PropTypes.string\n  })).isRequired,\n  users: PropTypes.arrayOf(PropTypes.shape({\n    username: PropTypes.string,\n    fullname: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string)\n  })).isRequired\n});\n\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$controlpanels, _state$controlpanels$, _state$controlpanels$2, _state$controlpanels2, _state$controlpanels3, _state$controlpanels4;\n\n  return {\n    roles: state.roles.roles,\n    users: state.users.users,\n    groups: state.groups.groups,\n    many_users: (_state$controlpanels = state.controlpanels) === null || _state$controlpanels === void 0 ? void 0 : (_state$controlpanels$ = _state$controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users,\n    many_groups: (_state$controlpanels2 = state.controlpanels) === null || _state$controlpanels2 === void 0 ? void 0 : (_state$controlpanels3 = _state$controlpanels2.controlpanel) === null || _state$controlpanels3 === void 0 ? void 0 : (_state$controlpanels4 = _state$controlpanels3.data) === null || _state$controlpanels4 === void 0 ? void 0 : _state$controlpanels4.many_groups,\n    description: state.description,\n    pathname: props.location.pathname,\n    deleteRequest: state.users.delete,\n    createRequest: state.users.create,\n    loadRolesRequest: state.roles,\n    inheritedRole: state.authRole.authenticatedRole\n  };\n}, dispatch => bindActionCreators({\n  listRoles,\n  listUsers,\n  listGroups,\n  getControlpanel,\n  deleteUser,\n  createUser,\n  updateUser,\n  updateGroup\n}, dispatch)))(UsersControlpanel);","map":{"version":3,"names":["createUser","deleteUser","listRoles","listGroups","listUsers","getControlpanel","updateUser","updateGroup","Icon","ModalForm","Toast","Toolbar","RenderUsers","Pagination","Error","Link","Helmet","messages","clearSVG","addUserSvg","saveSVG","ploneSVG","PropTypes","React","Component","FormattedMessage","injectIntl","Portal","connect","toast","bindActionCreators","compose","Confirm","Container","Form","Input","Button","Segment","Table","UsersControlpanel","constructor","props","many_users","setState","entries","users","user","groups","username","forEach","group","e","stopPropagation","roles","map","item","id","state","userData","removedRoles","role","success","intl","formatMessage","updateRoles","event","value","currentPage","onChangeSearch","bind","onSearch","delete","onDeleteOk","onDeleteCancel","onAddUserSubmit","onAddUserError","onAddUserSuccess","updateUserRole","search","showAddUser","showAddUserErrorConfirm","addUserError","showDelete","userToDelete","undefined","isClient","pageSize","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","deleteRequest","loading","loaded","createRequest","query","error","loadRolesRequest","getUserFromProps","preventDefault","target","itemsToDelete","data","callback","sendPasswordReset","length","addUserToGroup","addUserSetFormDataCallback","userCreated","name","entry","includes","response","body","message","componentDidUpdate","prevProps","prevState","render","usernameToDelete","deleteUserConfirmTitle","addUserFormTitle","fieldsets","title","fields","properties","addUserFormUsernameTitle","type","description","fullname","addUserFormFullnameTitle","email","addUserFormEmailTitle","widget","password","addUserFormPasswordTitle","addUserFormSendPasswordResetTitle","addUserFormRolesTitle","choices","noValueOption","addUserGroupNameTitle","required","plone_svg","icon","searchUsers","slice","inheritedRole","Math","ceil","onChangePage","document","getElementById","pathname","save","updateUserRoleSubmit","cancel","addUserButtonTitle","func","isRequired","string","arrayOf","shape","controlpanels","controlpanel","many_groups","location","create","authRole","authenticatedRole","dispatch"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Users/UsersControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createUser,\n  deleteUser,\n  listRoles,\n  listGroups,\n  listUsers,\n  getControlpanel,\n  updateUser,\n  updateGroup,\n} from '@plone/volto/actions';\nimport {\n  Icon,\n  ModalForm,\n  Toast,\n  Toolbar,\n  RenderUsers,\n  Pagination,\n  Error,\n} from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport { find, map, pull, difference } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Confirm,\n  Container,\n  Form,\n  Input,\n  Button,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\n/**\n * UsersControlpanel class.\n * @class UsersControlpanel\n * @extends Component\n */\nclass UsersControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listUsers: PropTypes.func.isRequired,\n    updateUser: PropTypes.func,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    users: PropTypes.arrayOf(\n      PropTypes.shape({\n        username: PropTypes.string,\n        fullname: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearch = this.onSearch.bind(this);\n    this.delete = this.delete.bind(this);\n\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddUserSubmit = this.onAddUserSubmit.bind(this);\n    this.onAddUserError = this.onAddUserError.bind(this);\n    this.onAddUserSuccess = this.onAddUserSuccess.bind(this);\n    this.updateUserRole = this.updateUserRole.bind(this);\n    this.state = {\n      search: '',\n      showAddUser: false,\n      showAddUserErrorConfirm: false,\n      addUserError: '',\n      showDelete: false,\n      userToDelete: undefined,\n      entries: [],\n      isClient: false,\n      currentPage: 0,\n      pageSize: 10,\n    };\n  }\n\n  fetchData = async () => {\n    await this.props.getControlpanel('usergroup');\n    await this.props.listRoles();\n    if (!this.props.many_users) {\n      this.props.listGroups();\n      await this.props.listUsers();\n      this.setState({\n        entries: this.props.users,\n      });\n    }\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteRequest.loading && nextProps.deleteRequest.loaded) ||\n      (this.props.createRequest.loading && nextProps.createRequest.loaded)\n    ) {\n      this.props.listUsers({\n        query: this.state.search,\n      });\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.loaded) {\n      this.onAddUserSuccess();\n    }\n    if (this.props.createRequest.loading && nextProps.createRequest.error) {\n      this.onAddUserError(nextProps.createRequest.error);\n    }\n    if (\n      this.props.loadRolesRequest.loading &&\n      nextProps.loadRolesRequest.error\n    ) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error,\n      });\n    }\n  }\n\n  getUserFromProps(value) {\n    return find(this.props.users, ['@id', value]);\n  }\n\n  /**\n   * Search handler\n   * @method onSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onSearch(event) {\n    event.preventDefault();\n    this.props.listUsers({\n      query: this.state.search,\n    });\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   * Delete a user\n   * @method delete\n   * @param {object} event Event object.\n   * @param {string} value username.\n   * @returns {undefined}\n   */\n  delete(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        userToDelete: this.getUserFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.userToDelete) {\n      this.props.deleteUser(this.state.userToDelete.id);\n      this.setState({\n        showDelete: false,\n        userToDelete: undefined,\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   *@param {object} user\n   *@returns {undefined}\n   *@memberof UsersControlpanel\n   */\n  addUserToGroup = (user) => {\n    const { groups, username } = user;\n    groups.forEach((group) => {\n      this.props.updateGroup(group, {\n        users: {\n          [username]: true,\n        },\n      });\n    });\n  };\n\n  /**\n   * Callback to be called by the ModalForm when the form is submitted.\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @returns {undefined}\n   */\n  onAddUserSubmit(data, callback) {\n    const { groups, sendPasswordReset } = data;\n    if (groups && groups.length > 0) this.addUserToGroup(data);\n    this.props.createUser(data, sendPasswordReset);\n    this.setState({\n      addUserSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Success after createUser()\n   *\n   * @returns {undefined}\n   */\n  onAddUserSuccess() {\n    this.state.addUserSetFormDataCallback({});\n    this.setState({\n      showAddUser: false,\n      addUserError: undefined,\n      addUserSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.userCreated)}\n      />,\n    );\n  }\n\n  /**\n   *\n   *\n   * @param {*} data\n   * @param {*} callback\n   * @memberof UsersControlpanel\n   */\n  updateUserRole(name, value) {\n    this.setState({\n      entries: map(this.state.entries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name && !entry.roles.includes(value)\n            ? [...entry.roles, value]\n            : entry.id !== name\n            ? entry.roles\n            : pull(entry.roles, value),\n      })),\n    });\n  }\n  /**\n   *\n   * @param {*} event\n   * @memberof UsersControlpanel\n   */\n  updateUserRoleSubmit = (e) => {\n    e.stopPropagation();\n\n    const roles = this.props.roles.map((item) => item.id);\n    this.state.entries.forEach((item) => {\n      const userData = { roles: {} };\n      const removedRoles = difference(roles, item.roles);\n\n      removedRoles.forEach((role) => {\n        userData.roles[role] = false;\n      });\n      item.roles.forEach((role) => {\n        userData.roles[role] = true;\n      });\n      this.props.updateUser(item.id, userData);\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.updateRoles)}\n      />,\n    );\n  };\n\n  /**\n   * Handle Errors after createUser()\n   *\n   * @param {object} error object. Requires the property .message\n   * @returns {undefined}\n   */\n  onAddUserError(error) {\n    this.setState({\n      addUserError: error.response.body.error.message,\n    });\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage = (event, { value }) => {\n    this.setState({\n      currentPage: value,\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.users !== prevProps.users) {\n      this.setState({\n        entries: this.props.users,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n    /*let fullnameToDelete = this.state.userToDelete\n        ? this.state.userToDelete.fullname\n        : '';*/\n    let usernameToDelete = this.state.userToDelete\n      ? this.state.userToDelete.username\n      : '';\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet title={this.props.intl.formatMessage(messages.users)} />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(\n              messages.deleteUserConfirmTitle,\n            )}\n            content={\n              <div className=\"content\">\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the user {username}?\"\n                    defaultMessage=\"Do you really want to delete the user {username}?\"\n                    values={{\n                      username: <b>{usernameToDelete}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddUser ? (\n            <ModalForm\n              open={this.state.showAddUser}\n              className=\"modal\"\n              onSubmit={this.onAddUserSubmit}\n              submitError={this.state.addUserError}\n              onCancel={() => this.setState({ showAddUser: false })}\n              title={this.props.intl.formatMessage(messages.addUserFormTitle)}\n              loading={this.props.createRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: User Data',\n                    fields: [\n                      'username',\n                      'fullname',\n                      'email',\n                      'password',\n                      'sendPasswordReset',\n                      'roles',\n                      'groups',\n                    ],\n                  },\n                ],\n                properties: {\n                  username: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormUsernameTitle,\n                    ),\n                    type: 'string',\n                    description:\n                      'Enter a user name, usually something like \"jsmith\". No spaces or special characters. Usernames and passwords are case sensitive, make sure the caps lock key is not enabled. This is the name used to log in.',\n                  },\n                  fullname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormFullnameTitle,\n                    ),\n                    type: 'string',\n                    description: 'Enter full name, e.g. John Smith.',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description:\n                      'Enter an email address. This is necessary in case the password is lost. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n                    widget: 'email',\n                  },\n                  password: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormPasswordTitle,\n                    ),\n                    type: 'password',\n                    description:\n                      'Enter your new password. Minimum 5 characters.',\n                    widget: 'password',\n                  },\n                  sendPasswordReset: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormSendPasswordResetTitle,\n                    ),\n                    type: 'boolean',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [role.id, role.id]),\n                    noValueOption: false,\n                    description: '',\n                  },\n                  groups: {\n                    title: this.props.intl.formatMessage(\n                      messages.addUserGroupNameTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.groups.map((group) => [\n                      group.id,\n                      group.id,\n                    ]),\n                    noValueOption: false,\n                    description: '',\n                  },\n                },\n                required: ['username', 'email'],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage id=\"Users\" defaultMessage=\"Users\" />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\"\n              defaultMessage=\"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.\"\n              values={{\n                plone_svg: (\n                  <Icon\n                    name={ploneSVG}\n                    size=\"20px\"\n                    color=\"#007EB1\"\n                    title={'plone-svg'}\n                  />\n                ),\n              }}\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearch}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchUsers,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"user-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"User name\"\n                        defaultMessage=\"User name\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.id}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body data-user=\"users\">\n                  {this.state.entries\n                    .slice(\n                      this.state.currentPage * 10,\n                      this.state.pageSize * (this.state.currentPage + 1),\n                    )\n                    .map((user) => (\n                      <RenderUsers\n                        key={user.id}\n                        onDelete={this.delete}\n                        roles={this.props.roles}\n                        user={user}\n                        updateUser={this.updateUserRole}\n                        inheritedRole={this.props.inheritedRole}\n                      />\n                    ))}\n                </Table.Body>\n              </Table>\n            </div>\n            <div className=\"contents-pagination\">\n              <Pagination\n                current={this.state.currentPage}\n                total={Math.ceil(\n                  this.state.entries?.length / this.state.pageSize,\n                )}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={this.updateUserRoleSubmit}\n                    loading={this.props.createRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Link to=\"/controlpanel\" className=\"cancel\">\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Link>\n                  <Button\n                    id=\"toolbar-add\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.addUserButtonTitle,\n                    )}\n                    onClick={() => {\n                      this.setState({ showAddUser: true });\n                    }}\n                    loading={this.props.createRequest.loading}\n                  >\n                    <Icon\n                      name={addUserSvg}\n                      size=\"45px\"\n                      color=\"#826A6A\"\n                      title={this.props.intl.formatMessage(\n                        messages.addUserButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      roles: state.roles.roles,\n      users: state.users.users,\n      groups: state.groups.groups,\n      many_users: state.controlpanels?.controlpanel?.data?.many_users,\n      many_groups: state.controlpanels?.controlpanel?.data?.many_groups,\n      description: state.description,\n      pathname: props.location.pathname,\n      deleteRequest: state.users.delete,\n      createRequest: state.users.create,\n      loadRolesRequest: state.roles,\n      inheritedRole: state.authRole.authenticatedRole,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listUsers,\n          listGroups,\n          getControlpanel,\n          deleteUser,\n          createUser,\n          updateUser,\n          updateGroup,\n        },\n        dispatch,\n      ),\n  ),\n)(UsersControlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Do you really want to delete the user {username}?","defaultMessage":"Do you really want to delete the user {username}?"},{"id":"Users","defaultMessage":"Users"},{"id":"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group.","defaultMessage":"Note that roles set here apply directly to a user. The symbol{plone_svg}indicates a role inherited from membership in a group."},{"id":"User name","defaultMessage":"User name"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module"}