{"ast":null,"code":"import _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Register/Register.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Register container.\n * @module components/theme/Register/Register\n */\nimport React, { Component } from 'react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Form, Toast } from '@plone/volto/components';\nimport { createUser } from '@plone/volto/actions';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Registration form\",\n    \"defaultMessage\": \"Registration form\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  fullnameTitle: {\n    \"id\": \"Full Name\",\n    \"defaultMessage\": \"Full Name\"\n  },\n  fullnameDescription: {\n    \"id\": \"Enter full name, e.g. John Smith.\",\n    \"defaultMessage\": \"Enter full name, e.g. John Smith.\"\n  },\n  emailTitle: {\n    \"id\": \"E-mail\",\n    \"defaultMessage\": \"E-mail\"\n  },\n  emailDescription: {\n    \"id\": \"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.\",\n    \"defaultMessage\": \"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.\"\n  },\n  successRegisterCompletedTitle: {\n    \"id\": \"Account Registration Completed\",\n    \"defaultMessage\": \"Account Registration Completed\"\n  },\n  successRegisterCompletedBody: {\n    \"id\": \"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.\",\n    \"defaultMessage\": \"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.\"\n  },\n  register: {\n    \"id\": \"Register\",\n    \"defaultMessage\": \"Register\"\n  }\n});\n/**\n * Register class.\n * @class Register\n * @extends Component\n */\n\nclass Register extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null\n    };\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.successRegisterCompletedTitle),\n        content: this.props.intl.formatMessage(messages.successRegisterCompletedBody),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }\n      }));\n      this.props.history.push('/login');\n    }\n  }\n  /**\n   * On submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    this.props.createUser({\n      fullname: data.fullname,\n      email: data.email,\n      password: data.password\n    });\n    this.setState({\n      error: null\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"page-register\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.register),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      title: this.props.intl.formatMessage(messages.title),\n      error: this.state.error || this.props.error,\n      loading: this.props.loading,\n      submitLabel: this.props.intl.formatMessage(messages.register),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['fullname', 'email']\n        }],\n        properties: {\n          fullname: {\n            type: 'string',\n            title: this.props.intl.formatMessage(messages.fullnameTitle),\n            description: this.props.intl.formatMessage(messages.fullnameDescription)\n          },\n          email: {\n            type: 'string',\n            title: this.props.intl.formatMessage(messages.emailTitle),\n            description: this.props.intl.formatMessage(messages.emailDescription)\n          }\n        },\n        required: ['fullname', 'email']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(Register, \"propTypes\", {\n  createUser: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  })\n});\n\n_defineProperty(Register, \"defaultProps\", {\n  error: null\n});\n\nexport default compose(withRouter, injectIntl, connect(state => ({\n  loading: state.users.create.loading,\n  loaded: state.users.create.loaded,\n  error: state.users.create.error\n}), {\n  createUser\n}))(Register);","map":{"version":3,"names":["React","Component","Helmet","connect","compose","defineMessages","injectIntl","PropTypes","withRouter","toast","Form","Toast","createUser","messages","title","default","fullnameTitle","fullnameDescription","emailTitle","emailDescription","successRegisterCompletedTitle","successRegisterCompletedBody","register","Register","constructor","props","onSubmit","bind","state","error","UNSAFE_componentWillReceiveProps","nextProps","loading","loaded","success","intl","formatMessage","history","push","data","fullname","email","password","setState","render","fieldsets","id","fields","properties","type","description","required","func","isRequired","bool","shape","message","string","users","create"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Register/Register.jsx"],"sourcesContent":["/**\n * Register container.\n * @module components/theme/Register/Register\n */\n\nimport React, { Component } from 'react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport { createUser } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Registration form',\n    defaultMessage: 'Registration form',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n    defaultMessage:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n  },\n  successRegisterCompletedTitle: {\n    id: 'Account Registration Completed',\n    defaultMessage: 'Account Registration Completed',\n  },\n  successRegisterCompletedBody: {\n    id:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n    defaultMessage:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n  },\n  register: {\n    id: 'Register',\n    defaultMessage: 'Register',\n  },\n});\n\n/**\n * Register class.\n * @class Register\n * @extends Component\n */\nclass Register extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createUser: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(\n            messages.successRegisterCompletedTitle,\n          )}\n          content={this.props.intl.formatMessage(\n            messages.successRegisterCompletedBody,\n          )}\n        />,\n      );\n      this.props.history.push('/login');\n    }\n  }\n\n  /**\n   * On submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createUser({\n      fullname: data.fullname,\n      email: data.email,\n      password: data.password,\n    });\n    this.setState({\n      error: null,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-register\">\n        <Helmet title={this.props.intl.formatMessage(messages.register)} />\n        <Form\n          onSubmit={this.onSubmit}\n          title={this.props.intl.formatMessage(messages.title)}\n          error={this.state.error || this.props.error}\n          loading={this.props.loading}\n          submitLabel={this.props.intl.formatMessage(messages.register)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['fullname', 'email'],\n              },\n            ],\n            properties: {\n              fullname: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.fullnameTitle),\n                description: this.props.intl.formatMessage(\n                  messages.fullnameDescription,\n                ),\n              },\n              email: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.emailTitle),\n                description: this.props.intl.formatMessage(\n                  messages.emailDescription,\n                ),\n              },\n            },\n            required: ['fullname', 'email'],\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state) => ({\n      loading: state.users.create.loading,\n      loaded: state.users.create.loaded,\n      error: state.users.create.error,\n    }),\n    { createUser },\n  ),\n)(Register);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Registration form","defaultMessage":"Registration form"},{"id":"Default","defaultMessage":"Default"},{"id":"Full Name","defaultMessage":"Full Name"},{"id":"Enter full name, e.g. John Smith.","defaultMessage":"Enter full name, e.g. John Smith."},{"id":"E-mail","defaultMessage":"E-mail"},{"id":"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.","defaultMessage":"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere."},{"id":"Account Registration Completed","defaultMessage":"Account Registration Completed"},{"id":"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.","defaultMessage":"The registration process has been successful. Please check your e-mail inbox for information on how activate your account."},{"id":"Register","defaultMessage":"Register"}]}},"sourceType":"module"}