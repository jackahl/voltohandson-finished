{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/Cell.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorReference, SlateEditor } from '@plone/volto-slate/editor';\nimport { ReactEditor } from 'slate-react';\nimport config from '@plone/volto/registry';\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.handleContainerFocus = this.handleContainerFocus.bind(this);\n    this.state = {\n      editor: null\n    };\n    this.tableblockExtensions = config.settings.slate.tableblockExtensions;\n  }\n\n  componentWillUnmount() {\n    this.isUnmounted = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isTableBlockSelected !== this.props.isTableBlockSelected && this.props.isTableBlockSelected && this.props.cell === 0 && this.props.row === 0 && (!this.props.selectedCell || this.props.selectedCell.row === 0 && this.props.selectedCell.cell === 0)) {\n      this.props.onSelectCell(this.props.row, this.props.cell); // Wait for Slate to initialize before asking it to focus\n\n      if (this.state.editor) {\n        setTimeout(() => !this.isUnmounted && ReactEditor.focus(this.state.editor), 0);\n      }\n    }\n  }\n\n  onChange(val) {\n    this.props.onChange(this.props.row, this.props.cell, [...val]);\n  }\n\n  handleContainerFocus() {\n    this.props.onSelectCell(this.props.row, this.props.cell);\n  }\n\n  render() {\n    return __CLIENT__ && __jsx(SlateEditor, {\n      tabIndex: 0,\n      onChange: this.onChange,\n      extensions: this.tableblockExtensions,\n      value: this.props.value,\n      selected: this.props.selected,\n      onFocus: this.handleContainerFocus,\n      onClick: this.handleContainerFocus,\n      debug: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, __jsx(EditorReference, {\n      onHasEditor: editor => !this.state.editor && this.setState({\n        editor\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\n_defineProperty(Cell, \"propTypes\", {\n  onSelectCell: PropTypes.func.isRequired,\n  row: PropTypes.number,\n  cell: PropTypes.number,\n  value: PropTypes.array,\n  selected: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n  isTableBlockSelected: PropTypes.bool\n});\n\n_defineProperty(Cell, \"defaultProps\", {});\n\nexport default Cell;","map":{"version":3,"names":["React","Component","PropTypes","EditorReference","SlateEditor","ReactEditor","config","Cell","constructor","props","onChange","bind","handleContainerFocus","state","editor","tableblockExtensions","settings","slate","componentWillUnmount","isUnmounted","componentDidUpdate","prevProps","isTableBlockSelected","cell","row","selectedCell","onSelectCell","setTimeout","focus","val","render","__CLIENT__","value","selected","setState","func","isRequired","number","array","bool"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/Cell.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorReference, SlateEditor } from '@plone/volto-slate/editor';\nimport { ReactEditor } from 'slate-react';\nimport config from '@plone/volto/registry';\n\nclass Cell extends Component {\n  static propTypes = {\n    onSelectCell: PropTypes.func.isRequired,\n    row: PropTypes.number,\n    cell: PropTypes.number,\n    value: PropTypes.array,\n    selected: PropTypes.bool,\n    onChange: PropTypes.func.isRequired,\n    isTableBlockSelected: PropTypes.bool,\n  };\n\n  static defaultProps = {};\n\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n    this.handleContainerFocus = this.handleContainerFocus.bind(this);\n    this.state = { editor: null };\n    this.tableblockExtensions = config.settings.slate.tableblockExtensions;\n  }\n\n  componentWillUnmount() {\n    this.isUnmounted = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.isTableBlockSelected !== this.props.isTableBlockSelected &&\n      this.props.isTableBlockSelected &&\n      this.props.cell === 0 &&\n      this.props.row === 0 &&\n      (!this.props.selectedCell ||\n        (this.props.selectedCell.row === 0 &&\n          this.props.selectedCell.cell === 0))\n    ) {\n      this.props.onSelectCell(this.props.row, this.props.cell);\n\n      // Wait for Slate to initialize before asking it to focus\n      if (this.state.editor) {\n        setTimeout(\n          () => !this.isUnmounted && ReactEditor.focus(this.state.editor),\n          0,\n        );\n      }\n    }\n  }\n\n  onChange(val) {\n    this.props.onChange(this.props.row, this.props.cell, [...val]);\n  }\n\n  handleContainerFocus() {\n    this.props.onSelectCell(this.props.row, this.props.cell);\n  }\n\n  render() {\n    return (\n      __CLIENT__ && (\n        <SlateEditor\n          tabIndex={0}\n          onChange={this.onChange}\n          extensions={this.tableblockExtensions}\n          value={this.props.value}\n          selected={this.props.selected}\n          onFocus={this.handleContainerFocus}\n          onClick={this.handleContainerFocus}\n          debug={false}\n        >\n          <EditorReference\n            onHasEditor={(editor) =>\n              !this.state.editor && this.setState({ editor })\n            }\n          />\n        </SlateEditor>\n      )\n    );\n  }\n}\n\nexport default Cell;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}