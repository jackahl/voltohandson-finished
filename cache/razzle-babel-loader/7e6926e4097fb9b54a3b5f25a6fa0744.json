{"ast":null,"code":"import _union from \"lodash/union\";\nimport _flatten from \"lodash/flatten\";\nimport _compact from \"lodash/compact\";\nconst _excluded = [\"expand\"],\n      _excluded2 = [\"request\", \"type\", \"mode\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/**\n * Api middleware.\n * @module middleware/api\n */\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\nimport config from '@plone/volto/registry';\nimport { GET_CONTENT, LOGIN, RESET_APIERROR, SET_APIERROR } from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nlet socket = null;\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\n\nexport function addExpandersToPath(path, type) {\n  const {\n    settings\n  } = config;\n  const {\n    apiExpanders = []\n  } = settings;\n\n  const _qs$parseUrl = qs.parseUrl(path),\n        {\n    url,\n    query: {\n      expand\n    }\n  } = _qs$parseUrl,\n        query = _objectWithoutProperties(_qs$parseUrl.query, _excluded);\n\n  const expandersFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).map(expand => expand[type]);\n\n  const expandMerge = _compact(_union([expand, ..._flatten(expandersFromConfig)]));\n\n  const stringifiedExpand = qs.stringify({\n    expand: expandMerge\n  }, {\n    arrayFormat: 'comma',\n    encode: false\n  });\n  const querystringFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).reduce((acc, expand) => _objectSpread(_objectSpread({}, acc), expand === null || expand === void 0 ? void 0 : expand['querystring']), {});\n\n  const queryMerge = _objectSpread(_objectSpread({}, query), querystringFromConfig);\n\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false\n  });\n\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\n\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n\n      case socket.OPEN:\n        resolve(socket);\n        break;\n\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\n\n\nexport default (api => ({\n  dispatch,\n  getState\n}) => next => action => {\n  const {\n    settings\n  } = config;\n\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  const {\n    request,\n    type,\n    mode = 'parallel'\n  } = action,\n        rest = _objectWithoutProperties(action, _excluded2);\n\n  const {\n    subrequest\n  } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n\n  if (!request) {\n    return next(action);\n  }\n\n  next(_objectSpread(_objectSpread({}, rest), {}, {\n    type: `${type}_PENDING`\n  }));\n\n  if (socket) {\n    actionPromise = Array.isArray(request) ? Promise.all(request.map(item => sendOnSocket(_objectSpread(_objectSpread({}, item), {}, {\n      path: addExpandersToPath(item.path, type),\n      id: type\n    })))) : sendOnSocket(_objectSpread(_objectSpread({}, request), {}, {\n      path: addExpandersToPath(request.path, type),\n      id: type\n    }));\n  } else {\n    actionPromise = Array.isArray(request) ? mode === 'serial' ? request.reduce((prevPromise, item) => {\n      return prevPromise.then(acc => {\n        return api[item.op](addExpandersToPath(item.path, type), {\n          data: item.data,\n          type: item.type,\n          headers: item.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type)\n        }).then(reqres => {\n          return [...acc, reqres];\n        });\n      });\n    }, Promise.resolve([])) : Promise.all(request.map(item => api[item.op](addExpandersToPath(item.path, type), {\n      data: item.data,\n      type: item.type,\n      headers: item.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type)\n    }))) : api[request.op](addExpandersToPath(request.path, type), {\n      data: request.data,\n      type: request.type,\n      headers: request.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type)\n    });\n    actionPromise.then(result => {\n      const {\n        settings\n      } = config;\n\n      if (getState().apierror.connectionRefused) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          type: RESET_APIERROR\n        }));\n      }\n\n      if (type === GET_CONTENT) {\n        var _result$language;\n\n        const lang = result === null || result === void 0 ? void 0 : (_result$language = result.language) === null || _result$language === void 0 ? void 0 : _result$language.token;\n\n        if (lang && getState().intl.language !== lang && !subrequest && config.settings.supportedLanguages.includes(lang)) {\n          const langFileName = normalizeLanguageName(lang);\n          import(\"../../../../../locales/\" + langFileName + '.json').then(locale => {\n            dispatch(changeLanguage(lang, locale.default));\n          });\n        }\n      }\n\n      if (type === LOGIN && settings.websockets) {\n        const cookies = new Cookies();\n        cookies.set('auth_token', result.token, getCookieOptions({\n          expires: new Date(jwtDecode(result.token).exp * 1000)\n        }));\n        api.get('/@wstoken').then(res => {\n          socket = new WebSocket(`${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${res.token}`);\n\n          socket.onmessage = message => {\n            const packet = JSON.parse(message.data);\n\n            if (packet.error) {\n              dispatch({\n                type: `${packet.id}_FAIL`,\n                error: packet.error\n              });\n            } else {\n              dispatch({\n                type: `${packet.id}_SUCCESS`,\n                result: JSON.parse(packet.data)\n              });\n            }\n          };\n        });\n      }\n\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        result,\n        type: `${type}_SUCCESS`\n      }));\n    }, error => {\n      // Only SRR can set ECONNREFUSED\n      if (error.code === 'ECONNREFUSED') {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: error.code,\n          connectionRefused: true,\n          type: SET_APIERROR\n        }));\n      } // Response error is marked crossDomain if CORS error happen\n      else if (error.crossDomain) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: 'CORSERROR',\n          connectionRefused: false,\n          type: SET_APIERROR\n        }));\n      } // Check for actions who can raise api errors\n\n\n      if (settings.actions_raising_api_errors.includes(action.type)) {\n        var _error$response, _error$response2;\n\n        // Gateway timeout\n        if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusCode) === 504) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR\n          }));\n        } // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 301) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        } // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 408) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        } // Unauthorized\n        else if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusCode) === 401) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.response,\n            message: error.response.body.message,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n      }\n\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        error,\n        type: `${type}_FAIL`\n      }));\n    });\n  }\n\n  return actionPromise;\n});","map":{"version":3,"names":["Cookies","jwtDecode","matchPath","qs","config","GET_CONTENT","LOGIN","RESET_APIERROR","SET_APIERROR","changeLanguage","normalizeLanguageName","getCookieOptions","socket","addExpandersToPath","path","type","settings","apiExpanders","parseUrl","url","query","expand","expandersFromConfig","filter","match","map","expandMerge","stringifiedExpand","stringify","arrayFormat","encode","querystringFromConfig","reduce","acc","queryMerge","stringifiedQuery","sendOnSocket","request","Promise","resolve","reject","readyState","CONNECTING","addEventListener","OPEN","then","send","JSON","api","dispatch","getState","next","action","mode","rest","subrequest","actionPromise","Array","isArray","all","item","id","prevPromise","op","data","headers","params","checkUrl","actions_raising_api_errors","includes","reqres","result","apierror","connectionRefused","lang","language","token","intl","supportedLanguages","langFileName","locale","default","websockets","cookies","set","expires","Date","exp","get","res","WebSocket","apiPath","replace","onmessage","message","packet","parse","error","code","statusCode","crossDomain","response","body"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/middleware/api.js"],"sourcesContent":["/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { compact, flatten, union } from 'lodash';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\n\nimport config from '@plone/volto/registry';\n\nimport {\n  GET_CONTENT,\n  LOGIN,\n  RESET_APIERROR,\n  SET_APIERROR,\n} from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type) {\n  const { settings } = config;\n  const { apiExpanders = [] } = settings;\n\n  const {\n    url,\n    query: { expand, ...query },\n  } = qs.parseUrl(path);\n\n  const expandersFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .map((expand) => expand[type]);\n\n  const expandMerge = compact(union([expand, ...flatten(expandersFromConfig)]));\n\n  const stringifiedExpand = qs.stringify(\n    { expand: expandMerge },\n    {\n      arrayFormat: 'comma',\n      encode: false,\n    },\n  );\n\n  const querystringFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .reduce((acc, expand) => ({ ...acc, ...expand?.['querystring'] }), {});\n\n  const queryMerge = { ...query, ...querystringFromConfig };\n\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false,\n  });\n\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nexport default (api) => ({ dispatch, getState }) => (next) => (action) => {\n  const { settings } = config;\n\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  const { request, type, mode = 'parallel', ...rest } = action;\n  const { subrequest } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n\n  if (!request) {\n    return next(action);\n  }\n\n  next({ ...rest, type: `${type}_PENDING` });\n\n  if (socket) {\n    actionPromise = Array.isArray(request)\n      ? Promise.all(\n          request.map((item) =>\n            sendOnSocket({\n              ...item,\n              path: addExpandersToPath(item.path, type),\n              id: type,\n            }),\n          ),\n        )\n      : sendOnSocket({\n          ...request,\n          path: addExpandersToPath(request.path, type),\n          id: type,\n        });\n  } else {\n    actionPromise = Array.isArray(request)\n      ? mode === 'serial'\n        ? request.reduce((prevPromise, item) => {\n            return prevPromise.then((acc) => {\n              return api[item.op](addExpandersToPath(item.path, type), {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n                params: request.params,\n                checkUrl: settings.actions_raising_api_errors.includes(\n                  action.type,\n                ),\n              }).then((reqres) => {\n                return [...acc, reqres];\n              });\n            });\n          }, Promise.resolve([]))\n        : Promise.all(\n            request.map((item) =>\n              api[item.op](addExpandersToPath(item.path, type), {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n                params: request.params,\n                checkUrl: settings.actions_raising_api_errors.includes(\n                  action.type,\n                ),\n              }),\n            ),\n          )\n      : api[request.op](addExpandersToPath(request.path, type), {\n          data: request.data,\n          type: request.type,\n          headers: request.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type),\n        });\n    actionPromise.then(\n      (result) => {\n        const { settings } = config;\n        if (getState().apierror.connectionRefused) {\n          next({\n            ...rest,\n            type: RESET_APIERROR,\n          });\n        }\n        if (type === GET_CONTENT) {\n          const lang = result?.language?.token;\n          if (\n            lang &&\n            getState().intl.language !== lang &&\n            !subrequest &&\n            config.settings.supportedLanguages.includes(lang)\n          ) {\n            const langFileName = normalizeLanguageName(lang);\n            import('~/../locales/' + langFileName + '.json').then((locale) => {\n              dispatch(changeLanguage(lang, locale.default));\n            });\n          }\n        }\n        if (type === LOGIN && settings.websockets) {\n          const cookies = new Cookies();\n          cookies.set(\n            'auth_token',\n            result.token,\n            getCookieOptions({\n              expires: new Date(jwtDecode(result.token).exp * 1000),\n            }),\n          );\n          api.get('/@wstoken').then((res) => {\n            socket = new WebSocket(\n              `${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${\n                res.token\n              }`,\n            );\n            socket.onmessage = (message) => {\n              const packet = JSON.parse(message.data);\n              if (packet.error) {\n                dispatch({\n                  type: `${packet.id}_FAIL`,\n                  error: packet.error,\n                });\n              } else {\n                dispatch({\n                  type: `${packet.id}_SUCCESS`,\n                  result: JSON.parse(packet.data),\n                });\n              }\n            };\n          });\n        }\n        return next({ ...rest, result, type: `${type}_SUCCESS` });\n      },\n      (error) => {\n        // Only SRR can set ECONNREFUSED\n        if (error.code === 'ECONNREFUSED') {\n          next({\n            ...rest,\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Response error is marked crossDomain if CORS error happen\n        else if (error.crossDomain) {\n          next({\n            ...rest,\n            error,\n            statusCode: 'CORSERROR',\n            connectionRefused: false,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Check for actions who can raise api errors\n        if (settings.actions_raising_api_errors.includes(action.type)) {\n          // Gateway timeout\n          if (error?.response?.statusCode === 504) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: true,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Redirect\n          else if (error?.code === 301) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Redirect\n          else if (error?.code === 408) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Unauthorized\n          else if (error?.response?.statusCode === 401) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.response,\n              message: error.response.body.message,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n        }\n        return next({ ...rest, error, type: `${type}_FAIL` });\n      },\n    );\n  }\n\n  return actionPromise;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}