{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/DefaultView.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport { Container, Segment, Grid, Label } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport { getSchema } from '@plone/volto/actions';\nimport { getWidget } from '@plone/volto/helpers/Widget/utils';\nimport RenderBlocks from './RenderBlocks';\nimport { hasBlocksData, getBaseUrl } from '@plone/volto/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultView = props => {\n  const {\n    content,\n    location\n  } = props;\n  const path = getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || '');\n  const dispatch = useDispatch();\n  const {\n    views\n  } = config.widgets;\n  const contentSchema = useSelector(state => {\n    var _state$schema;\n\n    return (_state$schema = state.schema) === null || _state$schema === void 0 ? void 0 : _state$schema.schema;\n  });\n  const fieldsetsToExclude = ['categorization', 'dates', 'ownership', 'settings'];\n  const fieldsets = contentSchema === null || contentSchema === void 0 ? void 0 : contentSchema.fieldsets.filter(fs => !fieldsetsToExclude.includes(fs.id)); // TL;DR: There is a flash of the non block-based view because of the reset\n  // of the content on route change. Subscribing to the content change at this\n  // level has nasty implications, so we can't watch the Redux state for loaded\n  // content flag here (because it forces an additional component update)\n  // Instead, we can watch if the content is \"empty\", but this has a drawback\n  // since the locking mechanism inserts a `lock` key before the content is there.\n  // So \"empty\" means `content` is present, but only with a `lock` key, thus the next\n  // ugly condition comes to life\n\n  const contentLoaded = content && !_isEqual(Object.keys(content), ['lock']);\n  React.useEffect(() => {\n    (content === null || content === void 0 ? void 0 : content['@type']) && !hasBlocksData(content) && dispatch(getSchema(content['@type'], location.pathname)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // If the content is not yet loaded, then do not show anything\n\n  return contentLoaded ? hasBlocksData(content) ? __jsx(\"div\", {\n    id: \"page-document\",\n    className: \"ui container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(RenderBlocks, _extends({}, props, {\n    path: path,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }))) : __jsx(Container, {\n    id: \"page-document\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, fieldsets === null || fieldsets === void 0 ? void 0 : fieldsets.map(fs => {\n    var _fs$fields;\n\n    return __jsx(\"div\", {\n      className: \"fieldset\",\n      key: fs.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, fs.id !== 'default' && __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 39\n      }\n    }, fs.title), (_fs$fields = fs.fields) === null || _fs$fields === void 0 ? void 0 : _fs$fields.map((f, key) => {\n      let field = _objectSpread(_objectSpread({}, contentSchema === null || contentSchema === void 0 ? void 0 : contentSchema.properties[f]), {}, {\n        id: f,\n        widget: getWidget(f, contentSchema === null || contentSchema === void 0 ? void 0 : contentSchema.properties[f])\n      });\n\n      let Widget = views === null || views === void 0 ? void 0 : views.getWidget(field);\n      return f !== 'title' ? __jsx(Grid, {\n        celled: \"internally\",\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 19\n        }\n      }, __jsx(Grid.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, __jsx(Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 23\n        }\n      }, field.title, \":\")), __jsx(Grid.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, __jsx(Segment, {\n        basic: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 23\n        }\n      }, __jsx(Widget, {\n        value: content[f],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      })))) : __jsx(Widget, {\n        key: key,\n        value: content[f],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 19\n        }\n      });\n    }));\n  })) : null;\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string\n    })\n  }).isRequired\n};\nexport default injectIntl(DefaultView);","map":{"version":3,"names":["React","PropTypes","injectIntl","Container","Segment","Grid","Label","config","getSchema","getWidget","RenderBlocks","hasBlocksData","getBaseUrl","useDispatch","useSelector","DefaultView","props","content","location","path","pathname","dispatch","views","widgets","contentSchema","state","schema","fieldsetsToExclude","fieldsets","filter","fs","includes","id","contentLoaded","Object","keys","useEffect","map","title","fields","f","key","field","properties","widget","Widget","propTypes","shape","string","description","text","data","isRequired"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/DefaultView.jsx"],"sourcesContent":["/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\n\nimport { Container, Segment, Grid, Label } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport { getSchema } from '@plone/volto/actions';\nimport { getWidget } from '@plone/volto/helpers/Widget/utils';\nimport RenderBlocks from './RenderBlocks';\n\nimport { hasBlocksData, getBaseUrl } from '@plone/volto/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isEqual } from 'lodash';\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultView = (props) => {\n  const { content, location } = props;\n  const path = getBaseUrl(location?.pathname || '');\n  const dispatch = useDispatch();\n  const { views } = config.widgets;\n  const contentSchema = useSelector((state) => state.schema?.schema);\n  const fieldsetsToExclude = [\n    'categorization',\n    'dates',\n    'ownership',\n    'settings',\n  ];\n  const fieldsets = contentSchema?.fieldsets.filter(\n    (fs) => !fieldsetsToExclude.includes(fs.id),\n  );\n\n  // TL;DR: There is a flash of the non block-based view because of the reset\n  // of the content on route change. Subscribing to the content change at this\n  // level has nasty implications, so we can't watch the Redux state for loaded\n  // content flag here (because it forces an additional component update)\n  // Instead, we can watch if the content is \"empty\", but this has a drawback\n  // since the locking mechanism inserts a `lock` key before the content is there.\n  // So \"empty\" means `content` is present, but only with a `lock` key, thus the next\n  // ugly condition comes to life\n  const contentLoaded = content && !isEqual(Object.keys(content), ['lock']);\n\n  React.useEffect(() => {\n    content?.['@type'] &&\n      !hasBlocksData(content) &&\n      dispatch(getSchema(content['@type'], location.pathname));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // If the content is not yet loaded, then do not show anything\n  return contentLoaded ? (\n    hasBlocksData(content) ? (\n      <div id=\"page-document\" className=\"ui container\">\n        <RenderBlocks {...props} path={path} />\n      </div>\n    ) : (\n      <Container id=\"page-document\">\n        {fieldsets?.map((fs) => {\n          return (\n            <div className=\"fieldset\" key={fs.id}>\n              {fs.id !== 'default' && <h2>{fs.title}</h2>}\n              {fs.fields?.map((f, key) => {\n                let field = {\n                  ...contentSchema?.properties[f],\n                  id: f,\n                  widget: getWidget(f, contentSchema?.properties[f]),\n                };\n                let Widget = views?.getWidget(field);\n                return f !== 'title' ? (\n                  <Grid celled=\"internally\" key={key}>\n                    <Grid.Row>\n                      <Label>{field.title}:</Label>\n                    </Grid.Row>\n                    <Grid.Row>\n                      <Segment basic>\n                        <Widget value={content[f]} />\n                      </Segment>\n                    </Grid.Row>\n                  </Grid>\n                ) : (\n                  <Widget key={key} value={content[f]} />\n                );\n              })}\n            </div>\n          );\n        })}\n      </Container>\n    )\n  ) : null;\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default injectIntl(DefaultView);\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,IAA7B,EAAmCC,KAAnC,QAAgD,mBAAhD;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,sBAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAC7B,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAwBF,KAA9B;EACA,MAAMG,IAAI,GAAGP,UAAU,CAAC,CAAAM,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,QAAV,KAAsB,EAAvB,CAAvB;EACA,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;EACA,MAAM;IAAES;EAAF,IAAYf,MAAM,CAACgB,OAAzB;EACA,MAAMC,aAAa,GAAGV,WAAW,CAAEW,KAAD;IAAA;;IAAA,wBAAWA,KAAK,CAACC,MAAjB,kDAAW,cAAcA,MAAzB;EAAA,CAAD,CAAjC;EACA,MAAMC,kBAAkB,GAAG,CACzB,gBADyB,EAEzB,OAFyB,EAGzB,WAHyB,EAIzB,UAJyB,CAA3B;EAMA,MAAMC,SAAS,GAAGJ,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEI,SAAf,CAAyBC,MAAzB,CACfC,EAAD,IAAQ,CAACH,kBAAkB,CAACI,QAAnB,CAA4BD,EAAE,CAACE,EAA/B,CADO,CAAlB,CAZ6B,CAgB7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAMC,aAAa,GAAGhB,OAAO,IAAI,CAAC,SAAQiB,MAAM,CAACC,IAAP,CAAYlB,OAAZ,CAAR,EAA8B,CAAC,MAAD,CAA9B,CAAlC;EAEAjB,KAAK,CAACoC,SAAN,CAAgB,MAAM;IACpB,CAAAnB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAG,OAAH,CAAP,KACE,CAACN,aAAa,CAACM,OAAD,CADhB,IAEEI,QAAQ,CAACb,SAAS,CAACS,OAAO,CAAC,OAAD,CAAR,EAAmBC,QAAQ,CAACE,QAA5B,CAAV,CAFV,CADoB,CAIpB;EACD,CALD,EAKG,EALH,EA1B6B,CAiC7B;;EACA,OAAOa,aAAa,GAClBtB,aAAa,CAACM,OAAD,CAAb,GACE;IAAK,EAAE,EAAC,eAAR;IAAwB,SAAS,EAAC,cAAlC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,YAAD,eAAkBD,KAAlB;IAAyB,IAAI,EAAEG,IAA/B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GADF,CADF,GAKE,MAAC,SAAD;IAAW,EAAE,EAAC,eAAd;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGS,SADH,aACGA,SADH,uBACGA,SAAS,CAAES,GAAX,CAAgBP,EAAD,IAAQ;IAAA;;IACtB,OACE;MAAK,SAAS,EAAC,UAAf;MAA0B,GAAG,EAAEA,EAAE,CAACE,EAAlC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGF,EAAE,CAACE,EAAH,KAAU,SAAV,IAAuB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAKF,EAAE,CAACQ,KAAR,CAD1B,gBAEGR,EAAE,CAACS,MAFN,+CAEG,WAAWF,GAAX,CAAe,CAACG,CAAD,EAAIC,GAAJ,KAAY;MAC1B,IAAIC,KAAK,mCACJlB,aADI,aACJA,aADI,uBACJA,aAAa,CAAEmB,UAAf,CAA0BH,CAA1B,CADI;QAEPR,EAAE,EAAEQ,CAFG;QAGPI,MAAM,EAAEnC,SAAS,CAAC+B,CAAD,EAAIhB,aAAJ,aAAIA,aAAJ,uBAAIA,aAAa,CAAEmB,UAAf,CAA0BH,CAA1B,CAAJ;MAHV,EAAT;;MAKA,IAAIK,MAAM,GAAGvB,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEb,SAAP,CAAiBiC,KAAjB,CAAb;MACA,OAAOF,CAAC,KAAK,OAAN,GACL,MAAC,IAAD;QAAM,MAAM,EAAC,YAAb;QAA0B,GAAG,EAAEC,GAA/B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,IAAD,CAAM,GAAN;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,KAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAQC,KAAK,CAACJ,KAAd,MADF,CADF,EAIE,MAAC,IAAD,CAAM,GAAN;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,OAAD;QAAS,KAAK,MAAd;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,MAAD;QAAQ,KAAK,EAAErB,OAAO,CAACuB,CAAD,CAAtB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CADF,CAJF,CADK,GAYL,MAAC,MAAD;QAAQ,GAAG,EAAEC,GAAb;QAAkB,KAAK,EAAExB,OAAO,CAACuB,CAAD,CAAhC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAZF;IAcD,CArBA,CAFH,CADF;EA2BD,CA5BA,CADH,CANgB,GAsChB,IAtCJ;AAuCD,CAzED;AA2EA;AACA;AACA;AACA;AACA;;;AACAzB,WAAW,CAAC+B,SAAZ,GAAwB;EACtB;AACF;AACA;EACE7B,OAAO,EAAEhB,SAAS,CAAC8C,KAAV,CAAgB;IACvB;AACJ;AACA;IACIT,KAAK,EAAErC,SAAS,CAAC+C,MAJM;;IAKvB;AACJ;AACA;IACIC,WAAW,EAAEhD,SAAS,CAAC+C,MARA;;IASvB;AACJ;AACA;IACIE,IAAI,EAAEjD,SAAS,CAAC8C,KAAV,CAAgB;MACpB;AACN;AACA;MACMI,IAAI,EAAElD,SAAS,CAAC+C;IAJI,CAAhB;EAZiB,CAAhB,EAkBNI;AAtBmB,CAAxB;AAyBA,eAAelD,UAAU,CAACa,WAAD,CAAzB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}