{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/SelectWidget.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\nimport { customSelectStyles, DropdownIndicator, ClearIndicator, Option, selectTheme, MenuList } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  close: {\n    \"id\": \"Close\",\n    \"defaultMessage\": \"Close\"\n  },\n  choices: {\n    \"id\": \"Choices\",\n    \"defaultMessage\": \"Choices\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\n\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$choices;\n\n    if ((!this.props.choices || ((_this$props$choices = this.props.choices) === null || _this$props$choices === void 0 ? void 0 : _this$props$choices.length) === 0) && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$placehold;\n\n    const {\n      id,\n      choices,\n      value,\n      intl,\n      onChange\n    } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl); // Make sure that both disabled and isDisabled (from the DX layout feat work)\n\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n    let options = this.props.vocabBaseUrl ? this.props.choices : [..._map(choices, option => ({\n      value: option[0],\n      label: // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    })), // Only set \"no-value\" option if there's no default in the field\n    // TODO: also if this.props.defaultValue?\n    ...(this.props.noValueOption && !this.props.default ? [{\n      label: this.props.intl.formatMessage(messages.no_value),\n      value: 'no-value'\n    }] : [])];\n    const isMulti = this.props.isMulti ? this.props.isMulti : id === 'roles' || id === 'groups';\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }\n    }), __jsx(Select, {\n      id: `field-${id}`,\n      key: choices,\n      name: id,\n      isDisabled: disabled,\n      isSearchable: true,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      isMulti: isMulti,\n      options: options,\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, (options === null || options === void 0 ? void 0 : options.length) > 25 && {\n        MenuList\n      }), {}, {\n        DropdownIndicator,\n        ClearIndicator,\n        Option: this.props.customOptionStyling || Option\n      }),\n      value: normalizedValue,\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      onChange: selectedOption => {\n        if (isMulti) {\n          return onChange(id, selectedOption.map(el => el.value));\n        }\n\n        return onChange(id, selectedOption && selectedOption.value !== 'no-value' ? selectedOption.value : undefined);\n      },\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(SelectWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  getVocabularyTokenTitle: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool, PropTypes.func, PropTypes.array]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  noValueOption: PropTypes.bool,\n  customOptionStyling: PropTypes.any,\n  isMulti: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n\n_defineProperty(SelectWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null,\n  noValueOption: true,\n  customOptionStyling: null\n});\n\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\nexport default compose(injectLazyLibs(['reactSelect']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n\n  const vocabBaseUrl = !props.choices ? getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props) : '';\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale]; // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n\n  if (props.choices) {\n    return {\n      choices: props.choices,\n      lang: state.intl.locale\n    };\n  } else if (vocabState) {\n    var _vocabState$items;\n\n    return {\n      vocabBaseUrl,\n      choices: (_vocabState$items = vocabState === null || vocabState === void 0 ? void 0 : vocabState.items) !== null && _vocabState$items !== void 0 ? _vocabState$items : [],\n      lang: state.intl.locale\n    }; // There is a moment that vocabState is not there yet, so we need to pass the\n    // vocabBaseUrl to the component.\n  } else if (vocabBaseUrl) {\n    return {\n      vocabBaseUrl,\n      lang: state.intl.locale\n    };\n  }\n\n  return {\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary,\n  getVocabularyTokenTitle\n}))(SelectWidgetComponent);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","FormFieldWrapper","getVocabulary","getVocabularyTokenTitle","normalizeValue","customSelectStyles","DropdownIndicator","ClearIndicator","Option","selectTheme","MenuList","injectLazyLibs","messages","default","idTitle","idDescription","title","description","close","choices","required","select","no_value","no_options","SelectWidget","componentDidMount","props","length","vocabBaseUrl","vocabNameOrURL","size","subrequest","lang","render","id","value","intl","onChange","normalizedValue","disabled","isDisabled","Select","reactSelect","options","option","label","noValueOption","formatMessage","isMulti","customOptionStyling","placeholder","selectedOption","map","el","undefined","string","isRequired","bool","error","arrayOf","func","oneOfType","object","array","items","shape","vocabulary","widgetOptions","onBlur","onClick","onEdit","onDelete","wrapped","any","SelectWidgetComponent","state","vocabState","vocabularies","subrequests","locale"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/SelectWidget.jsx"],"sourcesContent":["/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\n\nimport {\n  customSelectStyles,\n  DropdownIndicator,\n  ClearIndicator,\n  Option,\n  selectTheme,\n  MenuList,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  close: {\n    id: 'Close',\n    defaultMessage: 'Close',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    getVocabularyTokenTitle: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.array,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    wrapped: PropTypes.bool,\n    noValueOption: PropTypes.bool,\n    customOptionStyling: PropTypes.any,\n    isMulti: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    noValueOption: true,\n    customOptionStyling: null,\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      (!this.props.choices || this.props.choices?.length === 0) &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, choices, value, intl, onChange } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl);\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n\n    let options = this.props.vocabBaseUrl\n      ? this.props.choices\n      : [\n          ...map(choices, (option) => ({\n            value: option[0],\n            label:\n              // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n              option[1] !== 'None' && option[1] ? option[1] : option[0],\n          })),\n          // Only set \"no-value\" option if there's no default in the field\n          // TODO: also if this.props.defaultValue?\n          ...(this.props.noValueOption && !this.props.default\n            ? [\n                {\n                  label: this.props.intl.formatMessage(messages.no_value),\n                  value: 'no-value',\n                },\n              ]\n            : []),\n        ];\n\n    const isMulti = this.props.isMulti\n      ? this.props.isMulti\n      : id === 'roles' || id === 'groups';\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Select\n          id={`field-${id}`}\n          key={choices}\n          name={id}\n          isDisabled={disabled}\n          isSearchable={true}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isMulti={isMulti}\n          options={options}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(options?.length > 25 && {\n              MenuList,\n            }),\n            DropdownIndicator,\n            ClearIndicator,\n            Option: this.props.customOptionStyling || Option,\n          }}\n          value={normalizedValue}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={(selectedOption) => {\n            if (isMulti) {\n              return onChange(\n                id,\n                selectedOption.map((el) => el.value),\n              );\n            }\n            return onChange(\n              id,\n              selectedOption && selectedOption.value !== 'no-value'\n                ? selectedOption.value\n                : undefined,\n            );\n          }}\n          isClearable\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\n\nexport default compose(\n  injectLazyLibs(['reactSelect']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl = !props.choices\n        ? getVocabFromHint(props) ||\n          getVocabFromField(props) ||\n          getVocabFromItems(props)\n        : '';\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.choices) {\n        return {\n          choices: props.choices,\n          lang: state.intl.locale,\n        };\n      } else if (vocabState) {\n        return {\n          vocabBaseUrl,\n          choices: vocabState?.items ?? [],\n          lang: state.intl.locale,\n        };\n        // There is a moment that vocabState is not there yet, so we need to pass the\n        // vocabBaseUrl to the component.\n      } else if (vocabBaseUrl) {\n        return {\n          vocabBaseUrl,\n          lang: state.intl.locale,\n        };\n      }\n      return { lang: state.intl.locale };\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectWidgetComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Close","defaultMessage":"Close"},{"id":"Choices","defaultMessage":"Choices"},{"id":"Required","defaultMessage":"Required"},{"id":"Select…","defaultMessage":"Select…"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module"}