{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nimport _includes from \"lodash/includes\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { BlockChooserButton } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nconst Editor = loadable({\n  resolved: {},\n\n  chunkName() {\n    return \"draft-js-plugins-editor\";\n  },\n\n  isReady(props) {\n    const key = this.resolve(props);\n\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n\n    return false;\n  },\n\n  importAsync: () => import(\n  /* webpackChunkName: \"draft-js-plugins-editor\" */\n  'draft-js-plugins-editor'),\n\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n\n  requireSync(props) {\n    const id = this.resolve(props);\n\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n\n    return eval('module.require')(id);\n  },\n\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"draft-js-plugins-editor\");\n    }\n\n    return eval('require.resolve')(\"draft-js-plugins-editor\");\n  }\n\n});\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\n\nexport class EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    const {\n      settings\n    } = config;\n    this.draftConfig = settings.richtextEditorSettings(props);\n    const {\n      EditorState,\n      convertFromRaw\n    } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n\n    if (!__SERVER__) {\n      let editorState;\n\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(convertFromRaw(props.data.text));\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons\n      });\n      this.state = {\n        editorState,\n        inlineToolbarPlugin\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    if (this.props.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n    }\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      const selectionState = this.state.editorState.getSelection();\n\n      if (selectionState.getStartOffset() < selectionState.getEndOffset()) {//keep selection\n      } else {\n        //nothing is selected, move focus to end\n        // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n        setTimeout(this.node.focus, 0);\n        const {\n          EditorState\n        } = this.props.draftJs;\n        this.setState({\n          editorState: EditorState.moveFocusToEnd(this.state.editorState)\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      convertToRaw,\n      EditorState,\n      convertFromRaw\n    } = this.props.draftJs;\n\n    if (!_isEqual(this.props.data, prevProps.data) && !_isEqual(convertToRaw(this.state.editorState.getCurrentContent()), this.props.data.text)) {\n      const editorState = this.props.data && this.props.data.text ? EditorState.createWithContent(convertFromRaw(this.props.data.text)) : EditorState.createEmpty();\n      this.setState({\n        editorState: editorState\n      });\n    }\n  }\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data) || !_isEqual(this.state.editorState, nextState.editorState);\n  }\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n\n\n  onChange(editorState) {\n    const shouldFilterPaste = editorState.getLastChangeType() === 'insert-fragment';\n    const {\n      convertToRaw\n    } = this.props.draftJs;\n    const {\n      filterEditorState\n    } = this.props.draftJsFilters;\n\n    if (!_isEqual(convertToRaw(editorState.getCurrentContent()), convertToRaw(this.state.editorState.getCurrentContent()))) {\n      if (shouldFilterPaste) {\n        let filteredState = editorState;\n        filteredState = filterEditorState({\n          blocks: ['unordered-list-item', 'ordered-list-item'],\n          styles: ['BOLD', 'ITALIC'],\n          entities: [{\n            type: 'LINK',\n            attributes: ['url']\n          }],\n          whitespacedCharacters: []\n        }, filteredState);\n        editorState = filteredState;\n      }\n\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        text: convertToRaw(editorState.getCurrentContent())\n      }));\n    }\n\n    this.setState({\n      editorState\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$data;\n\n    // console.log('draft config', this.draftConfig);\n    if (__SERVER__) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const placeholder = this.props.data.placeholder || this.props.formTitle || this.props.intl.formatMessage(messages.text);\n    const disableNewBlocks = ((_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data.disableNewBlocks) || this.props.detached;\n    const {\n      InlineToolbar\n    } = this.state.inlineToolbarPlugin; // const { settings } = config;\n\n    const isSoftNewlineEvent = this.props.draftJsLibIsSoftNewlineEvent.default;\n    const {\n      RichUtils\n    } = this.props.draftJs;\n    return __jsx(React.Fragment, null, __jsx(Editor, {\n      readOnly: !this.props.editable,\n      onChange: this.onChange,\n      editorState: this.state.editorState,\n      plugins: [this.state.inlineToolbarPlugin, // ...settings.richTextEditorPlugins,\n      ...this.draftConfig.richTextEditorPlugins],\n      blockRenderMap: this.draftConfig.extendedBlockRenderMap,\n      blockStyleFn: this.draftConfig.blockStyleFn,\n      customStyleMap: this.draftConfig.customStyleMap,\n      placeholder: placeholder,\n      handleReturn: e => {\n        if (isSoftNewlineEvent(e)) {\n          this.onChange(RichUtils.insertSoftNewline(this.state.editorState));\n          return 'handled';\n        }\n\n        if (!disableNewBlocks) {\n          const selectionState = this.state.editorState.getSelection();\n          const anchorKey = selectionState.getAnchorKey();\n          const currentContent = this.state.editorState.getCurrentContent();\n          const currentContentBlock = currentContent.getBlockForKey(anchorKey);\n          const blockType = currentContentBlock.getType();\n\n          if (!_includes(this.draftConfig.listBlockTypes, blockType)) {\n            this.props.onSelectBlock(this.props.onAddBlock(config.settings.defaultBlockType, this.props.index + 1));\n            return 'handled';\n          }\n\n          return 'un-handled';\n        }\n\n        return {};\n      },\n      handleKeyCommand: (command, editorState) => {\n        if (this.props.data.required) {\n          return;\n        }\n\n        if (command === 'backspace' && editorState.getCurrentContent().getPlainText().length === 0) {\n          this.props.onDeleteBlock(this.props.block, true);\n        }\n      },\n      onUpArrow: () => {\n        const selectionState = this.state.editorState.getSelection();\n        const currentCursorPosition = selectionState.getStartOffset();\n\n        if (currentCursorPosition === 0) {\n          this.props.onFocusPreviousBlock(this.props.block, this.node);\n        }\n      },\n      onDownArrow: () => {\n        const selectionState = this.state.editorState.getSelection();\n        const {\n          editorState\n        } = this.state;\n        const currentCursorPosition = selectionState.getStartOffset();\n        const blockLength = editorState.getCurrentContent().getFirstBlock().getLength();\n\n        if (currentCursorPosition === blockLength) {\n          this.props.onFocusNextBlock(this.props.block, this.node);\n        }\n      },\n      ref: node => {\n        this.node = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }), __jsx(InlineToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    }), this.props.selected && __jsx(BlockChooserButton, {\n      data: this.props.data,\n      block: this.props.block,\n      onInsertBlock: (id, value) => {\n        this.props.onSelectBlock(this.props.onInsertBlock(id, value));\n      },\n      allowedBlocks: this.props.allowedBlocks,\n      blocksConfig: this.props.blocksConfig,\n      size: \"24px\",\n      className: \"block-add-button\",\n      properties: this.props.properties,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\n_defineProperty(EditComponent, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  editable: PropTypes.bool,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool,\n  formTitle: PropTypes.string,\n  formDescription: PropTypes.string,\n  blocksConfig: PropTypes.objectOf(PropTypes.any),\n  properties: PropTypes.objectOf(PropTypes.any)\n});\n\n_defineProperty(EditComponent, \"defaultProps\", {\n  detached: false,\n  editable: true\n});\n\nexport const Edit = compose(injectIntl, injectLazyLibs(['draftJs', 'draftJsLibIsSoftNewlineEvent', 'draftJsFilters', 'draftJsInlineToolbarPlugin', 'draftJsBlockBreakoutPlugin', 'draftJsCreateInlineStyleButton', 'draftJsCreateBlockStyleButton', 'immutableLib' // TODO: add all plugin dependencies, also in Wysiwyg and Cell\n]))(EditComponent);\n\nconst Preloader = props => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? __jsx(Edit, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 19\n    }\n  })) : null;\n};\n\nexport default Preloader;","map":{"version":3,"names":["React","Component","PropTypes","compose","defineMessages","injectIntl","config","injectLazyLibs","BlockChooserButton","loadable","Editor","messages","text","EditComponent","constructor","props","settings","draftConfig","richtextEditorSettings","EditorState","convertFromRaw","draftJs","createInlineToolbarPlugin","draftJsInlineToolbarPlugin","default","__SERVER__","editorState","data","createWithContent","createEmpty","inlineToolbarPlugin","structure","richTextEditorInlineToolbarButtons","state","onChange","bind","componentDidMount","selected","setTimeout","node","focus","UNSAFE_componentWillReceiveProps","nextProps","selectionState","getSelection","getStartOffset","getEndOffset","setState","moveFocusToEnd","componentDidUpdate","prevProps","convertToRaw","getCurrentContent","shouldComponentUpdate","nextState","shouldFilterPaste","getLastChangeType","filterEditorState","draftJsFilters","filteredState","blocks","styles","entities","type","attributes","whitespacedCharacters","onChangeBlock","block","render","placeholder","formTitle","intl","formatMessage","disableNewBlocks","detached","InlineToolbar","isSoftNewlineEvent","draftJsLibIsSoftNewlineEvent","RichUtils","editable","richTextEditorPlugins","extendedBlockRenderMap","blockStyleFn","customStyleMap","e","insertSoftNewline","anchorKey","getAnchorKey","currentContent","currentContentBlock","getBlockForKey","blockType","getType","listBlockTypes","onSelectBlock","onAddBlock","defaultBlockType","index","command","required","getPlainText","length","onDeleteBlock","currentCursorPosition","onFocusPreviousBlock","blockLength","getFirstBlock","getLength","onFocusNextBlock","id","value","onInsertBlock","allowedBlocks","blocksConfig","properties","objectOf","any","isRequired","bool","number","string","func","onMutateBlock","arrayOf","showRestricted","formDescription","Edit","Preloader","loaded","setLoaded","useState","useEffect","load","then"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx"],"sourcesContent":["/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\n\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { includes, isEqual } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { BlockChooserButton } from '@plone/volto/components';\n\nimport loadable from '@loadable/component';\n\nconst Editor = loadable(() => import('draft-js-plugins-editor'));\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nexport class EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n    formTitle: PropTypes.string,\n    formDescription: PropTypes.string,\n    blocksConfig: PropTypes.objectOf(PropTypes.any),\n    properties: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n    editable: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    const { settings } = config;\n\n    this.draftConfig = settings.richtextEditorSettings(props);\n\n    const { EditorState, convertFromRaw } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(\n          convertFromRaw(props.data.text),\n        );\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      const selectionState = this.state.editorState.getSelection();\n\n      if (selectionState.getStartOffset() < selectionState.getEndOffset()) {\n        //keep selection\n      } else {\n        //nothing is selected, move focus to end\n        // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n        setTimeout(this.node.focus, 0);\n        const { EditorState } = this.props.draftJs;\n\n        this.setState({\n          editorState: EditorState.moveFocusToEnd(this.state.editorState),\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { convertToRaw, EditorState, convertFromRaw } = this.props.draftJs;\n    if (\n      !isEqual(this.props.data, prevProps.data) &&\n      !isEqual(\n        convertToRaw(this.state.editorState.getCurrentContent()),\n        this.props.data.text,\n      )\n    ) {\n      const editorState =\n        this.props.data && this.props.data.text\n          ? EditorState.createWithContent(convertFromRaw(this.props.data.text))\n          : EditorState.createEmpty();\n\n      this.setState({\n        editorState: editorState,\n      });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      !isEqual(this.state.editorState, nextState.editorState)\n    );\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const shouldFilterPaste =\n      editorState.getLastChangeType() === 'insert-fragment';\n\n    const { convertToRaw } = this.props.draftJs;\n    const { filterEditorState } = this.props.draftJsFilters;\n\n    if (\n      !isEqual(\n        convertToRaw(editorState.getCurrentContent()),\n        convertToRaw(this.state.editorState.getCurrentContent()),\n      )\n    ) {\n      if (shouldFilterPaste) {\n        let filteredState = editorState;\n        filteredState = filterEditorState(\n          {\n            blocks: ['unordered-list-item', 'ordered-list-item'],\n            styles: ['BOLD', 'ITALIC'],\n            entities: [\n              {\n                type: 'LINK',\n                attributes: ['url'],\n              },\n            ],\n            whitespacedCharacters: [],\n          },\n          filteredState,\n        );\n        editorState = filteredState;\n      }\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        text: convertToRaw(editorState.getCurrentContent()),\n      });\n    }\n    this.setState({ editorState });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // console.log('draft config', this.draftConfig);\n\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.formTitle ||\n      this.props.intl.formatMessage(messages.text);\n\n    const disableNewBlocks =\n      this.props.data?.disableNewBlocks || this.props.detached;\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n    // const { settings } = config;\n\n    const isSoftNewlineEvent = this.props.draftJsLibIsSoftNewlineEvent.default;\n    const { RichUtils } = this.props.draftJs;\n\n    return (\n      <>\n        <Editor\n          readOnly={!this.props.editable}\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[\n            this.state.inlineToolbarPlugin,\n            // ...settings.richTextEditorPlugins,\n            ...this.draftConfig.richTextEditorPlugins,\n          ]}\n          blockRenderMap={this.draftConfig.extendedBlockRenderMap}\n          blockStyleFn={this.draftConfig.blockStyleFn}\n          customStyleMap={this.draftConfig.customStyleMap}\n          placeholder={placeholder}\n          handleReturn={(e) => {\n            if (isSoftNewlineEvent(e)) {\n              this.onChange(\n                RichUtils.insertSoftNewline(this.state.editorState),\n              );\n              return 'handled';\n            }\n            if (!disableNewBlocks) {\n              const selectionState = this.state.editorState.getSelection();\n              const anchorKey = selectionState.getAnchorKey();\n              const currentContent = this.state.editorState.getCurrentContent();\n              const currentContentBlock = currentContent.getBlockForKey(\n                anchorKey,\n              );\n              const blockType = currentContentBlock.getType();\n              if (!includes(this.draftConfig.listBlockTypes, blockType)) {\n                this.props.onSelectBlock(\n                  this.props.onAddBlock(\n                    config.settings.defaultBlockType,\n                    this.props.index + 1,\n                  ),\n                );\n                return 'handled';\n              }\n              return 'un-handled';\n            }\n            return {};\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (this.props.data.required) {\n              return;\n            }\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteBlock(this.props.block, true);\n            }\n          }}\n          onUpArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const currentCursorPosition = selectionState.getStartOffset();\n\n            if (currentCursorPosition === 0) {\n              this.props.onFocusPreviousBlock(this.props.block, this.node);\n            }\n          }}\n          onDownArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            const currentCursorPosition = selectionState.getStartOffset();\n            const blockLength = editorState\n              .getCurrentContent()\n              .getFirstBlock()\n              .getLength();\n\n            if (currentCursorPosition === blockLength) {\n              this.props.onFocusNextBlock(this.props.block, this.node);\n            }\n          }}\n          ref={(node) => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n        {this.props.selected && (\n          <BlockChooserButton\n            data={this.props.data}\n            block={this.props.block}\n            onInsertBlock={(id, value) => {\n              this.props.onSelectBlock(this.props.onInsertBlock(id, value));\n            }}\n            allowedBlocks={this.props.allowedBlocks}\n            blocksConfig={this.props.blocksConfig}\n            size=\"24px\"\n            className=\"block-add-button\"\n            properties={this.props.properties}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport const Edit = compose(\n  injectIntl,\n  injectLazyLibs([\n    'draftJs',\n    'draftJsLibIsSoftNewlineEvent',\n    'draftJsFilters',\n    'draftJsInlineToolbarPlugin',\n    'draftJsBlockBreakoutPlugin',\n    'draftJsCreateInlineStyleButton',\n    'draftJsCreateBlockStyleButton',\n    'immutableLib',\n    // TODO: add all plugin dependencies, also in Wysiwyg and Cell\n  ]),\n)(EditComponent);\n\nconst Preloader = (props) => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? <Edit {...props} /> : null;\n};\n\nexport default Preloader;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module"}