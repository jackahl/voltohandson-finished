{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/EventView.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * EventView view component.\n * @module components/theme/View/EventView\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { hasBlocksData, flattenHTMLToAppURL } from '@plone/volto/helpers';\nimport { Image, Grid } from 'semantic-ui-react';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { EventDetails } from '@plone/volto/components';\n\nconst EventTextfieldView = _ref => {\n  let {\n    content\n  } = _ref;\n  return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  }, content.title && __jsx(\"h1\", {\n    className: \"documentFirstHeading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 23\n    }\n  }, content.title), content.description && __jsx(\"p\", {\n    className: \"documentDescription\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, content.description), content.image && __jsx(Image, {\n    className: \"document-image\",\n    src: content.image.scales.thumb.download,\n    floated: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }), content.text && __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: flattenHTMLToAppURL(content.text.data)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }));\n};\n/**\n * EventView view component class.\n * @function EventView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\n\n\n_c = EventTextfieldView;\n\nconst EventView = props => {\n  const {\n    content\n  } = props;\n  return __jsx(\"div\", {\n    id: \"page-document\",\n    className: \"ui container viewwrapper event-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Grid.Column, {\n    width: 7,\n    className: \"mobile hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, hasBlocksData(content) ? __jsx(RenderBlocks, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })) : __jsx(EventTextfieldView, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }))), __jsx(Grid.Column, {\n    width: 5,\n    className: \"mobile hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(EventDetails, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })), __jsx(Grid.Column, {\n    width: 12,\n    only: \"mobile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, hasBlocksData(content) ? __jsx(React.Fragment, null, __jsx(RenderBlocks, _extends({}, props, {\n    content: _objectSpread(_objectSpread({}, content), {}, {\n      blocks_layout: {\n        items: props.content.blocks_layout.items.slice(0, 1)\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  })), __jsx(EventDetails, {\n    content: content,\n    display_as: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }), __jsx(RenderBlocks, _extends({}, props, {\n    content: _objectSpread(_objectSpread({}, content), {}, {\n      blocks_layout: {\n        items: props.content.blocks_layout.items.slice(1)\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }))) : __jsx(EventTextfieldView, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })))));\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\n_c2 = EventView;\nEventView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string\n    }),\n    attendees: PropTypes.arrayOf(PropTypes.string).isRequired,\n    contact_email: PropTypes.string,\n    contact_name: PropTypes.string,\n    contact_phone: PropTypes.string,\n    end: PropTypes.string.isRequired,\n    event_url: PropTypes.string,\n    location: PropTypes.string,\n    open_end: PropTypes.bool,\n    recurrence: PropTypes.any,\n    start: PropTypes.string.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    whole_day: PropTypes.bool\n  }).isRequired\n};\nexport default EventView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EventTextfieldView\");\n$RefreshReg$(_c2, \"EventView\");","map":{"version":3,"names":["React","PropTypes","hasBlocksData","flattenHTMLToAppURL","Image","Grid","RenderBlocks","EventDetails","EventTextfieldView","content","title","description","image","scales","thumb","download","text","__html","data","EventView","props","blocks_layout","items","slice","propTypes","shape","string","attendees","arrayOf","isRequired","contact_email","contact_name","contact_phone","end","event_url","location","open_end","bool","recurrence","any","start","subjects","whole_day"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/EventView.jsx"],"sourcesContent":["/**\n * EventView view component.\n * @module components/theme/View/EventView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { hasBlocksData, flattenHTMLToAppURL } from '@plone/volto/helpers';\nimport { Image, Grid } from 'semantic-ui-react';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { EventDetails } from '@plone/volto/components';\n\nconst EventTextfieldView = ({ content }) => (\n  <React.Fragment>\n    {content.title && <h1 className=\"documentFirstHeading\">{content.title}</h1>}\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.image && (\n      <Image\n        className=\"document-image\"\n        src={content.image.scales.thumb.download}\n        floated=\"right\"\n      />\n    )}\n    {content.text && (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: flattenHTMLToAppURL(content.text.data),\n        }}\n      />\n    )}\n  </React.Fragment>\n);\n\n/**\n * EventView view component class.\n * @function EventView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst EventView = (props) => {\n  const { content } = props;\n\n  return (\n    <div id=\"page-document\" className=\"ui container viewwrapper event-view\">\n      <Grid>\n        <Grid.Column width={7} className=\"mobile hidden\">\n          {hasBlocksData(content) ? (\n            <RenderBlocks {...props} />\n          ) : (\n            <EventTextfieldView {...props} />\n          )}\n        </Grid.Column>\n        <Grid.Column width={5} className=\"mobile hidden\">\n          <EventDetails content={content} />\n        </Grid.Column>\n        <Grid.Column width={12} only=\"mobile\">\n          {hasBlocksData(content) ? (\n            <>\n              <RenderBlocks\n                {...props}\n                content={{\n                  ...content,\n                  blocks_layout: {\n                    items: props.content.blocks_layout.items.slice(0, 1),\n                  },\n                }}\n              />\n              <EventDetails content={content} display_as=\"div\" />\n              <RenderBlocks\n                {...props}\n                content={{\n                  ...content,\n                  blocks_layout: {\n                    items: props.content.blocks_layout.items.slice(1),\n                  },\n                }}\n              />\n            </>\n          ) : (\n            <EventTextfieldView {...props} />\n          )}\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEventView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string,\n    }),\n    attendees: PropTypes.arrayOf(PropTypes.string).isRequired,\n    contact_email: PropTypes.string,\n    contact_name: PropTypes.string,\n    contact_phone: PropTypes.string,\n    end: PropTypes.string.isRequired,\n    event_url: PropTypes.string,\n    location: PropTypes.string,\n    open_end: PropTypes.bool,\n    recurrence: PropTypes.any,\n    start: PropTypes.string.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    whole_day: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default EventView;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,EAAwBC,mBAAxB,QAAmD,sBAAnD;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AACA,SAASC,YAAT,QAA6B,yBAA7B;;AAEA,MAAMC,kBAAkB,GAAG;EAAA,IAAC;IAAEC;EAAF,CAAD;EAAA,OACzB,MAAC,KAAD,CAAO,QAAP;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGA,OAAO,CAACC,KAAR,IAAiB;IAAI,SAAS,EAAC,sBAAd;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAsCD,OAAO,CAACC,KAA9C,CADpB,EAEGD,OAAO,CAACE,WAAR,IACC;IAAG,SAAS,EAAC,qBAAb;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAoCF,OAAO,CAACE,WAA5C,CAHJ,EAKGF,OAAO,CAACG,KAAR,IACC,MAAC,KAAD;IACE,SAAS,EAAC,gBADZ;IAEE,GAAG,EAAEH,OAAO,CAACG,KAAR,CAAcC,MAAd,CAAqBC,KAArB,CAA2BC,QAFlC;IAGE,OAAO,EAAC,OAHV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EANJ,EAYGN,OAAO,CAACO,IAAR,IACC;IACE,uBAAuB,EAAE;MACvBC,MAAM,EAAEd,mBAAmB,CAACM,OAAO,CAACO,IAAR,CAAaE,IAAd;IADJ,CAD3B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAbJ,CADyB;AAAA,CAA3B;AAuBA;AACA;AACA;AACA;AACA;AACA;;;KA5BMV,kB;;AA6BN,MAAMW,SAAS,GAAIC,KAAD,IAAW;EAC3B,MAAM;IAAEX;EAAF,IAAcW,KAApB;EAEA,OACE;IAAK,EAAE,EAAC,eAAR;IAAwB,SAAS,EAAC,qCAAlC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,IAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,IAAD,CAAM,MAAN;IAAa,KAAK,EAAE,CAApB;IAAuB,SAAS,EAAC,eAAjC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGlB,aAAa,CAACO,OAAD,CAAb,GACC,MAAC,YAAD,eAAkBW,KAAlB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GADD,GAGC,MAAC,kBAAD,eAAwBA,KAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAJJ,CADF,EAQE,MAAC,IAAD,CAAM,MAAN;IAAa,KAAK,EAAE,CAApB;IAAuB,SAAS,EAAC,eAAjC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,YAAD;IAAc,OAAO,EAAEX,OAAvB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,CARF,EAWE,MAAC,IAAD,CAAM,MAAN;IAAa,KAAK,EAAE,EAApB;IAAwB,IAAI,EAAC,QAA7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGP,aAAa,CAACO,OAAD,CAAb,GACC,4BACE,MAAC,YAAD,eACMW,KADN;IAEE,OAAO,kCACFX,OADE;MAELY,aAAa,EAAE;QACbC,KAAK,EAAEF,KAAK,CAACX,OAAN,CAAcY,aAAd,CAA4BC,KAA5B,CAAkCC,KAAlC,CAAwC,CAAxC,EAA2C,CAA3C;MADM;IAFV,EAFT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GADF,EAUE,MAAC,YAAD;IAAc,OAAO,EAAEd,OAAvB;IAAgC,UAAU,EAAC,KAA3C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAVF,EAWE,MAAC,YAAD,eACMW,KADN;IAEE,OAAO,kCACFX,OADE;MAELY,aAAa,EAAE;QACbC,KAAK,EAAEF,KAAK,CAACX,OAAN,CAAcY,aAAd,CAA4BC,KAA5B,CAAkCC,KAAlC,CAAwC,CAAxC;MADM;IAFV,EAFT;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAXF,CADD,GAuBC,MAAC,kBAAD,eAAwBH,KAAxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAxBJ,CAXF,CADF,CADF;AA2CD,CA9CD;AAgDA;AACA;AACA;AACA;AACA;;;MApDMD,S;AAqDNA,SAAS,CAACK,SAAV,GAAsB;EACpBf,OAAO,EAAER,SAAS,CAACwB,KAAV,CAAgB;IACvBf,KAAK,EAAET,SAAS,CAACyB,MADM;IAEvBf,WAAW,EAAEV,SAAS,CAACyB,MAFA;IAGvBV,IAAI,EAAEf,SAAS,CAACwB,KAAV,CAAgB;MACpBP,IAAI,EAAEjB,SAAS,CAACyB;IADI,CAAhB,CAHiB;IAMvBC,SAAS,EAAE1B,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAACyB,MAA5B,EAAoCG,UANxB;IAOvBC,aAAa,EAAE7B,SAAS,CAACyB,MAPF;IAQvBK,YAAY,EAAE9B,SAAS,CAACyB,MARD;IASvBM,aAAa,EAAE/B,SAAS,CAACyB,MATF;IAUvBO,GAAG,EAAEhC,SAAS,CAACyB,MAAV,CAAiBG,UAVC;IAWvBK,SAAS,EAAEjC,SAAS,CAACyB,MAXE;IAYvBS,QAAQ,EAAElC,SAAS,CAACyB,MAZG;IAavBU,QAAQ,EAAEnC,SAAS,CAACoC,IAbG;IAcvBC,UAAU,EAAErC,SAAS,CAACsC,GAdC;IAevBC,KAAK,EAAEvC,SAAS,CAACyB,MAAV,CAAiBG,UAfD;IAgBvBY,QAAQ,EAAExC,SAAS,CAAC2B,OAAV,CAAkB3B,SAAS,CAACyB,MAA5B,EAAoCG,UAhBvB;IAiBvBa,SAAS,EAAEzC,SAAS,CAACoC;EAjBE,CAAhB,EAkBNR;AAnBiB,CAAtB;AAsBA,eAAeV,SAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}