{"ast":null,"code":"import _memoize from \"lodash/memoize\";\nimport _last from \"lodash/last\";\nimport { urlRegex, telRegex, mailRegex } from './urlRegex';\nimport prependHttp from 'prepend-http';\nimport config from '@plone/volto/registry';\n/**\n * Get base url.\n * @function getBaseUrl\n * @param {string} url Url to be parsed.\n * @return {string} Base url of content object.\n */\n\nexport const getBaseUrl = _memoize(url => {\n  const {\n    settings\n  } = config;\n  if (url === undefined) return; // We allow settings.nonContentRoutes to have strings (that are supposed to match\n  // ending strings of pathnames, so we are converting them to RegEx to match also\n\n  const normalized_nonContentRoutes = settings.nonContentRoutes.map(item => {\n    if (item.test) {\n      return item;\n    } else {\n      return new RegExp(item + '$');\n    }\n  });\n  let adjustedUrl = normalized_nonContentRoutes.reduce((acc, item) => acc.replace(item, ''), url);\n  adjustedUrl = adjustedUrl || '/';\n  return adjustedUrl === '/' ? '' : adjustedUrl;\n});\n/**\n * Get parent url.\n * @function getParentUrl\n * @param {string} url Url to be parsed.\n * @return {string} Parent url of content object.\n */\n\nexport const getParentUrl = _memoize(url => {\n  return url.substring(0, url.lastIndexOf('/'));\n});\n/**\n * Get id from url.\n * @function getId\n * @param {string} url Url to be parsed.\n * @return {string} Id of content object.\n */\n\nexport function getId(url) {\n  return _last(url.replace(/\\?.*$/, '').split('/'));\n}\n/**\n * Get view of an url.\n * @function getView\n * @param {string} url Url to be parsed.\n * @return {string} View of content object.\n */\n\nexport function getView(url) {\n  const view = _last(url.replace(/\\?.*$/, '').split('/'));\n\n  if (['add', 'layout', 'contents', 'edit', 'delete', 'diff', 'history', 'sharing', 'controlpanel'].indexOf(view) === -1) {\n    return 'view';\n  }\n\n  return view === 'layout' ? 'edit' : view;\n}\n/**\n * Flatten to app server URL - Given a URL if it starts with the API server URL\n * this method flattens it (removes) the server part\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenToAppURL\n * @param {string} url URL of the object\n * @returns {string} Flattened URL to the app server\n */\n\nexport function flattenToAppURL(url) {\n  const {\n    settings\n  } = config;\n  return url && url.replace(settings.internalApiPath, '').replace(settings.apiPath, '').replace(settings.publicURL, '');\n}\n/**\n * Given a URL it remove the querystring from the URL.\n * @method stripQuerystring\n * @param {string} url URL of the object\n * @returns {string} URL without querystring\n */\n\nexport function stripQuerystring(url) {\n  return url.replace(/\\?.*$/, '');\n}\n/**\n * Given a URL if it starts with the API server URL\n * this method removes the /api or the /Plone part.\n * @method toPublicURL\n * @param {string} url URL of the object\n * @returns {string} public URL\n */\n\nexport function toPublicURL(url) {\n  const {\n    settings\n  } = config;\n  return settings.publicURL.concat(flattenToAppURL(url));\n}\n/**\n * Returns true if the current view is a cms ui view\n * @method isCmsUi\n * @param {string} currentPathname pathname of the current view\n * @returns {boolean} true if the current view is a cms ui view\n */\n\nexport const isCmsUi = _memoize(currentPathname => {\n  const {\n    settings\n  } = config;\n  const fullPath = currentPathname.replace(/\\?.*$/, ''); // WARNING:\n  // not working properly for paths like /editors or similar\n  // because the regexp test does not take that into account\n  // https://github.com/plone/volto/issues/870\n\n  return settings.nonContentRoutes.reduce((acc, route) => acc || new RegExp(route).test(`/${fullPath}`), false);\n});\n/**\n * Flatten to app server HTML - Given a text if it contains some urls that starts\n * with the API server URL this method flattens it (removes) the server part.\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenHTMLToAppURL\n * @param {string} html Some html snippet\n * @returns {string} Same HTML with Flattened URLs to the app server\n */\n\nexport function flattenHTMLToAppURL(html) {\n  const {\n    settings\n  } = config;\n  return settings.internalApiPath ? html.replace(new RegExp(settings.internalApiPath, 'g'), '').replace(new RegExp(settings.apiPath, 'g'), '') : html.replace(new RegExp(settings.apiPath, 'g'), '');\n}\n/**\n * Add the app url\n * @method addAppURL\n * @param {string} url URL of the object\n * @returns {string} New URL with app\n */\n\nexport function addAppURL(url) {\n  const {\n    settings\n  } = config;\n  return url.indexOf(settings.apiPath) === 0 ? url : `${settings.apiPath}${url}`;\n}\n/**\n * Given a URL expands it to the backend URL\n * Useful when you have to actually call the backend from the\n * frontend code (eg. ICS calendar download)\n * It is seamless mode aware\n * @method expandToBackendURL\n * @param {string} url URL or path of the object\n * @returns {string} New URL with the backend URL\n */\n\nexport function expandToBackendURL(path) {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  let adjustedPath;\n\n  if (path.startsWith('http://') || path.startsWith('https://')) {\n    // flattenToAppURL first if we get a full URL\n    adjustedPath = flattenToAppURL(path);\n  } else {\n    // Next adds a / in front if not a full URL to make sure it's a valid relative path\n    adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  }\n\n  let apiPath = '';\n\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n/**\n * Check if internal url\n * @method isInternalURL\n * @param {string} url URL of the object\n * @returns {boolean} True if internal url\n */\n\nexport function isInternalURL(url) {\n  const {\n    settings\n  } = config;\n  return url && (url.indexOf(settings.publicURL) !== -1 || settings.internalApiPath && url.indexOf(settings.internalApiPath) !== -1 || url.indexOf(settings.apiPath) !== -1 || url.charAt(0) === '/' || url.charAt(0) === '.' || url.startsWith('#'));\n}\n/**\n * Check if it's a valid url\n * @method isUrl\n * @param {string} url URL of the object\n * @returns {boolean} True if is a valid url\n */\n\nexport function isUrl(url) {\n  return urlRegex().test(url);\n}\n/**\n * Normalize URL, adds protocol (if required eg. user has not entered the protocol)\n * @method normalizeUrl\n * @param {string} url URL of the object\n * @returns {boolean} URL with the protocol\n */\n\nexport function normalizeUrl(url) {\n  return prependHttp(url);\n}\n/**\n * Removes protocol from URL (for display)\n * @method removeProtocol\n * @param {string} url URL of the object\n * @returns {string} URL without the protocol part\n */\n\nexport function removeProtocol(url) {\n  return url.replace('https://', '').replace('http://', '');\n}\nexport function isMail(text) {\n  return mailRegex().test(text);\n}\nexport function isTelephone(text) {\n  return telRegex().test(text);\n}\nexport function normaliseMail(email) {\n  if (email.toLowerCase().startsWith('mailto:')) {\n    return email;\n  }\n\n  return `mailto:${email}`;\n}\nexport function normalizeTelephone(tel) {\n  if (tel.toLowerCase().startsWith('tel:')) {\n    return tel;\n  }\n\n  return `tel:${tel}`;\n}\nexport function checkAndNormalizeUrl(url) {\n  let res = {\n    isMail: false,\n    isTelephone: false,\n    url: url,\n    isValid: true\n  };\n\n  if (URLUtils.isMail(URLUtils.normaliseMail(url))) {\n    //Mail\n    res.isMail = true;\n    res.url = URLUtils.normaliseMail(url);\n  } else if (URLUtils.isTelephone(url)) {\n    //Phone\n    res.isTelephone = true;\n    res.url = URLUtils.normalizeTelephone(url);\n  } else {\n    //url\n    if (!res.url.startsWith('/') && !res.url.startsWith('#')) {\n      res.url = URLUtils.normalizeUrl(url);\n\n      if (!URLUtils.isUrl(res.url)) {\n        res.isValid = false;\n      }\n    }\n  }\n\n  return res;\n}\nexport const URLUtils = {\n  normalizeTelephone,\n  normaliseMail,\n  normalizeUrl,\n  isTelephone,\n  isMail,\n  isUrl,\n  checkAndNormalizeUrl\n};","map":{"version":3,"names":["urlRegex","telRegex","mailRegex","prependHttp","config","getBaseUrl","url","settings","undefined","normalized_nonContentRoutes","nonContentRoutes","map","item","test","RegExp","adjustedUrl","reduce","acc","replace","getParentUrl","substring","lastIndexOf","getId","split","getView","view","indexOf","flattenToAppURL","internalApiPath","apiPath","publicURL","stripQuerystring","toPublicURL","concat","isCmsUi","currentPathname","fullPath","route","flattenHTMLToAppURL","html","addAppURL","expandToBackendURL","path","APISUFIX","legacyTraverse","adjustedPath","startsWith","__SERVER__","isInternalURL","charAt","isUrl","normalizeUrl","removeProtocol","isMail","text","isTelephone","normaliseMail","email","toLowerCase","normalizeTelephone","tel","checkAndNormalizeUrl","res","isValid","URLUtils"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Url/Url.js"],"sourcesContent":["/**\n * Url helper.\n * @module helpers/Url\n */\n\nimport { last, memoize } from 'lodash';\nimport { urlRegex, telRegex, mailRegex } from './urlRegex';\nimport prependHttp from 'prepend-http';\nimport config from '@plone/volto/registry';\n\n/**\n * Get base url.\n * @function getBaseUrl\n * @param {string} url Url to be parsed.\n * @return {string} Base url of content object.\n */\nexport const getBaseUrl = memoize((url) => {\n  const { settings } = config;\n  if (url === undefined) return;\n\n  // We allow settings.nonContentRoutes to have strings (that are supposed to match\n  // ending strings of pathnames, so we are converting them to RegEx to match also\n  const normalized_nonContentRoutes = settings.nonContentRoutes.map((item) => {\n    if (item.test) {\n      return item;\n    } else {\n      return new RegExp(item + '$');\n    }\n  });\n\n  let adjustedUrl = normalized_nonContentRoutes.reduce(\n    (acc, item) => acc.replace(item, ''),\n    url,\n  );\n\n  adjustedUrl = adjustedUrl || '/';\n  return adjustedUrl === '/' ? '' : adjustedUrl;\n});\n\n/**\n * Get parent url.\n * @function getParentUrl\n * @param {string} url Url to be parsed.\n * @return {string} Parent url of content object.\n */\nexport const getParentUrl = memoize((url) => {\n  return url.substring(0, url.lastIndexOf('/'));\n});\n\n/**\n * Get id from url.\n * @function getId\n * @param {string} url Url to be parsed.\n * @return {string} Id of content object.\n */\nexport function getId(url) {\n  return last(url.replace(/\\?.*$/, '').split('/'));\n}\n\n/**\n * Get view of an url.\n * @function getView\n * @param {string} url Url to be parsed.\n * @return {string} View of content object.\n */\nexport function getView(url) {\n  const view = last(url.replace(/\\?.*$/, '').split('/'));\n  if (\n    [\n      'add',\n      'layout',\n      'contents',\n      'edit',\n      'delete',\n      'diff',\n      'history',\n      'sharing',\n      'controlpanel',\n    ].indexOf(view) === -1\n  ) {\n    return 'view';\n  }\n  return view === 'layout' ? 'edit' : view;\n}\n\n/**\n * Flatten to app server URL - Given a URL if it starts with the API server URL\n * this method flattens it (removes) the server part\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenToAppURL\n * @param {string} url URL of the object\n * @returns {string} Flattened URL to the app server\n */\nexport function flattenToAppURL(url) {\n  const { settings } = config;\n  return (\n    url &&\n    url\n      .replace(settings.internalApiPath, '')\n      .replace(settings.apiPath, '')\n      .replace(settings.publicURL, '')\n  );\n}\n/**\n * Given a URL it remove the querystring from the URL.\n * @method stripQuerystring\n * @param {string} url URL of the object\n * @returns {string} URL without querystring\n */\nexport function stripQuerystring(url) {\n  return url.replace(/\\?.*$/, '');\n}\n\n/**\n * Given a URL if it starts with the API server URL\n * this method removes the /api or the /Plone part.\n * @method toPublicURL\n * @param {string} url URL of the object\n * @returns {string} public URL\n */\nexport function toPublicURL(url) {\n  const { settings } = config;\n  return settings.publicURL.concat(flattenToAppURL(url));\n}\n\n/**\n * Returns true if the current view is a cms ui view\n * @method isCmsUi\n * @param {string} currentPathname pathname of the current view\n * @returns {boolean} true if the current view is a cms ui view\n */\nexport const isCmsUi = memoize((currentPathname) => {\n  const { settings } = config;\n  const fullPath = currentPathname.replace(/\\?.*$/, '');\n  // WARNING:\n  // not working properly for paths like /editors or similar\n  // because the regexp test does not take that into account\n  // https://github.com/plone/volto/issues/870\n  return settings.nonContentRoutes.reduce(\n    (acc, route) => acc || new RegExp(route).test(`/${fullPath}`),\n    false,\n  );\n});\n\n/**\n * Flatten to app server HTML - Given a text if it contains some urls that starts\n * with the API server URL this method flattens it (removes) the server part.\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenHTMLToAppURL\n * @param {string} html Some html snippet\n * @returns {string} Same HTML with Flattened URLs to the app server\n */\nexport function flattenHTMLToAppURL(html) {\n  const { settings } = config;\n  return settings.internalApiPath\n    ? html\n        .replace(new RegExp(settings.internalApiPath, 'g'), '')\n        .replace(new RegExp(settings.apiPath, 'g'), '')\n    : html.replace(new RegExp(settings.apiPath, 'g'), '');\n}\n\n/**\n * Add the app url\n * @method addAppURL\n * @param {string} url URL of the object\n * @returns {string} New URL with app\n */\nexport function addAppURL(url) {\n  const { settings } = config;\n  return url.indexOf(settings.apiPath) === 0\n    ? url\n    : `${settings.apiPath}${url}`;\n}\n\n/**\n * Given a URL expands it to the backend URL\n * Useful when you have to actually call the backend from the\n * frontend code (eg. ICS calendar download)\n * It is seamless mode aware\n * @method expandToBackendURL\n * @param {string} url URL or path of the object\n * @returns {string} New URL with the backend URL\n */\nexport function expandToBackendURL(path) {\n  const { settings } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  let adjustedPath;\n  if (path.startsWith('http://') || path.startsWith('https://')) {\n    // flattenToAppURL first if we get a full URL\n    adjustedPath = flattenToAppURL(path);\n  } else {\n    // Next adds a / in front if not a full URL to make sure it's a valid relative path\n    adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  }\n\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Check if internal url\n * @method isInternalURL\n * @param {string} url URL of the object\n * @returns {boolean} True if internal url\n */\nexport function isInternalURL(url) {\n  const { settings } = config;\n  return (\n    url &&\n    (url.indexOf(settings.publicURL) !== -1 ||\n      (settings.internalApiPath &&\n        url.indexOf(settings.internalApiPath) !== -1) ||\n      url.indexOf(settings.apiPath) !== -1 ||\n      url.charAt(0) === '/' ||\n      url.charAt(0) === '.' ||\n      url.startsWith('#'))\n  );\n}\n\n/**\n * Check if it's a valid url\n * @method isUrl\n * @param {string} url URL of the object\n * @returns {boolean} True if is a valid url\n */\nexport function isUrl(url) {\n  return urlRegex().test(url);\n}\n\n/**\n * Normalize URL, adds protocol (if required eg. user has not entered the protocol)\n * @method normalizeUrl\n * @param {string} url URL of the object\n * @returns {boolean} URL with the protocol\n */\nexport function normalizeUrl(url) {\n  return prependHttp(url);\n}\n\n/**\n * Removes protocol from URL (for display)\n * @method removeProtocol\n * @param {string} url URL of the object\n * @returns {string} URL without the protocol part\n */\nexport function removeProtocol(url) {\n  return url.replace('https://', '').replace('http://', '');\n}\n\nexport function isMail(text) {\n  return mailRegex().test(text);\n}\n\nexport function isTelephone(text) {\n  return telRegex().test(text);\n}\n\nexport function normaliseMail(email) {\n  if (email.toLowerCase().startsWith('mailto:')) {\n    return email;\n  }\n  return `mailto:${email}`;\n}\n\nexport function normalizeTelephone(tel) {\n  if (tel.toLowerCase().startsWith('tel:')) {\n    return tel;\n  }\n  return `tel:${tel}`;\n}\n\nexport function checkAndNormalizeUrl(url) {\n  let res = {\n    isMail: false,\n    isTelephone: false,\n    url: url,\n    isValid: true,\n  };\n  if (URLUtils.isMail(URLUtils.normaliseMail(url))) {\n    //Mail\n    res.isMail = true;\n    res.url = URLUtils.normaliseMail(url);\n  } else if (URLUtils.isTelephone(url)) {\n    //Phone\n    res.isTelephone = true;\n    res.url = URLUtils.normalizeTelephone(url);\n  } else {\n    //url\n    if (!res.url.startsWith('/') && !res.url.startsWith('#')) {\n      res.url = URLUtils.normalizeUrl(url);\n      if (!URLUtils.isUrl(res.url)) {\n        res.isValid = false;\n      }\n    }\n  }\n  return res;\n}\n\nexport const URLUtils = {\n  normalizeTelephone,\n  normaliseMail,\n  normalizeUrl,\n  isTelephone,\n  isMail,\n  isUrl,\n  checkAndNormalizeUrl,\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}