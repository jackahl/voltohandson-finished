{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { BlockDataForm, SidebarPortal, BlockChooserButton } from '@plone/volto/components';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { createImageBlock, parseDefaultSelection, deconstructToVoltoBlocks } from '@plone/volto-slate/utils';\nimport { Transforms } from 'slate';\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport './css/editor.css'; // TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nconst DEBUG = false;\nexport const DefaultTextBlockEditor = props => {\n  var _data$instructions, _data$plaintext;\n\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription\n  } = props;\n  const {\n    slate\n  } = config.settings;\n  const {\n    textblockExtensions\n  } = slate;\n  const {\n    value\n  } = data; // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n  const prevReq = React.useRef(null);\n  const withBlockProperties = React.useCallback(editor => {\n    editor.getBlockProps = () => props;\n\n    return editor;\n  }, [props]);\n  const slateSettings = React.useMemo(() => _objectSpread(_objectSpread({}, config.settings.slate), {}, {\n    persistentHelpers: [...config.settings.slate.persistentHelpers, PersistentSlashMenu]\n  }), []);\n  const onDrop = React.useCallback(files => {\n    // TODO: need to fix setUploading, treat uploading indicator\n    // inteligently, show progress report on uploading files\n    setUploading(true);\n    files.forEach(file => {\n      const [mime] = file.type.split('/');\n      if (mime !== 'image') return;\n      readAsDataURL(file).then(data => {\n        const fields = data.match(/^data:(.*);(.*),(.*)$/);\n        uploadContent(getBaseUrl(pathname), {\n          '@type': 'Image',\n          title: file.name,\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name\n          }\n        }, block);\n      });\n    });\n    setShowDropzone(false);\n  }, [pathname, uploadContent, block]);\n  const {\n    loaded,\n    loading\n  } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n      createImageBlock(url, index, props);\n    }\n\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index]);\n  const handleUpdate = React.useCallback(editor => {\n    // defaultSelection is used for things such as \"restoring\" the selection\n    // when joining blocks or moving the selection to block start on block\n    // split\n    if (defaultSelection) {\n      const selection = parseDefaultSelection(editor, defaultSelection);\n\n      if (selection) {\n        Transforms.select(editor, selection);\n        saveSlateBlockSelection(block, null);\n      }\n    }\n  }, [defaultSelection, block, saveSlateBlockSelection]);\n\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value,\n        plaintext: serializeNodesToText(value || []) // TODO: also add html serialized value\n\n      }));\n      deconstructToVoltoBlocks(editor);\n    });\n  }; // Get editing instructions from block settings or props\n\n\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const intl = useIntl();\n  const placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n  const disableNewBlocks = (data === null || data === void 0 ? void 0 : data.disableNewBlocks) || detached;\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px'\n  });\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Dropzone, {\n    disableClick: true,\n    onDrop: onDrop,\n    className: \"dropzone\",\n    onDragOver: () => setShowDropzone(true),\n    onDragLeave: () => setShowDropzone(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => {\n    return showDropzone ? __jsx(\"div\", {\n      className: \"drop-indicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, uploading ? __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 19\n      }\n    }, __jsx(Loader, {\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, \"Uploading image\")) : __jsx(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: imageBlockSVG,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 23\n      }\n    })))) : __jsx(React.Fragment, null, __jsx(SlateEditor, {\n      index: index,\n      readOnly: !inView,\n      properties: properties,\n      extensions: textblockExtensions,\n      renderExtensions: [withBlockProperties],\n      value: value,\n      block: block\n      /* is this needed? */\n      ,\n      defaultSelection: defaultSelection,\n      onUpdate: handleUpdate,\n      debug: DEBUG,\n      onFocus: handleFocus,\n      onChange: (value, editor) => onEditorChange(value, editor),\n      onKeyDown: handleKey,\n      selected: selected,\n      placeholder: placeholder,\n      slateSettings: slateSettings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }), DEBUG ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 26\n      }\n    }, block) : '');\n  }), selected && !((_data$plaintext = data.plaintext) !== null && _data$plaintext !== void 0 && _data$plaintext.trim()) && !disableNewBlocks && __jsx(BlockChooserButton, {\n    data: data,\n    block: block,\n    onInsertBlock: (id, value) => {\n      onSelectBlock(onInsertBlock(id, value));\n    },\n    onMutateBlock: onMutateBlock,\n    allowedBlocks: allowedBlocks,\n    blocksConfig: blocksConfig,\n    size: \"24px\",\n    className: \"block-add-button\",\n    properties: properties,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    id: \"slate-plugin-sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }), instructions ? __jsx(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(ShortcutListing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 15\n    }\n  }), __jsx(MarkdownIntroduction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }), __jsx(BlockDataForm, {\n    block: block,\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 15\n    }\n  })))));\n};\nexport default DefaultTextBlockEditor;","map":{"version":3,"names":["ReactDOM","React","readAsDataURL","Dropzone","defineMessages","useIntl","useInView","Dimmer","Loader","Message","Segment","flattenToAppURL","getBaseUrl","config","BlockDataForm","SidebarPortal","BlockChooserButton","SlateEditor","serializeNodesToText","createImageBlock","parseDefaultSelection","deconstructToVoltoBlocks","Transforms","PersistentSlashMenu","ShortcutListing","MarkdownIntroduction","handleKey","TextBlockSchema","imageBlockSVG","messages","text","DEBUG","DefaultTextBlockEditor","props","block","blocksConfig","data","detached","index","onChangeBlock","onInsertBlock","onMutateBlock","onSelectBlock","pathname","properties","selected","uploadRequest","uploadContent","uploadedContent","defaultSelection","saveSlateBlockSelection","allowedBlocks","formTitle","formDescription","slate","settings","textblockExtensions","value","showDropzone","setShowDropzone","useState","uploading","setUploading","newImageId","setNewImageId","prevReq","useRef","withBlockProperties","useCallback","editor","getBlockProps","slateSettings","useMemo","persistentHelpers","onDrop","files","forEach","file","mime","type","split","then","fields","match","title","name","image","encoding","filename","loaded","loading","imageId","prevLoaded","current","useEffect","url","handleUpdate","selection","select","onEditorChange","unstable_batchedUpdates","plaintext","instructions","intl","placeholder","formatMessage","schema","disableNewBlocks","ref","inView","threshold","rootMargin","handleFocus","getRootProps","getInputProps","trim","id","__html"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\n\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport {\n  BlockDataForm,\n  SidebarPortal,\n  BlockChooserButton,\n} from '@plone/volto/components';\n\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport {\n  createImageBlock,\n  parseDefaultSelection,\n  deconstructToVoltoBlocks,\n} from '@plone/volto-slate/utils';\nimport { Transforms } from 'slate';\n\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\n\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nconst DEBUG = false;\n\nexport const DefaultTextBlockEditor = (props) => {\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription,\n  } = props;\n\n  const { slate } = config.settings;\n  const { textblockExtensions } = slate;\n  const { value } = data;\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n\n  const prevReq = React.useRef(null);\n\n  const withBlockProperties = React.useCallback(\n    (editor) => {\n      editor.getBlockProps = () => props;\n      return editor;\n    },\n    [props],\n  );\n\n  const slateSettings = React.useMemo(\n    () => ({\n      ...config.settings.slate,\n      persistentHelpers: [\n        ...config.settings.slate.persistentHelpers,\n        PersistentSlashMenu,\n      ],\n    }),\n    [],\n  );\n\n  const onDrop = React.useCallback(\n    (files) => {\n      // TODO: need to fix setUploading, treat uploading indicator\n      // inteligently, show progress report on uploading files\n      setUploading(true);\n      files.forEach((file) => {\n        const [mime] = file.type.split('/');\n        if (mime !== 'image') return;\n\n        readAsDataURL(file).then((data) => {\n          const fields = data.match(/^data:(.*);(.*),(.*)$/);\n          uploadContent(\n            getBaseUrl(pathname),\n            {\n              '@type': 'Image',\n              title: file.name,\n              image: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            },\n            block,\n          );\n        });\n      });\n      setShowDropzone(false);\n    },\n    [pathname, uploadContent, block],\n  );\n\n  const { loaded, loading } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n\n      createImageBlock(url, index, props);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index]);\n\n  const handleUpdate = React.useCallback(\n    (editor) => {\n      // defaultSelection is used for things such as \"restoring\" the selection\n      // when joining blocks or moving the selection to block start on block\n      // split\n      if (defaultSelection) {\n        const selection = parseDefaultSelection(editor, defaultSelection);\n        if (selection) {\n          Transforms.select(editor, selection);\n          saveSlateBlockSelection(block, null);\n        }\n      }\n    },\n    [defaultSelection, block, saveSlateBlockSelection],\n  );\n\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, {\n        ...data,\n        value,\n        plaintext: serializeNodesToText(value || []),\n        // TODO: also add html serialized value\n      });\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const intl = useIntl();\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n\n  const disableNewBlocks = data?.disableNewBlocks || detached;\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n\n  return (\n    <div className=\"text-slate-editor-inner\" ref={ref}>\n      <>\n        <Dropzone\n          disableClick\n          onDrop={onDrop}\n          className=\"dropzone\"\n          onDragOver={() => setShowDropzone(true)}\n          onDragLeave={() => setShowDropzone(false)}\n        >\n          {({ getRootProps, getInputProps }) => {\n            return showDropzone ? (\n              <div className=\"drop-indicator\">\n                {uploading ? (\n                  <Dimmer active>\n                    <Loader indeterminate>Uploading image</Loader>\n                  </Dimmer>\n                ) : (\n                  <Message>\n                    <center>\n                      <img src={imageBlockSVG} alt=\"\" />\n                    </center>\n                  </Message>\n                )}\n              </div>\n            ) : (\n              <>\n                <SlateEditor\n                  index={index}\n                  readOnly={!inView}\n                  properties={properties}\n                  extensions={textblockExtensions}\n                  renderExtensions={[withBlockProperties]}\n                  value={value}\n                  block={block /* is this needed? */}\n                  defaultSelection={defaultSelection}\n                  onUpdate={handleUpdate}\n                  debug={DEBUG}\n                  onFocus={handleFocus}\n                  onChange={(value, editor) => onEditorChange(value, editor)}\n                  onKeyDown={handleKey}\n                  selected={selected}\n                  placeholder={placeholder}\n                  slateSettings={slateSettings}\n                />\n                {DEBUG ? <div>{block}</div> : ''}\n              </>\n            );\n          }}\n        </Dropzone>\n\n        {selected && !data.plaintext?.trim() && !disableNewBlocks && (\n          <BlockChooserButton\n            data={data}\n            block={block}\n            onInsertBlock={(id, value) => {\n              onSelectBlock(onInsertBlock(id, value));\n            }}\n            onMutateBlock={onMutateBlock}\n            allowedBlocks={allowedBlocks}\n            blocksConfig={blocksConfig}\n            size=\"24px\"\n            className=\"block-add-button\"\n            properties={properties}\n          />\n        )}\n\n        <SidebarPortal selected={selected}>\n          <div id=\"slate-plugin-sidebar\"></div>\n          {instructions ? (\n            <Segment attached>\n              <div dangerouslySetInnerHTML={{ __html: instructions }} />\n            </Segment>\n          ) : (\n            <>\n              <ShortcutListing />\n              <MarkdownIntroduction />\n              <BlockDataForm\n                block={block}\n                schema={schema}\n                title={schema.title}\n                onChangeField={(id, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    [id]: value,\n                  });\n                }}\n                formData={data}\n              />\n            </>\n          )}\n        </SidebarPortal>\n      </>\n    </div>\n  );\n};\n\nexport default DefaultTextBlockEditor;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module"}