{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n * Users actions.\n * @module actions/users/users\n */\nimport { stringify } from 'query-string';\nimport { CREATE_USER, DELETE_USER, GET_USER, INITIAL_PASSWORD, LIST_USERS, RESET_PASSWORD, UPDATE_PASSWORD, UPDATE_USER } from '@plone/volto/constants/ActionTypes';\n/**\n * Create user function.\n * @function createUser\n * @param {Object|Array} content User data.\n * @returns {Object} Create user action.\n */\n\nexport function createUser(content) {\n  let sendPasswordReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: CREATE_USER,\n    request: {\n      op: 'post',\n      path: '/@users',\n      data: sendPasswordReset ? _objectSpread(_objectSpread({}, content), {}, {\n        sendPasswordReset\n      }) : content\n    }\n  };\n}\n/**\n * Delete user function.\n * @function deleteUser\n * @param {string} id User id\n * @returns {Object} Delete user action.\n */\n\nexport function deleteUser(id) {\n  return {\n    type: DELETE_USER,\n    request: {\n      op: 'del',\n      path: `/@users/${id}`\n    }\n  };\n}\n/**\n * Get user function\n * @function getUser\n * @param {string} id User id\n * @returns {Object} Get user action\n */\n\nexport function getUser(id) {\n  return {\n    type: GET_USER,\n    request: {\n      op: 'get',\n      path: `/@users/${id}`\n    }\n  };\n}\n/**\n * List users function\n * 'query' and 'search' are mutually exclusive parameters. 'search' wins.\n * Query either for username or search for username, fullname, email.\n * @function listUsers\n * @param {string} query for username\n * @param {string} search for  username, fullname, email.\n * @param {list} groups_filter restrict to group membership\n * @param {int} limit\n * @returns {Object} List users action\n */\n\nexport function listUsers() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    query = '',\n    search = '',\n    groups_filter = [],\n    limit = null\n  } = options;\n  let path = '/@users';\n  var searchParams = new URLSearchParams();\n\n  if (query) {\n    searchParams.append('query', query);\n  }\n\n  if (search) {\n    searchParams.append('search', search);\n  }\n\n  limit && searchParams.append('limit', limit);\n  const searchParamsToString = searchParams.toString();\n  let filterarg = groups_filter.length > 0 ? stringify({\n    'groups-filter': groups_filter\n  }, {\n    arrayFormat: 'colon-list-separator'\n  }) : '';\n\n  if (searchParamsToString) {\n    path += `?${searchParamsToString}`;\n  }\n\n  if (filterarg) {\n    path += searchParamsToString ? '&' : '?';\n    path += filterarg;\n  }\n\n  return {\n    type: LIST_USERS,\n    request: {\n      op: 'get',\n      path: path\n    }\n  };\n}\n/**\n * Update user function\n * @function updateUser\n * @param {string} id User id\n * @param {Object} user User data.\n * @returns {Object} Update user action.\n */\n\nexport function updateUser(id, user) {\n  return {\n    type: UPDATE_USER,\n    request: {\n      op: 'patch',\n      path: `/@users/${id}`,\n      data: user\n    }\n  };\n}\n/**\n * Update password function\n * @function updatePassword\n * @param {string} id User id\n * @param {string} oldPassword Old password.\n * @param {string} newPassword New password.\n * @returns {Object} Update password action.\n */\n\nexport function updatePassword(id, oldPassword, newPassword) {\n  return {\n    type: UPDATE_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        old_password: oldPassword,\n        new_password: newPassword\n      }\n    }\n  };\n}\n/**\n * Set initial password function\n * @function setInitialPassword\n * @param {string} id User id\n * @param {string} token One time user token.\n * @param {string} newPassword New password.\n * @returns {Object} Set initial password action.\n */\n\nexport function setInitialPassword(id, token, newPassword) {\n  return {\n    type: INITIAL_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        reset_token: token,\n        new_password: newPassword\n      }\n    }\n  };\n}\n/**\n * Reset password function\n * @function resetPassword\n * @param {string} id User id\n * @returns {Object} Reset password action.\n */\n\nexport function resetPassword(id) {\n  return {\n    type: RESET_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`\n    }\n  };\n}","map":{"version":3,"names":["stringify","CREATE_USER","DELETE_USER","GET_USER","INITIAL_PASSWORD","LIST_USERS","RESET_PASSWORD","UPDATE_PASSWORD","UPDATE_USER","createUser","content","sendPasswordReset","type","request","op","path","data","deleteUser","id","getUser","listUsers","options","query","search","groups_filter","limit","searchParams","URLSearchParams","append","searchParamsToString","toString","filterarg","length","arrayFormat","updateUser","user","updatePassword","oldPassword","newPassword","old_password","new_password","setInitialPassword","token","reset_token","resetPassword"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/actions/users/users.js"],"sourcesContent":["/**\n * Users actions.\n * @module actions/users/users\n */\n\nimport { stringify } from 'query-string';\n\nimport {\n  CREATE_USER,\n  DELETE_USER,\n  GET_USER,\n  INITIAL_PASSWORD,\n  LIST_USERS,\n  RESET_PASSWORD,\n  UPDATE_PASSWORD,\n  UPDATE_USER,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create user function.\n * @function createUser\n * @param {Object|Array} content User data.\n * @returns {Object} Create user action.\n */\nexport function createUser(content, sendPasswordReset = null) {\n  return {\n    type: CREATE_USER,\n    request: {\n      op: 'post',\n      path: '/@users',\n      data: sendPasswordReset ? { ...content, sendPasswordReset } : content,\n    },\n  };\n}\n\n/**\n * Delete user function.\n * @function deleteUser\n * @param {string} id User id\n * @returns {Object} Delete user action.\n */\nexport function deleteUser(id) {\n  return {\n    type: DELETE_USER,\n    request: {\n      op: 'del',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * Get user function\n * @function getUser\n * @param {string} id User id\n * @returns {Object} Get user action\n */\nexport function getUser(id) {\n  return {\n    type: GET_USER,\n    request: {\n      op: 'get',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * List users function\n * 'query' and 'search' are mutually exclusive parameters. 'search' wins.\n * Query either for username or search for username, fullname, email.\n * @function listUsers\n * @param {string} query for username\n * @param {string} search for  username, fullname, email.\n * @param {list} groups_filter restrict to group membership\n * @param {int} limit\n * @returns {Object} List users action\n */\nexport function listUsers(options = {}) {\n  const { query = '', search = '', groups_filter = [], limit = null } = options;\n  let path = '/@users';\n\n  var searchParams = new URLSearchParams();\n  if (query) {\n    searchParams.append('query', query);\n  }\n  if (search) {\n    searchParams.append('search', search);\n  }\n  limit && searchParams.append('limit', limit);\n  const searchParamsToString = searchParams.toString();\n\n  let filterarg =\n    groups_filter.length > 0\n      ? stringify(\n          { 'groups-filter': groups_filter },\n          { arrayFormat: 'colon-list-separator' },\n        )\n      : '';\n\n  if (searchParamsToString) {\n    path += `?${searchParamsToString}`;\n  }\n  if (filterarg) {\n    path += searchParamsToString ? '&' : '?';\n    path += filterarg;\n  }\n  return {\n    type: LIST_USERS,\n    request: {\n      op: 'get',\n      path: path,\n    },\n  };\n}\n\n/**\n * Update user function\n * @function updateUser\n * @param {string} id User id\n * @param {Object} user User data.\n * @returns {Object} Update user action.\n */\nexport function updateUser(id, user) {\n  return {\n    type: UPDATE_USER,\n    request: { op: 'patch', path: `/@users/${id}`, data: user },\n  };\n}\n\n/**\n * Update password function\n * @function updatePassword\n * @param {string} id User id\n * @param {string} oldPassword Old password.\n * @param {string} newPassword New password.\n * @returns {Object} Update password action.\n */\nexport function updatePassword(id, oldPassword, newPassword) {\n  return {\n    type: UPDATE_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        old_password: oldPassword,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Set initial password function\n * @function setInitialPassword\n * @param {string} id User id\n * @param {string} token One time user token.\n * @param {string} newPassword New password.\n * @returns {Object} Set initial password action.\n */\nexport function setInitialPassword(id, token, newPassword) {\n  return {\n    type: INITIAL_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        reset_token: token,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Reset password function\n * @function resetPassword\n * @param {string} id User id\n * @returns {Object} Reset password action.\n */\nexport function resetPassword(id) {\n  return {\n    type: RESET_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}