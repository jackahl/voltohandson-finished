{"ast":null,"code":"import _objectWithoutProperties from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst _excluded = [\"block\", \"schema\", \"value\", \"onChange\", \"errors\", \"id\"];\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/ObjectWidget.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * A generic widget for an object. If multiple\n *\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\nimport Field from '@plone/volto/components/manage/Form/Field';\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\n\nconst FieldSet = _ref => {\n  let {\n    block,\n    data,\n    index,\n    schema,\n    value,\n    errors,\n    onChange,\n    onChangeBlock,\n    id\n  } = _ref;\n  return data.fields.map((field, idx) => {\n    var _schema$required;\n\n    const v = (value === null || value === void 0 ? void 0 : value[field]) || schema.properties[field].defaultValue;\n    return __jsx(Field, _extends({}, schema.properties[field], {\n      id: `${field}-${idx}-${id}`,\n      fieldSet: data.title.toLowerCase(),\n      block: block,\n      value: v,\n      objectvalue: value,\n      required: ((_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.indexOf(field)) !== -1,\n      onChange: (field2, fieldvalue) => {\n        return onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n          [field]: fieldvalue\n        }));\n      },\n      key: field,\n      error: errors === null || errors === void 0 ? void 0 : errors[field],\n      title: schema.properties[field].title,\n      onChangeBlock: onChangeBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }));\n  });\n};\n/**\n *\n * A JSON data editor widget based on a schema. If you want to represent complex\n * data using a single field, this is the widget to use.\n *\n * If there are multiple field sets, it renders a Tab component with multiple\n * tab panes. Each tab has the title of the fieldset it renders.\n */\n\n\n_c = FieldSet;\n\nconst ObjectWidget = _ref2 => {\n  _s();\n\n  let {\n    block,\n    schema,\n    value,\n    // not checked to not contain unknown fields\n    onChange,\n    errors = {},\n    id\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  const createTab = React.useCallback((fieldset, index) => {\n    return {\n      menuItem: fieldset.title,\n      render: () => __jsx(Tab.Pane, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, __jsx(FieldSet, {\n        block: block,\n        data: fieldset,\n        index: index,\n        schema: schema,\n        errors: errors,\n        value: value,\n        onChange: onChange,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }))\n    };\n  }, [block, errors, id, onChange, schema, value]);\n  return schema.fieldsets.length === 1 ? __jsx(React.Fragment, null, __jsx(FieldSet, {\n    block: block,\n    data: schema.fieldsets[0],\n    index: 0,\n    schema: schema,\n    errors: errors,\n    value: value,\n    onChange: onChange,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  })) : __jsx(Tab, {\n    panes: schema.fieldsets.map(createTab),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }) // lazy loading\n  ;\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\n_s(ObjectWidget, \"YwBXciesr8LRaG9DbTEpezhG9yo=\");\n\n_c2 = ObjectWidget;\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired\n};\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n\nObjectWidget.defaultProps = {\n  value: null\n};\nexport default ObjectWidget;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FieldSet\");\n$RefreshReg$(_c2, \"ObjectWidget\");","map":{"version":3,"names":["React","PropTypes","Tab","Field","FieldSet","block","data","index","schema","value","errors","onChange","onChangeBlock","id","fields","map","field","idx","v","properties","defaultValue","title","toLowerCase","required","indexOf","field2","fieldvalue","ObjectWidget","props","createTab","useCallback","fieldset","menuItem","render","fieldsets","length","propTypes","string","isRequired","object","func","defaultProps"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/ObjectWidget.jsx"],"sourcesContent":["/**\n * A generic widget for an object. If multiple\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\n\nimport Field from '@plone/volto/components/manage/Form/Field';\n\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\nconst FieldSet = ({\n  block,\n  data,\n  index,\n  schema,\n  value,\n  errors,\n  onChange,\n  onChangeBlock,\n  id,\n}) => {\n  return data.fields.map((field, idx) => {\n    const v = value?.[field] || schema.properties[field].defaultValue;\n    return (\n      <Field\n        {...schema.properties[field]}\n        id={`${field}-${idx}-${id}`}\n        fieldSet={data.title.toLowerCase()}\n        block={block}\n        value={v}\n        objectvalue={value}\n        required={schema.required?.indexOf(field) !== -1}\n        onChange={(field2, fieldvalue) => {\n          return onChange(id, { ...value, [field]: fieldvalue });\n        }}\n        key={field}\n        error={errors?.[field]}\n        title={schema.properties[field].title}\n        onChangeBlock={onChangeBlock}\n      />\n    );\n  });\n};\n\n/**\n *\n * A JSON data editor widget based on a schema. If you want to represent complex\n * data using a single field, this is the widget to use.\n *\n * If there are multiple field sets, it renders a Tab component with multiple\n * tab panes. Each tab has the title of the fieldset it renders.\n */\nconst ObjectWidget = ({\n  block,\n  schema,\n  value, // not checked to not contain unknown fields\n  onChange,\n  errors = {},\n  id,\n  ...props\n}) => {\n  const createTab = React.useCallback(\n    (fieldset, index) => {\n      return {\n        menuItem: fieldset.title,\n        render: () => (\n          <Tab.Pane>\n            <FieldSet\n              block={block}\n              data={fieldset}\n              index={index}\n              schema={schema}\n              errors={errors}\n              value={value}\n              onChange={onChange}\n              id={id}\n            />\n          </Tab.Pane>\n        ),\n      };\n    },\n    [block, errors, id, onChange, schema, value],\n  );\n\n  return schema.fieldsets.length === 1 ? (\n    <>\n      <FieldSet\n        block={block}\n        data={schema.fieldsets[0]}\n        index={0}\n        schema={schema}\n        errors={errors}\n        value={value}\n        onChange={onChange}\n        id={id}\n      />\n    </>\n  ) : (\n    <Tab panes={schema.fieldsets.map(createTab)} /> // lazy loading\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectWidget.defaultProps = {\n  value: null,\n};\n\nexport default ObjectWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}