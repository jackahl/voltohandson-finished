{"ast":null,"code":"import _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  changePassword: {\n    \"id\": \"Change Password\",\n    \"defaultMessage\": \"Change Password\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  oldPasswordTitle: {\n    \"id\": \"Current password\",\n    \"defaultMessage\": \"Current password\"\n  },\n  oldPasswordDescription: {\n    \"id\": \"Enter your current password.\",\n    \"defaultMessage\": \"Enter your current password.\"\n  },\n  newPasswordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  newPasswordDescription: {\n    \"id\": \"Enter your new password. Minimum 5 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 5 characters.\"\n  },\n  newPasswordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  newPasswordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\n\nclass ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      isClient: false\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(this.props.userId, data.oldPassword, data.newPassword);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.saved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    this.props.history.goBack();\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return __jsx(Container, {\n      id: \"page-change-password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.changePassword),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), __jsx(Form, {\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n        }],\n        properties: {\n          oldPassword: {\n            description: this.props.intl.formatMessage(messages.oldPasswordDescription),\n            title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n            type: 'string',\n            widget: 'password'\n          },\n          newPassword: {\n            description: this.props.intl.formatMessage(messages.newPasswordDescription),\n            title: this.props.intl.formatMessage(messages.newPasswordTitle),\n            type: 'string',\n            widget: 'password'\n          },\n          newPasswordRepeat: {\n            description: this.props.intl.formatMessage(messages.newPasswordRepeatDescription),\n            title: this.props.intl.formatMessage(messages.newPasswordRepeatTitle),\n            type: 'string',\n            widget: 'password'\n          }\n        },\n        required: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n      },\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(ChangePassword, \"propTypes\", {\n  userId: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  updatePassword: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired\n});\n\nexport default compose(withRouter, injectIntl, connect((state, props) => ({\n  userId: state.userSession.token ? jwtDecode(state.userSession.token).sub : '',\n  loading: state.users.update_password.loading,\n  pathname: props.location.pathname\n}), {\n  updatePassword\n}))(ChangePassword);","map":{"version":3,"names":["React","Component","PropTypes","Helmet","connect","compose","Link","withRouter","Portal","defineMessages","injectIntl","Container","jwtDecode","toast","Form","Icon","Toast","Toolbar","updatePassword","getBaseUrl","backSVG","messages","changePassword","default","oldPasswordTitle","oldPasswordDescription","newPasswordTitle","newPasswordDescription","newPasswordRepeatTitle","newPasswordRepeatDescription","saved","back","success","ChangePassword","constructor","props","onCancel","bind","onSubmit","state","isClient","componentDidMount","setState","data","newPassword","newPasswordRepeat","userId","oldPassword","intl","formatMessage","history","goBack","render","fieldsets","id","title","fields","properties","description","type","widget","required","loading","document","getElementById","pathname","string","isRequired","bool","func","userSession","token","sub","users","update_password","location"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx"],"sourcesContent":["/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changePassword: {\n    id: 'Change Password',\n    defaultMessage: 'Change Password',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  oldPasswordTitle: {\n    id: 'Current password',\n    defaultMessage: 'Current password',\n  },\n  oldPasswordDescription: {\n    id: 'Enter your current password.',\n    defaultMessage: 'Enter your current password.',\n  },\n  newPasswordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  newPasswordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  newPasswordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  newPasswordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nclass ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    userId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    updatePassword: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(\n        this.props.userId,\n        data.oldPassword,\n        data.newPassword,\n      );\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.saved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-change-password\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.changePassword)}\n        />\n        <Form\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n              },\n            ],\n            properties: {\n              oldPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.oldPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.newPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPasswordRepeat: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatTitle,\n                ),\n                type: 'string',\n                widget: 'password',\n              },\n            },\n            required: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      loading: state.users.update_password.loading,\n      pathname: props.location.pathname,\n    }),\n    { updatePassword },\n  ),\n)(ChangePassword);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Change Password","defaultMessage":"Change Password"},{"id":"Default","defaultMessage":"Default"},{"id":"Current password","defaultMessage":"Current password"},{"id":"Enter your current password.","defaultMessage":"Enter your current password."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 5 characters.","defaultMessage":"Enter your new password. Minimum 5 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module"}