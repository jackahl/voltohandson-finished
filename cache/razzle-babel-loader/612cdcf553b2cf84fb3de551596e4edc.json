{"ast":null,"code":"import { Editor, Path, Transforms } from 'slate';\nimport { isCursorInList, deconstructToVoltoBlocks, getCurrentListItem, mergeWithNextList, mergeWithPreviousList } from '@plone/volto-slate/utils';\nimport config from '@plone/volto/registry';\n/**\n * @function indentListItems\n * @param {Editor} editor\n * @param {Event} event\n *\n * This bit is quite involved. You need a good understanding of Slate API and\n * Slate's DOM-like behaviour.\n *\n * The markup we're trying to produce is like:\n *\n * ```\n *  <ul>\n *    <li>something</li>\n *    <ul>\n *      <li>else</li>\n *    </ul>\n *  </ul>\n * ```\n *\n * Although not the cleanest, there are numerous advantages to having lists like\n * this:\n * - Code is a lot cleaner, easy to understand and maintain\n * - Google Docs produces the same type of lists\n * - HTML produced by LibreWriter (as witnesed in clipboard transfer) is same\n *\n * See https://github.com/eea/volto-slate/releases/tag/ul_inside_li for an\n * implementation that \"inlines\" the <ul> tags inside <li>. It's not pretty.\n */\n\nexport function indentListItems(_ref) {\n  let {\n    editor,\n    event\n  } = _ref;\n\n  // TODO: test if the cursor is at the beginning of the list item\n  // If the text cursor is not in a list, then do nothing.\n  if (!isCursorInList(editor)) {\n    return;\n  } else {\n    // Else prevent the default event handling and bubbling.\n    event.preventDefault();\n    event.stopPropagation(); // If Shift & Ctrl, decrease multiple items depth. If Shift & !Ctrl,\n    // decrease item depth. If !Shift & Ctrl, increase multiple item depth. If\n    // !Shift & !Ctrl, increase item depth.\n\n    return event.shiftKey ? event.ctrlKey ? decreaseMultipleItemsDepth(editor, event) : decreaseItemDepth(editor, event) : event.ctrlKey ? increaseMultipleItemDepth(editor, event) : increaseItemDepth(editor, event);\n  }\n}\n/**\n * Handle the new Volto blocks created by `deconstructToVoltoBlocks`.\n * @param {Editor} editor The Slate editor object as customized by the\n * volto-slate addon.\n * @param {string[]} newIds The IDs of the newly created Volto blocks.\n */\n\nconst handleNewVoltoBlocks = (editor, blockIds) => {\n  const props = editor.getBlockProps();\n  props.onSelectBlock(blockIds[blockIds.length - 1]);\n};\n/**\n * @function decreaseItemDepth\n *\n * Decreases indent level of a single list item.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\n\n\nexport function decreaseItemDepth(editor, event) {\n  const {\n    slate\n  } = config.settings; // Current list item being unindented\n\n  const [listItemNode, listItemPath] = getCurrentListItem(editor); // The ul/ol that holds the current list item\n\n  const [, parentListPath] = Editor.parent(editor, listItemPath); // TODO: when unindenting a sublist item, it should take its next siblings\n  // with it as a sublist\n\n  const listItemRef = Editor.pathRef(editor, listItemPath); // TODO: please clarify, we unwrap at list item path but we only unwrap nodes\n  // that match list types, but list item type is different from all list types:\n\n  Transforms.unwrapNodes(editor, {\n    at: listItemPath,\n    split: true,\n    mode: 'lowest',\n    match: node => slate.listTypes.includes(node.type)\n  });\n  /**\n   * This condition is the same as \"listItemRef.current is not the root editor\n   * node or one if its children\".\n   */\n\n  function getCondition1() {\n    return listItemRef.current.length > 1;\n  }\n  /**\n   * @returns The current parent Node of the PathRef linked to the initial list\n   * item that we want deindented.\n   */\n\n\n  function getParent() {\n    return Path.parent(listItemRef.current);\n  } // Merge with any previous <ul/ol> list\n\n\n  if (getCondition1()) mergeWithPreviousList(editor, getParent()); // Merge with any next <ul/ol> list\n\n  if (getCondition1()) mergeWithNextList(editor, getParent());\n\n  if (parentListPath.length === 1) {\n    // Our parent is at root, just under the Editor, where just block nodes can\n    // be, and the user wants to break out so we unwrap the list item. Usually\n    // this means making the list item a `p` just below the Editor in the\n    // document tree, keeping its contents.\n    Transforms.setNodes(editor, {\n      type: slate.defaultBlockType\n    }, {\n      at: listItemRef.current,\n      match: node => node === listItemNode\n    });\n  }\n\n  listItemRef.unref(); // If we have more then one child in the editor root, break to volto blocks\n\n  if (editor.children.length > 1) {\n    deconstructToVoltoBlocks(editor).then(newIds => {\n      handleNewVoltoBlocks(editor, newIds);\n    });\n  }\n\n  return true;\n}\n/**\n * Increases the depth (indent level) of a single list item.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\n\nexport function increaseItemDepth(editor, event) {\n  // test if there's a sibling ul element above (in this case we insert at end)\n  // or below (then we insert at top)\n  // Get the current list item's path.\n  const [, listItemPath] = getCurrentListItem(editor); // Get the current list item's parent Node.\n\n  const [parentList] = Editor.parent(editor, listItemPath);\n  const {\n    slate\n  } = config.settings;\n  const {\n    type\n  } = parentList; // If the parent is not a list\n\n  if (!slate.listTypes.includes(type)) {\n    // Do not increase any indent level. And also, this situation shows that\n    // there is a LI inside something that is not a list, and this means that\n    // something broke the data in the Slate document. TODO: Maybe throw an\n    // exception?\n    return false; // false means that the event was not practically handled\n  }\n  /**\n   * Create a list of the same type as the parent list and put the specified\n   * list item in it, then put the new list inside the parent list.\n   */\n\n\n  function wrapListItem() {\n    Transforms.wrapNodes(editor, // `children` property is added automatically as an empty array then\n    // normalized\n    {\n      type: type\n    }, {\n      at: listItemPath\n    });\n  } // If the parent list is just below the Editor node\n\n\n  if (parentList.children.length === 1) {\n    // There should be just one block node inside the Editor node in volto-slate\n    // (what about table cells? currently they allow multiple paragraphs in\n    // them), so there should be no previous or next sibling.\n    wrapListItem();\n    return true;\n  }\n\n  wrapListItem(); // listItemPath was wrapped in a node, so it now points to a list\n\n  const currentListRef = Editor.pathRef(editor, listItemPath); // Merge with any previous <ul/ol> list\n\n  mergeWithPreviousList(editor, currentListRef.current); // Merge with any next <ul/ol> list\n\n  mergeWithNextList(editor, currentListRef.current);\n  currentListRef.unref();\n  return true;\n}\n/**\n * [Not implemented] Indents current list item + plus siblings that come after\n * it.\n * @param {Editor} editor\n * @param {Event} event\n */\n\nexport function increaseMultipleItemDepth(editor, event) {// TODO: implement\n}\n/**\n * [Not implemented] Un-indents current list item + plus siblings that come\n * after it.\n * @param {Editor} editor\n * @param {Event} event\n */\n\nexport function decreaseMultipleItemsDepth(editor, event) {// TODO: implement\n}","map":{"version":3,"names":["Editor","Path","Transforms","isCursorInList","deconstructToVoltoBlocks","getCurrentListItem","mergeWithNextList","mergeWithPreviousList","config","indentListItems","editor","event","preventDefault","stopPropagation","shiftKey","ctrlKey","decreaseMultipleItemsDepth","decreaseItemDepth","increaseMultipleItemDepth","increaseItemDepth","handleNewVoltoBlocks","blockIds","props","getBlockProps","onSelectBlock","length","slate","settings","listItemNode","listItemPath","parentListPath","parent","listItemRef","pathRef","unwrapNodes","at","split","mode","match","node","listTypes","includes","type","getCondition1","current","getParent","setNodes","defaultBlockType","unref","children","then","newIds","parentList","wrapListItem","wrapNodes","currentListRef"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/keyboard/indentListItems.js"],"sourcesContent":["import { Editor, Path, Transforms } from 'slate';\nimport {\n  isCursorInList,\n  deconstructToVoltoBlocks,\n  getCurrentListItem,\n  mergeWithNextList,\n  mergeWithPreviousList,\n} from '@plone/volto-slate/utils';\nimport config from '@plone/volto/registry';\n\n/**\n * @function indentListItems\n * @param {Editor} editor\n * @param {Event} event\n *\n * This bit is quite involved. You need a good understanding of Slate API and\n * Slate's DOM-like behaviour.\n *\n * The markup we're trying to produce is like:\n *\n * ```\n *  <ul>\n *    <li>something</li>\n *    <ul>\n *      <li>else</li>\n *    </ul>\n *  </ul>\n * ```\n *\n * Although not the cleanest, there are numerous advantages to having lists like\n * this:\n * - Code is a lot cleaner, easy to understand and maintain\n * - Google Docs produces the same type of lists\n * - HTML produced by LibreWriter (as witnesed in clipboard transfer) is same\n *\n * See https://github.com/eea/volto-slate/releases/tag/ul_inside_li for an\n * implementation that \"inlines\" the <ul> tags inside <li>. It's not pretty.\n */\nexport function indentListItems({ editor, event }) {\n  // TODO: test if the cursor is at the beginning of the list item\n\n  // If the text cursor is not in a list, then do nothing.\n  if (!isCursorInList(editor)) {\n    return;\n  } else {\n    // Else prevent the default event handling and bubbling.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // If Shift & Ctrl, decrease multiple items depth. If Shift & !Ctrl,\n    // decrease item depth. If !Shift & Ctrl, increase multiple item depth. If\n    // !Shift & !Ctrl, increase item depth.\n    return event.shiftKey\n      ? event.ctrlKey\n        ? decreaseMultipleItemsDepth(editor, event)\n        : decreaseItemDepth(editor, event)\n      : event.ctrlKey\n      ? increaseMultipleItemDepth(editor, event)\n      : increaseItemDepth(editor, event);\n  }\n}\n\n/**\n * Handle the new Volto blocks created by `deconstructToVoltoBlocks`.\n * @param {Editor} editor The Slate editor object as customized by the\n * volto-slate addon.\n * @param {string[]} newIds The IDs of the newly created Volto blocks.\n */\nconst handleNewVoltoBlocks = (editor, blockIds) => {\n  const props = editor.getBlockProps();\n  props.onSelectBlock(blockIds[blockIds.length - 1]);\n};\n\n/**\n * @function decreaseItemDepth\n *\n * Decreases indent level of a single list item.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function decreaseItemDepth(editor, event) {\n  const { slate } = config.settings;\n\n  // Current list item being unindented\n  const [listItemNode, listItemPath] = getCurrentListItem(editor);\n\n  // The ul/ol that holds the current list item\n  const [, parentListPath] = Editor.parent(editor, listItemPath);\n\n  // TODO: when unindenting a sublist item, it should take its next siblings\n  // with it as a sublist\n  const listItemRef = Editor.pathRef(editor, listItemPath);\n\n  // TODO: please clarify, we unwrap at list item path but we only unwrap nodes\n  // that match list types, but list item type is different from all list types:\n  Transforms.unwrapNodes(editor, {\n    at: listItemPath,\n    split: true,\n    mode: 'lowest',\n    match: (node) => slate.listTypes.includes(node.type),\n  });\n\n  /**\n   * This condition is the same as \"listItemRef.current is not the root editor\n   * node or one if its children\".\n   */\n  function getCondition1() {\n    return listItemRef.current.length > 1;\n  }\n\n  /**\n   * @returns The current parent Node of the PathRef linked to the initial list\n   * item that we want deindented.\n   */\n  function getParent() {\n    return Path.parent(listItemRef.current);\n  }\n\n  // Merge with any previous <ul/ol> list\n  if (getCondition1()) mergeWithPreviousList(editor, getParent());\n\n  // Merge with any next <ul/ol> list\n  if (getCondition1()) mergeWithNextList(editor, getParent());\n\n  if (parentListPath.length === 1) {\n    // Our parent is at root, just under the Editor, where just block nodes can\n    // be, and the user wants to break out so we unwrap the list item. Usually\n    // this means making the list item a `p` just below the Editor in the\n    // document tree, keeping its contents.\n    Transforms.setNodes(\n      editor,\n      { type: slate.defaultBlockType },\n      {\n        at: listItemRef.current,\n        match: (node) => node === listItemNode,\n      },\n    );\n  }\n\n  listItemRef.unref();\n\n  // If we have more then one child in the editor root, break to volto blocks\n  if (editor.children.length > 1) {\n    deconstructToVoltoBlocks(editor).then((newIds) => {\n      handleNewVoltoBlocks(editor, newIds);\n    });\n  }\n\n  return true;\n}\n\n/**\n * Increases the depth (indent level) of a single list item.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function increaseItemDepth(editor, event) {\n  // test if there's a sibling ul element above (in this case we insert at end)\n  // or below (then we insert at top)\n\n  // Get the current list item's path.\n  const [, listItemPath] = getCurrentListItem(editor);\n\n  // Get the current list item's parent Node.\n  const [parentList] = Editor.parent(editor, listItemPath);\n\n  const { slate } = config.settings;\n  const { type } = parentList;\n\n  // If the parent is not a list\n  if (!slate.listTypes.includes(type)) {\n    // Do not increase any indent level. And also, this situation shows that\n    // there is a LI inside something that is not a list, and this means that\n    // something broke the data in the Slate document. TODO: Maybe throw an\n    // exception?\n    return false; // false means that the event was not practically handled\n  }\n\n  /**\n   * Create a list of the same type as the parent list and put the specified\n   * list item in it, then put the new list inside the parent list.\n   */\n  function wrapListItem() {\n    Transforms.wrapNodes(\n      editor,\n      // `children` property is added automatically as an empty array then\n      // normalized\n      { type: type },\n      {\n        at: listItemPath,\n      },\n    );\n  }\n\n  // If the parent list is just below the Editor node\n  if (parentList.children.length === 1) {\n    // There should be just one block node inside the Editor node in volto-slate\n    // (what about table cells? currently they allow multiple paragraphs in\n    // them), so there should be no previous or next sibling.\n    wrapListItem();\n    return true;\n  }\n\n  wrapListItem();\n\n  // listItemPath was wrapped in a node, so it now points to a list\n  const currentListRef = Editor.pathRef(editor, listItemPath);\n\n  // Merge with any previous <ul/ol> list\n  mergeWithPreviousList(editor, currentListRef.current);\n\n  // Merge with any next <ul/ol> list\n  mergeWithNextList(editor, currentListRef.current);\n\n  currentListRef.unref();\n\n  return true;\n}\n\n/**\n * [Not implemented] Indents current list item + plus siblings that come after\n * it.\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function increaseMultipleItemDepth(editor, event) {\n  // TODO: implement\n}\n\n/**\n * [Not implemented] Un-indents current list item + plus siblings that come\n * after it.\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function decreaseMultipleItemsDepth(editor, event) {\n  // TODO: implement\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}