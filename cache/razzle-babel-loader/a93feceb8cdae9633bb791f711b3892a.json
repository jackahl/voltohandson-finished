{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _remove from \"lodash/remove\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockEdit.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Segment, Table, Form } from 'semantic-ui-react';\nimport { Portal } from 'react-portal';\nimport cx from 'classnames';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport Cell from './Cell';\nimport { Field, Icon } from '@plone/volto/components';\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n/**\n * Returns a random string of 32 digits.\n */\n\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\n\n\nfunction getEmptyParagraph() {\n  return [{\n    type: 'p',\n    children: [{\n      text: ''\n    }]\n  }];\n}\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\n\n\nconst emptyCell = function () {\n  let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data';\n  return {\n    key: getId(),\n    type: type,\n    value: getEmptyParagraph()\n  };\n};\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\n\n\nconst emptyRow = cells => ({\n  key: getId(),\n  cells: _map(cells, () => emptyCell())\n});\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\n\n\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [{\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }]\n  }, {\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }]\n  }]\n};\nconst messages = defineMessages({\n  insertRowBefore: {\n    \"id\": \"Insert row before\",\n    \"defaultMessage\": \"Insert row before\"\n  },\n  insertRowAfter: {\n    \"id\": \"Insert row after\",\n    \"defaultMessage\": \"Insert row after\"\n  },\n  deleteRow: {\n    \"id\": \"Delete row\",\n    \"defaultMessage\": \"Delete row\"\n  },\n  insertColBefore: {\n    \"id\": \"Insert col before\",\n    \"defaultMessage\": \"Insert col before\"\n  },\n  insertColAfter: {\n    \"id\": \"Insert col after\",\n    \"defaultMessage\": \"Insert col after\"\n  },\n  deleteCol: {\n    \"id\": \"Delete col\",\n    \"defaultMessage\": \"Delete col\"\n  },\n  hideHeaders: {\n    \"id\": \"Hide headers\",\n    \"defaultMessage\": \"Hide headers\"\n  },\n  sortable: {\n    \"id\": \"Make the table sortable\",\n    \"defaultMessage\": \"Make the table sortable\"\n  },\n  sortableDescription: {\n    \"id\": \"Visible only in view mode\",\n    \"defaultMessage\": \"Visible only in view mode\"\n  },\n  fixed: {\n    \"id\": \"Fixed width table cells\",\n    \"defaultMessage\": \"Fixed width table cells\"\n  },\n  compact: {\n    \"id\": \"Make the table compact\",\n    \"defaultMessage\": \"Make the table compact\"\n  },\n  basic: {\n    \"id\": \"Reduce complexity\",\n    \"defaultMessage\": \"Reduce complexity\"\n  },\n  celled: {\n    \"id\": \"Divide each row into separate cells\",\n    \"defaultMessage\": \"Divide each row into separate cells\"\n  },\n  inverted: {\n    \"id\": \"Table color inverted\",\n    \"defaultMessage\": \"Table color inverted\"\n  },\n  striped: {\n    \"id\": \"Stripe alternate rows with color\",\n    \"defaultMessage\": \"Stripe alternate rows with color\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  bottom: {\n    \"id\": \"Bottom\",\n    \"defaultMessage\": \"Bottom\"\n  },\n  middle: {\n    \"id\": \"Middle\",\n    \"defaultMessage\": \"Middle\"\n  },\n  top: {\n    \"id\": \"Top\",\n    \"defaultMessage\": \"Top\"\n  }\n});\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\n\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0\n      },\n      isClient: false\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n    this.toggleCellType = this.toggleCellType.bind(this);\n    this.toggleBool = this.toggleBool.bind(this);\n    this.toggleHideHeaders = this.toggleHideHeaders.bind(this);\n    this.toggleSortable = this.toggleSortable.bind(this);\n    this.toggleFixed = this.toggleFixed.bind(this);\n    this.toggleCompact = this.toggleCompact.bind(this);\n    this.toggleBasic = this.toggleBasic.bind(this);\n    this.toggleCelled = this.toggleCelled.bind(this);\n    this.toggleInverted = this.toggleInverted.bind(this);\n    this.toggleStriped = this.toggleStriped.bind(this);\n  }\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    if (!this.props.data.table) {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: initialTable\n      }));\n    }\n\n    this.setState({\n      isClient: true\n    });\n  }\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table) {\n      this.props.onChangeBlock(nextProps.block, _objectSpread(_objectSpread({}, nextProps.data), {}, {\n        table: initialTable\n      }));\n    }\n  }\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n\n\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        [id]: value\n      })\n    }));\n  }\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n\n\n  onSelectCell(row, cell) {\n    this.setState({\n      selected: {\n        row,\n        cell\n      }\n    });\n  }\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n\n\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = _objectSpread(_objectSpread({}, table.rows[row].cells[cell]), {}, {\n      value: JSON.parse(JSON.stringify(slateValue))\n    });\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table\n    }));\n  }\n  /**\n   * Toggle cell type (from header to data or reverse)\n   * @method toggleCellType\n   * @returns {undefined}\n   */\n\n\n  toggleCellType() {\n    const table = _objectSpread({}, this.props.data.table);\n\n    let type = table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n    table.rows[this.state.selected.row].cells[this.state.selected.cell].type = type === 'header' ? 'data' : 'header';\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table\n    }));\n  }\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n\n\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: [...table.rows.slice(0, this.state.selected.row), emptyRow(table.rows[0].cells), ...table.rows.slice(this.state.selected.row)]\n      })\n    }));\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell\n      }\n    });\n  }\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n\n\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: [...table.rows.slice(0, this.state.selected.row + 1), emptyRow(table.rows[0].cells), ...table.rows.slice(this.state.selected.row + 1)]\n      })\n    }));\n  }\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n\n\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _map(table.rows, (row, index) => _objectSpread(_objectSpread({}, row), {}, {\n          cells: [...row.cells.slice(0, this.state.selected.cell), emptyCell(table.rows[index].cells[this.state.selected.cell].type), ...row.cells.slice(this.state.selected.cell)]\n        }))\n      })\n    }));\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1\n      }\n    });\n  }\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n\n\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _map(table.rows, (row, index) => _objectSpread(_objectSpread({}, row), {}, {\n          cells: [...row.cells.slice(0, this.state.selected.cell + 1), emptyCell(table.rows[index].cells[this.state.selected.cell].type), ...row.cells.slice(this.state.selected.cell + 1)]\n        }))\n      })\n    }));\n  }\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n\n\n  onDeleteCol() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1\n        }\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _map(table.rows, row => _objectSpread(_objectSpread({}, row), {}, {\n          cells: _remove(row.cells, (cell, index) => index !== this.state.selected.cell)\n        }))\n      })\n    }));\n  }\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n\n\n  onDeleteRow() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell\n        }\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _remove(table.rows, (row, index) => index !== this.state.selected.row)\n      })\n    }));\n  }\n  /**\n   * Toggles bool state data ('fixed', 'compact' etc. can be true or false).\n   * @method toggleBool\n   * @param {string} value Key in the table state to toggle.\n   * @returns {undefined}\n   */\n\n\n  toggleBool(value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        [value]: !table[value]\n      })\n    }));\n  }\n  /**\n   * Toggle fixed\n   * @method toggleHideHeaders\n   * @returns {undefined}\n   */\n\n\n  toggleHideHeaders() {\n    this.toggleBool('hideHeaders');\n  }\n  /**\n   * Toggle sortable\n   * @method toggleSortable\n   * @returns {undefined}\n   */\n\n\n  toggleSortable() {\n    this.toggleBool('sortable');\n  }\n  /**\n   * Toggle fixed\n   * @method toggleFixed\n   * @returns {undefined}\n   */\n\n\n  toggleFixed() {\n    this.toggleBool('fixed');\n  }\n  /**\n   * Toggle compact\n   * @method toggleCompact\n   * @returns {undefined}\n   */\n\n\n  toggleCompact() {\n    this.toggleBool('compact');\n  }\n  /**\n   * Toggle basic\n   * @method toggleBasic\n   * @returns {undefined}\n   */\n\n\n  toggleBasic() {\n    this.toggleBool('basic');\n  }\n  /**\n   * Toggle celled\n   * @method toggleCelled\n   * @returns {undefined}\n   */\n\n\n  toggleCelled() {\n    this.toggleBool('celled');\n  }\n  /**\n   * Toggle inverted\n   * @method toggleInverted\n   * @returns {undefined}\n   */\n\n\n  toggleInverted() {\n    this.toggleBool('inverted');\n  }\n  /**\n   * Toggle striped\n   * @method toggleStriped\n   * @returns {undefined}\n   */\n\n\n  toggleStriped() {\n    this.toggleBool('striped');\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({\n        selected: null\n      });\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$data$tabl, _this$props$data$tabl2, _this$props$data$tabl3, _this$props$data$tabl4, _this$props$data$tabl5;\n\n    const headers = ((_this$props$data$tabl = this.props.data.table) === null || _this$props$data$tabl === void 0 ? void 0 : (_this$props$data$tabl2 = _this$props$data$tabl.rows) === null || _this$props$data$tabl2 === void 0 ? void 0 : (_this$props$data$tabl3 = _this$props$data$tabl2[0]) === null || _this$props$data$tabl3 === void 0 ? void 0 : _this$props$data$tabl3.cells) || [];\n    const rows = ((_this$props$data$tabl4 = this.props.data.table) === null || _this$props$data$tabl4 === void 0 ? void 0 : (_this$props$data$tabl5 = _this$props$data$tabl4.rows) === null || _this$props$data$tabl5 === void 0 ? void 0 : _this$props$data$tabl5.filter((_, index) => index > 0)) || [];\n    return (// TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      __jsx(\"div\", {\n        className: cx('block table', {\n          selected: this.props.selected\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 7\n        }\n      }, this.props.selected && __jsx(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }\n      }, __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertRowBefore,\n        title: this.props.intl.formatMessage(messages.insertRowBefore),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertRowBefore),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowBeforeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertRowAfter,\n        title: this.props.intl.formatMessage(messages.insertRowAfter),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertRowAfter),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowAfterSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onDeleteRow,\n        disabled: this.props.data.table && this.props.data.table.rows.length === 1,\n        title: this.props.intl.formatMessage(messages.deleteRow),\n        \"aria-label\": this.props.intl.formatMessage(messages.deleteRow),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowDeleteSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 671,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 674,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertColBefore,\n        title: this.props.intl.formatMessage(messages.insertColBefore),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertColBefore),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 675,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colBeforeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertColAfter,\n        title: this.props.intl.formatMessage(messages.insertColAfter),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertColAfter),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colAfterSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onDeleteCol,\n        disabled: this.props.data.table && this.props.data.table.rows[0].cells.length === 1,\n        title: this.props.intl.formatMessage(messages.deleteCol),\n        \"aria-label\": this.props.intl.formatMessage(messages.deleteCol),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colDeleteSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 17\n        }\n      })))), this.props.data.table && __jsx(Table, {\n        fixed: this.props.data.table.fixed,\n        compact: this.props.data.table.compact,\n        basic: this.props.data.table.basic ? 'very' : false,\n        celled: this.props.data.table.celled,\n        inverted: this.props.data.table.inverted,\n        striped: this.props.data.table.striped,\n        className: \"slate-table-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 11\n        }\n      }, !this.props.data.table.hideHeaders ? __jsx(Table.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 15\n        }\n      }, __jsx(Table.Row, {\n        textAlign: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 17\n        }\n      }, headers.map((cell, cellIndex) => __jsx(Table.HeaderCell, {\n        key: cell.key,\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 21\n        }\n      }, __jsx(Cell, {\n        value: cell.value,\n        row: 0,\n        cell: cellIndex,\n        onSelectCell: this.onSelectCell,\n        selected: this.props.selected && this.state.selected && 0 === this.state.selected.row && cellIndex === this.state.selected.cell,\n        selectedCell: this.state.selected,\n        isTableBlockSelected: this.props.selected,\n        onAddBlock: this.props.onAddBlock,\n        onSelectBlock: this.props.onSelectBlock,\n        onChange: this.onChangeCell,\n        index: this.props.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 23\n        }\n      }))))) : '', __jsx(Table.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 761,\n          columnNumber: 13\n        }\n      }, _map(rows, (row, rowIndex) => __jsx(Table.Row, {\n        key: row.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 17\n        }\n      }, _map(row.cells, (cell, cellIndex) => __jsx(Table.Cell, {\n        key: cell.key,\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        className: this.props.selected && this.state.selected && rowIndex + 1 === this.state.selected.row && cellIndex === this.state.selected.cell && this.props.selected ? 'selected' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 21\n        }\n      }, __jsx(Cell, {\n        value: cell.value,\n        row: rowIndex + 1,\n        cell: cellIndex,\n        onSelectCell: this.onSelectCell,\n        selected: this.props.selected && this.state.selected && rowIndex + 1 === this.state.selected.row && cellIndex === this.state.selected.cell,\n        selectedCell: this.state.selected,\n        isTableBlockSelected: this.props.selected,\n        onAddBlock: this.props.onAddBlock,\n        onSelectBlock: this.props.onSelectBlock,\n        onChange: this.onChangeCell,\n        index: this.props.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779,\n          columnNumber: 23\n        }\n      }))))))), this.props.selected && this.state.selected && this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('sidebar-properties'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 805,\n          columnNumber: 11\n        }\n      }, __jsx(Form, {\n        method: \"post\",\n        onSubmit: event => event.preventDefault(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 806,\n          columnNumber: 13\n        }\n      }, __jsx(Segment, {\n        secondary: true,\n        attached: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Table\",\n        defaultMessage: \"Table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 17\n        }\n      })), __jsx(Segment, {\n        attached: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 810,\n          columnNumber: 15\n        }\n      }, __jsx(Field, {\n        id: \"hideHeaders\",\n        title: this.props.intl.formatMessage(messages.hideHeaders),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.hideHeaders,\n        onChange: () => this.toggleHideHeaders(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 811,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"sortable\",\n        title: this.props.intl.formatMessage(messages.sortable),\n        description: this.props.intl.formatMessage(messages.sortableDescription),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.sortable,\n        onChange: () => this.toggleSortable(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 820,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"fixed\",\n        title: this.props.intl.formatMessage(messages.fixed),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.fixed,\n        onChange: () => this.toggleFixed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"celled\",\n        title: this.props.intl.formatMessage(messages.celled),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.celled,\n        onChange: this.toggleCelled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 839,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"striped\",\n        title: this.props.intl.formatMessage(messages.striped),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.striped,\n        onChange: this.toggleStriped,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"compact\",\n        title: this.props.intl.formatMessage(messages.compact),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.compact,\n        onChange: () => this.toggleCompact(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"basic\",\n        title: this.props.intl.formatMessage(messages.basic),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.basic,\n        onChange: this.toggleBasic,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 17\n        }\n      }), __jsx(Field, {\n        id: \"inverted\",\n        title: this.props.intl.formatMessage(messages.inverted),\n        type: \"boolean\",\n        value: this.props.data.table && this.props.data.table.inverted,\n        onChange: this.toggleInverted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 17\n        }\n      })))))\n    );\n  }\n\n}\n\n_defineProperty(Edit, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired\n});\n\n_defineProperty(Edit, \"defaultProps\", {\n  detached: false\n});\n\nexport default _c = injectIntl(Edit);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","PropTypes","Button","Segment","Table","Form","Portal","cx","FormattedMessage","defineMessages","injectIntl","Cell","Field","Icon","rowBeforeSVG","rowAfterSVG","colBeforeSVG","colAfterSVG","rowDeleteSVG","colDeleteSVG","getId","Math","floor","random","pow","toString","getEmptyParagraph","type","children","text","emptyCell","key","value","emptyRow","cells","initialTable","hideHeaders","fixed","compact","basic","celled","inverted","striped","rows","messages","insertRowBefore","insertRowAfter","deleteRow","insertColBefore","insertColAfter","deleteCol","sortable","sortableDescription","left","center","right","bottom","middle","top","Edit","constructor","props","state","headers","selected","row","cell","isClient","onChange","bind","onSelectCell","onInsertRowBefore","onInsertRowAfter","onInsertColBefore","onInsertColAfter","onDeleteRow","onDeleteCol","onChangeCell","toggleCellType","toggleBool","toggleHideHeaders","toggleSortable","toggleFixed","toggleCompact","toggleBasic","toggleCelled","toggleInverted","toggleStriped","componentDidMount","data","table","onChangeBlock","block","setState","UNSAFE_componentWillReceiveProps","nextProps","id","slateValue","JSON","parse","stringify","slice","index","length","componentDidUpdate","prevProps","render","filter","_","intl","formatMessage","map","cellIndex","onAddBlock","onSelectBlock","rowIndex","document","getElementById","event","preventDefault","objectOf","any","isRequired","detached","bool","number","string","func","onDeleteBlock","onInsertBlock","onMutateBlock","onFocusPreviousBlock","onFocusNextBlock"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockEdit.jsx"],"sourcesContent":["/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { map, remove } from 'lodash';\nimport { Button, Segment, Table, Form } from 'semantic-ui-react';\nimport { Portal } from 'react-portal';\nimport cx from 'classnames';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport Cell from './Cell';\nimport { Field, Icon } from '@plone/volto/components';\n\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{ type: 'p', children: [{ text: '' }] }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nconst emptyCell = (type = 'data') => ({\n  key: getId(),\n  type: type,\n  value: getEmptyParagraph(),\n});\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nconst emptyRow = (cells) => ({\n  key: getId(),\n  cells: map(cells, () => emptyCell()),\n});\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n  ],\n};\n\nconst messages = defineMessages({\n  insertRowBefore: {\n    id: 'Insert row before',\n    defaultMessage: 'Insert row before',\n  },\n  insertRowAfter: {\n    id: 'Insert row after',\n    defaultMessage: 'Insert row after',\n  },\n  deleteRow: {\n    id: 'Delete row',\n    defaultMessage: 'Delete row',\n  },\n  insertColBefore: {\n    id: 'Insert col before',\n    defaultMessage: 'Insert col before',\n  },\n  insertColAfter: {\n    id: 'Insert col after',\n    defaultMessage: 'Insert col after',\n  },\n  deleteCol: {\n    id: 'Delete col',\n    defaultMessage: 'Delete col',\n  },\n  hideHeaders: {\n    id: 'Hide headers',\n    defaultMessage: 'Hide headers',\n  },\n  sortable: {\n    id: 'Make the table sortable',\n    defaultMessage: 'Make the table sortable',\n  },\n  sortableDescription: {\n    id: 'Visible only in view mode',\n    defaultMessage: 'Visible only in view mode',\n  },\n  fixed: {\n    id: 'Fixed width table cells',\n    defaultMessage: 'Fixed width table cells',\n  },\n  compact: {\n    id: 'Make the table compact',\n    defaultMessage: 'Make the table compact',\n  },\n  basic: {\n    id: 'Reduce complexity',\n    defaultMessage: 'Reduce complexity',\n  },\n  celled: {\n    id: 'Divide each row into separate cells',\n    defaultMessage: 'Divide each row into separate cells',\n  },\n  inverted: {\n    id: 'Table color inverted',\n    defaultMessage: 'Table color inverted',\n  },\n  striped: {\n    id: 'Stripe alternate rows with color',\n    defaultMessage: 'Stripe alternate rows with color',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  bottom: {\n    id: 'Bottom',\n    defaultMessage: 'Bottom',\n  },\n  middle: {\n    id: 'Middle',\n    defaultMessage: 'Middle',\n  },\n  top: {\n    id: 'Top',\n    defaultMessage: 'Top',\n  },\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0,\n      },\n      isClient: false,\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n    this.toggleCellType = this.toggleCellType.bind(this);\n    this.toggleBool = this.toggleBool.bind(this);\n    this.toggleHideHeaders = this.toggleHideHeaders.bind(this);\n    this.toggleSortable = this.toggleSortable.bind(this);\n    this.toggleFixed = this.toggleFixed.bind(this);\n    this.toggleCompact = this.toggleCompact.bind(this);\n    this.toggleBasic = this.toggleBasic.bind(this);\n    this.toggleCelled = this.toggleCelled.bind(this);\n    this.toggleInverted = this.toggleInverted.bind(this);\n    this.toggleStriped = this.toggleStriped.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        table: initialTable,\n      });\n    }\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table) {\n      this.props.onChangeBlock(nextProps.block, {\n        ...nextProps.data,\n        table: initialTable,\n      });\n    }\n  }\n\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({ selected: { row, cell } });\n  }\n\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = {\n      ...table.rows[row].cells[cell],\n      value: JSON.parse(JSON.stringify(slateValue)),\n    };\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Toggle cell type (from header to data or reverse)\n   * @method toggleCellType\n   * @returns {undefined}\n   */\n  toggleCellType() {\n    const table = { ...this.props.data.table };\n    let type =\n      table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n    table.rows[this.state.selected.row].cells[this.state.selected.cell].type =\n      type === 'header' ? 'data' : 'header';\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row),\n        ],\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell,\n      },\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row + 1),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row + 1),\n        ],\n      },\n    });\n  }\n\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell),\n          ],\n        })),\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1,\n      },\n    });\n  }\n\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell + 1),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell + 1),\n          ],\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n  onDeleteCol() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row) => ({\n          ...row,\n          cells: remove(\n            row.cells,\n            (cell, index) => index !== this.state.selected.cell,\n          ),\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: remove(\n          table.rows,\n          (row, index) => index !== this.state.selected.row,\n        ),\n      },\n    });\n  }\n\n  /**\n   * Toggles bool state data ('fixed', 'compact' etc. can be true or false).\n   * @method toggleBool\n   * @param {string} value Key in the table state to toggle.\n   * @returns {undefined}\n   */\n  toggleBool(value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [value]: !table[value],\n      },\n    });\n  }\n\n  /**\n   * Toggle fixed\n   * @method toggleHideHeaders\n   * @returns {undefined}\n   */\n  toggleHideHeaders() {\n    this.toggleBool('hideHeaders');\n  }\n\n  /**\n   * Toggle sortable\n   * @method toggleSortable\n   * @returns {undefined}\n   */\n  toggleSortable() {\n    this.toggleBool('sortable');\n  }\n\n  /**\n   * Toggle fixed\n   * @method toggleFixed\n   * @returns {undefined}\n   */\n  toggleFixed() {\n    this.toggleBool('fixed');\n  }\n\n  /**\n   * Toggle compact\n   * @method toggleCompact\n   * @returns {undefined}\n   */\n  toggleCompact() {\n    this.toggleBool('compact');\n  }\n\n  /**\n   * Toggle basic\n   * @method toggleBasic\n   * @returns {undefined}\n   */\n  toggleBasic() {\n    this.toggleBool('basic');\n  }\n\n  /**\n   * Toggle celled\n   * @method toggleCelled\n   * @returns {undefined}\n   */\n  toggleCelled() {\n    this.toggleBool('celled');\n  }\n\n  /**\n   * Toggle inverted\n   * @method toggleInverted\n   * @returns {undefined}\n   */\n  toggleInverted() {\n    this.toggleBool('inverted');\n  }\n\n  /**\n   * Toggle striped\n   * @method toggleStriped\n   * @returns {undefined}\n   */\n  toggleStriped() {\n    this.toggleBool('striped');\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({ selected: null });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const headers = this.props.data.table?.rows?.[0]?.cells || [];\n    const rows =\n      this.props.data.table?.rows?.filter((_, index) => index > 0) || [];\n\n    return (\n      // TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      <div className={cx('block table', { selected: this.props.selected })}>\n        {this.props.selected && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowBefore}\n                title={this.props.intl.formatMessage(messages.insertRowBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowBefore,\n                )}\n              >\n                <Icon name={rowBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowAfter}\n                title={this.props.intl.formatMessage(messages.insertRowAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowAfter,\n                )}\n              >\n                <Icon name={rowAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteRow}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table.rows.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteRow)}\n                aria-label={this.props.intl.formatMessage(messages.deleteRow)}\n              >\n                <Icon name={rowDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColBefore}\n                title={this.props.intl.formatMessage(messages.insertColBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColBefore,\n                )}\n              >\n                <Icon name={colBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColAfter}\n                title={this.props.intl.formatMessage(messages.insertColAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColAfter,\n                )}\n              >\n                <Icon name={colAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteCol}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table.rows[0].cells.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteCol)}\n                aria-label={this.props.intl.formatMessage(messages.deleteCol)}\n              >\n                <Icon name={colDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        {this.props.data.table && (\n          <Table\n            fixed={this.props.data.table.fixed}\n            compact={this.props.data.table.compact}\n            basic={this.props.data.table.basic ? 'very' : false}\n            celled={this.props.data.table.celled}\n            inverted={this.props.data.table.inverted}\n            striped={this.props.data.table.striped}\n            className=\"slate-table-block\"\n          >\n            {!this.props.data.table.hideHeaders ? (\n              <Table.Header>\n                <Table.Row textAlign=\"left\">\n                  {headers.map((cell, cellIndex) => (\n                    <Table.HeaderCell\n                      key={cell.key}\n                      textAlign=\"left\"\n                      verticalAlign=\"middle\"\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={0}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          0 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n            ) : (\n              ''\n            )}\n            <Table.Body>\n              {map(rows, (row, rowIndex) => (\n                <Table.Row key={row.key}>\n                  {map(row.cells, (cell, cellIndex) => (\n                    <Table.Cell\n                      key={cell.key}\n                      textAlign=\"left\"\n                      verticalAlign=\"middle\"\n                      className={\n                        this.props.selected &&\n                        this.state.selected &&\n                        rowIndex + 1 === this.state.selected.row &&\n                        cellIndex === this.state.selected.cell &&\n                        this.props.selected\n                          ? 'selected'\n                          : ''\n                      }\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={rowIndex + 1}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          rowIndex + 1 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {this.props.selected && this.state.selected && this.state.isClient && (\n          <Portal node={document.getElementById('sidebar-properties')}>\n            <Form method=\"post\" onSubmit={(event) => event.preventDefault()}>\n              <Segment secondary attached>\n                <FormattedMessage id=\"Table\" defaultMessage=\"Table\" />\n              </Segment>\n              <Segment attached>\n                <Field\n                  id=\"hideHeaders\"\n                  title={this.props.intl.formatMessage(messages.hideHeaders)}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.hideHeaders\n                  }\n                  onChange={() => this.toggleHideHeaders()}\n                />\n                <Field\n                  id=\"sortable\"\n                  title={this.props.intl.formatMessage(messages.sortable)}\n                  description={this.props.intl.formatMessage(\n                    messages.sortableDescription,\n                  )}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.sortable\n                  }\n                  onChange={() => this.toggleSortable()}\n                />\n                <Field\n                  id=\"fixed\"\n                  title={this.props.intl.formatMessage(messages.fixed)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.fixed}\n                  onChange={() => this.toggleFixed()}\n                />\n                <Field\n                  id=\"celled\"\n                  title={this.props.intl.formatMessage(messages.celled)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.celled}\n                  onChange={this.toggleCelled}\n                />\n                <Field\n                  id=\"striped\"\n                  title={this.props.intl.formatMessage(messages.striped)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.striped}\n                  onChange={this.toggleStriped}\n                />\n                <Field\n                  id=\"compact\"\n                  title={this.props.intl.formatMessage(messages.compact)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.compact}\n                  onChange={() => this.toggleCompact()}\n                />\n                <Field\n                  id=\"basic\"\n                  title={this.props.intl.formatMessage(messages.basic)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.basic}\n                  onChange={this.toggleBasic}\n                />\n                <Field\n                  id=\"inverted\"\n                  title={this.props.intl.formatMessage(messages.inverted)}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.inverted\n                  }\n                  onChange={this.toggleInverted}\n                />\n              </Segment>\n            </Form>\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Insert row before","defaultMessage":"Insert row before"},{"id":"Insert row after","defaultMessage":"Insert row after"},{"id":"Delete row","defaultMessage":"Delete row"},{"id":"Insert col before","defaultMessage":"Insert col before"},{"id":"Insert col after","defaultMessage":"Insert col after"},{"id":"Delete col","defaultMessage":"Delete col"},{"id":"Hide headers","defaultMessage":"Hide headers"},{"id":"Make the table sortable","defaultMessage":"Make the table sortable"},{"id":"Visible only in view mode","defaultMessage":"Visible only in view mode"},{"id":"Fixed width table cells","defaultMessage":"Fixed width table cells"},{"id":"Make the table compact","defaultMessage":"Make the table compact"},{"id":"Reduce complexity","defaultMessage":"Reduce complexity"},{"id":"Divide each row into separate cells","defaultMessage":"Divide each row into separate cells"},{"id":"Table color inverted","defaultMessage":"Table color inverted"},{"id":"Stripe alternate rows with color","defaultMessage":"Stripe alternate rows with color"},{"id":"Left","defaultMessage":"Left"},{"id":"Center","defaultMessage":"Center"},{"id":"Right","defaultMessage":"Right"},{"id":"Bottom","defaultMessage":"Bottom"},{"id":"Middle","defaultMessage":"Middle"},{"id":"Top","defaultMessage":"Top"},{"id":"Table","defaultMessage":"Table"}]}},"sourceType":"module"}