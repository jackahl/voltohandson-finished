{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Block/Edit.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Edit block.\n * @module components/manage/Blocks/Block/Edit\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { applyBlockDefaults } from '@plone/volto/helpers';\nimport { SidebarPortal, BlockSettingsSidebar, BlockSettingsSchema } from '@plone/volto/components';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  }\n});\n/**\n * Edit block class.\n * @class Edit\n * @extends Component\n */\n\nexport class Edit extends Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"blockNode\", /*#__PURE__*/React.createRef());\n  }\n\n  componentDidMount() {\n    var _blocksConfig$type, _blocksConfig$type2;\n\n    const {\n      type\n    } = this.props;\n    const {\n      blocksConfig = config.blocks.blocksConfig\n    } = this.props;\n    const blockHasOwnFocusManagement = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type = blocksConfig[type]) === null || _blocksConfig$type === void 0 ? void 0 : _blocksConfig$type['blockHasOwnFocusManagement']) || null;\n\n    if (!blockHasOwnFocusManagement && this.props.selected && this.blockNode.current) {\n      this.blockNode.current.focus();\n    }\n\n    const tab = this.props.manage ? 1 : (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type2 = blocksConfig[type]) === null || _blocksConfig$type2 === void 0 ? void 0 : _blocksConfig$type2.sidebarTab) || 0;\n\n    if (this.props.selected && this.props.editable) {\n      this.props.setSidebarTab(tab);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    var _blocksConfig$type3;\n\n    const {\n      blocksConfig = config.blocks.blocksConfig\n    } = this.props;\n    const {\n      selected,\n      type\n    } = this.props;\n    const blockHasOwnFocusManagement = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type3 = blocksConfig[type]) === null || _blocksConfig$type3 === void 0 ? void 0 : _blocksConfig$type3['blockHasOwnFocusManagement']) || null;\n\n    if (!blockHasOwnFocusManagement && nextProps.selected && selected !== nextProps.selected && this.blockNode.current) {\n      this.blockNode.current.focus();\n    }\n\n    if ((!this.props.selected && nextProps.selected || type !== nextProps.type) && this.props.editable) {\n      var _blocksConfig$nextPro;\n\n      const tab = this.props.manage ? 1 : (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$nextPro = blocksConfig[nextProps.type]) === null || _blocksConfig$nextPro === void 0 ? void 0 : _blocksConfig$nextPro.sidebarTab) || 0;\n      this.props.setSidebarTab(tab);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$data, _blocksConfig$type4, _this$props$data2, _blocksConfig$type6, _blocksConfig$type7, _this$props$data$vari;\n\n    const {\n      blocksConfig = config.blocks.blocksConfig\n    } = this.props;\n    const {\n      editable,\n      type\n    } = this.props;\n    const disableNewBlocks = (_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data.disableNewBlocks;\n    let Block = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type4 = blocksConfig[type]) === null || _blocksConfig$type4 === void 0 ? void 0 : _blocksConfig$type4['edit']) || null;\n\n    if ((_this$props$data2 = this.props.data) !== null && _this$props$data2 !== void 0 && _this$props$data2.readOnly || !editable && !config.blocks.showEditBlocksInBabelView) {\n      var _blocksConfig$type5;\n\n      Block = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type5 = blocksConfig[type]) === null || _blocksConfig$type5 === void 0 ? void 0 : _blocksConfig$type5['view']) || null;\n    }\n\n    const schema = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type6 = blocksConfig[type]) === null || _blocksConfig$type6 === void 0 ? void 0 : _blocksConfig$type6['schema']) || BlockSettingsSchema;\n    const blockHasOwnFocusManagement = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$type7 = blocksConfig[type]) === null || _blocksConfig$type7 === void 0 ? void 0 : _blocksConfig$type7['blockHasOwnFocusManagement']) || null;\n    return __jsx(React.Fragment, null, Block !== null ? __jsx(\"div\", {\n      role: \"presentation\",\n      onClick: e => {\n        const isMultipleSelection = e.shiftKey || e.ctrlKey || e.metaKey;\n        !this.props.selected && this.props.onSelectBlock(this.props.id, this.props.selected ? false : isMultipleSelection, e);\n      },\n      onKeyDown: !(blockHasOwnFocusManagement || disableNewBlocks) ? e => this.props.handleKeyDown(e, this.props.index, this.props.id, this.blockNode.current) : null,\n      className: cx(`block ${type} ${(_this$props$data$vari = this.props.data.variation) !== null && _this$props$data$vari !== void 0 ? _this$props$data$vari : ''}`, {\n        selected: this.props.selected || this.props.multiSelected,\n        multiSelected: this.props.multiSelected\n      }),\n      style: {\n        outline: 'none'\n      },\n      ref: this.blockNode // The tabIndex is required for the keyboard navigation\n\n      /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n      ,\n      tabIndex: !blockHasOwnFocusManagement ? -1 : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, __jsx(Block, _extends({}, this.props, {\n      blockNode: this.blockNode,\n      data: applyBlockDefaults(this.props),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    })), this.props.manage && __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      tab: \"sidebar-settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, __jsx(BlockSettingsSidebar, _extends({}, this.props, {\n      schema: schema,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    })))) : __jsx(\"div\", {\n      role: \"presentation\",\n      onClick: () => !this.props.selected && this.props.onSelectBlock(this.props.id),\n      onKeyDown: !(blockHasOwnFocusManagement || disableNewBlocks) ? e => this.props.handleKeyDown(e, this.props.index, this.props.id, this.blockNode.current) : null,\n      className: cx(`block ${type}`, {\n        selected: this.props.selected\n      }),\n      style: {\n        outline: 'none'\n      },\n      ref: this.blockNode // The tabIndex is required for the keyboard navigation\n      ,\n      tabIndex: -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, this.props.intl.formatMessage(messages.unknownBlock, {\n      block: type\n    })));\n  }\n\n}\n\n_defineProperty(Edit, \"propTypes\", {\n  type: PropTypes.string.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  // properties is mapped to formData, so it's not connected to changes of the object\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  selected: PropTypes.bool.isRequired,\n  multiSelected: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  id: PropTypes.string.isRequired,\n  manage: PropTypes.bool,\n  onMoveBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  editable: PropTypes.bool\n});\n\n_defineProperty(Edit, \"defaultProps\", {\n  manage: false,\n  editable: true\n});\n\nexport default compose(injectIntl, withObjectBrowser, connect(null, {\n  setSidebarTab\n}))(Edit);","map":{"version":3,"names":["React","Component","PropTypes","compose","connect","defineMessages","injectIntl","cx","setSidebarTab","config","withObjectBrowser","applyBlockDefaults","SidebarPortal","BlockSettingsSidebar","BlockSettingsSchema","messages","unknownBlock","Edit","createRef","componentDidMount","type","props","blocksConfig","blocks","blockHasOwnFocusManagement","selected","blockNode","current","focus","tab","manage","sidebarTab","editable","UNSAFE_componentWillReceiveProps","nextProps","render","disableNewBlocks","data","Block","readOnly","showEditBlocksInBabelView","schema","e","isMultipleSelection","shiftKey","ctrlKey","metaKey","onSelectBlock","id","handleKeyDown","index","variation","multiSelected","outline","intl","formatMessage","block","string","isRequired","objectOf","any","properties","bool","number","onMoveBlock","func","onDeleteBlock"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Block/Edit.jsx"],"sourcesContent":["/**\n * Edit block.\n * @module components/manage/Blocks/Block/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { applyBlockDefaults } from '@plone/volto/helpers';\n\nimport {\n  SidebarPortal,\n  BlockSettingsSidebar,\n  BlockSettingsSchema,\n} from '@plone/volto/components';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\n/**\n * Edit block class.\n * @class Edit\n * @extends Component\n */\nexport class Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    type: PropTypes.string.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    // properties is mapped to formData, so it's not connected to changes of the object\n    properties: PropTypes.objectOf(PropTypes.any).isRequired,\n    selected: PropTypes.bool.isRequired,\n    multiSelected: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n    manage: PropTypes.bool,\n    onMoveBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    manage: false,\n    editable: true,\n  };\n\n  componentDidMount() {\n    const { type } = this.props;\n    const { blocksConfig = config.blocks.blocksConfig } = this.props;\n\n    const blockHasOwnFocusManagement =\n      blocksConfig?.[type]?.['blockHasOwnFocusManagement'] || null;\n    if (\n      !blockHasOwnFocusManagement &&\n      this.props.selected &&\n      this.blockNode.current\n    ) {\n      this.blockNode.current.focus();\n    }\n    const tab = this.props.manage ? 1 : blocksConfig?.[type]?.sidebarTab || 0;\n    if (this.props.selected && this.props.editable) {\n      this.props.setSidebarTab(tab);\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { blocksConfig = config.blocks.blocksConfig } = this.props;\n    const { selected, type } = this.props;\n    const blockHasOwnFocusManagement =\n      blocksConfig?.[type]?.['blockHasOwnFocusManagement'] || null;\n    if (\n      !blockHasOwnFocusManagement &&\n      nextProps.selected &&\n      selected !== nextProps.selected &&\n      this.blockNode.current\n    ) {\n      this.blockNode.current.focus();\n    }\n    if (\n      ((!this.props.selected && nextProps.selected) ||\n        type !== nextProps.type) &&\n      this.props.editable\n    ) {\n      const tab = this.props.manage\n        ? 1\n        : blocksConfig?.[nextProps.type]?.sidebarTab || 0;\n      this.props.setSidebarTab(tab);\n    }\n  }\n\n  blockNode = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { blocksConfig = config.blocks.blocksConfig } = this.props;\n    const { editable, type } = this.props;\n\n    const disableNewBlocks = this.props.data?.disableNewBlocks;\n\n    let Block = blocksConfig?.[type]?.['edit'] || null;\n    if (\n      this.props.data?.readOnly ||\n      (!editable && !config.blocks.showEditBlocksInBabelView)\n    ) {\n      Block = blocksConfig?.[type]?.['view'] || null;\n    }\n    const schema = blocksConfig?.[type]?.['schema'] || BlockSettingsSchema;\n    const blockHasOwnFocusManagement =\n      blocksConfig?.[type]?.['blockHasOwnFocusManagement'] || null;\n\n    return (\n      <>\n        {Block !== null ? (\n          <div\n            role=\"presentation\"\n            onClick={(e) => {\n              const isMultipleSelection = e.shiftKey || e.ctrlKey || e.metaKey;\n              !this.props.selected &&\n                this.props.onSelectBlock(\n                  this.props.id,\n                  this.props.selected ? false : isMultipleSelection,\n                  e,\n                );\n            }}\n            onKeyDown={\n              !(blockHasOwnFocusManagement || disableNewBlocks)\n                ? (e) =>\n                    this.props.handleKeyDown(\n                      e,\n                      this.props.index,\n                      this.props.id,\n                      this.blockNode.current,\n                    )\n                : null\n            }\n            className={cx(`block ${type} ${this.props.data.variation ?? ''}`, {\n              selected: this.props.selected || this.props.multiSelected,\n              multiSelected: this.props.multiSelected,\n            })}\n            style={{ outline: 'none' }}\n            ref={this.blockNode}\n            // The tabIndex is required for the keyboard navigation\n            /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n            tabIndex={!blockHasOwnFocusManagement ? -1 : null}\n          >\n            <Block\n              {...this.props}\n              blockNode={this.blockNode}\n              data={applyBlockDefaults(this.props)}\n            />\n            {this.props.manage && (\n              <SidebarPortal\n                selected={this.props.selected}\n                tab=\"sidebar-settings\"\n              >\n                <BlockSettingsSidebar {...this.props} schema={schema} />\n              </SidebarPortal>\n            )}\n          </div>\n        ) : (\n          <div\n            role=\"presentation\"\n            onClick={() =>\n              !this.props.selected && this.props.onSelectBlock(this.props.id)\n            }\n            onKeyDown={\n              !(blockHasOwnFocusManagement || disableNewBlocks)\n                ? (e) =>\n                    this.props.handleKeyDown(\n                      e,\n                      this.props.index,\n                      this.props.id,\n                      this.blockNode.current,\n                    )\n                : null\n            }\n            className={cx(`block ${type}`, { selected: this.props.selected })}\n            style={{ outline: 'none' }}\n            ref={this.blockNode}\n            // The tabIndex is required for the keyboard navigation\n            tabIndex={-1}\n          >\n            {this.props.intl.formatMessage(messages.unknownBlock, {\n              block: type,\n            })}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  withObjectBrowser,\n  connect(null, { setSidebarTab }),\n)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"}]}},"sourceType":"module"}