{"ast":null,"code":"import _map from \"lodash/map\";\nimport _merge from \"lodash/merge\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Contents/ContentsRenameModal.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Contents rename modal.\n * @module components/manage/Contents/ContentsRenameModal\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nconst messages = defineMessages({\n  renameItems: {\n    \"id\": \"Rename items\",\n    \"defaultMessage\": \"Rename items\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  shortName: {\n    \"id\": \"Short name\",\n    \"defaultMessage\": \"Short name\"\n  },\n  shortNameDescription: {\n    \"id\": \"This name will be displayed in the URL.\",\n    \"defaultMessage\": \"This name will be displayed in the URL.\"\n  },\n  loadingMessage: {\n    \"id\": \"Rename Items Loading Message\",\n    \"defaultMessage\": \"Renaming items...\"\n  }\n});\n/**\n * ContentsRenameModal class.\n * @class ContentsRenameModal\n * @extends Component\n */\n\nclass ContentsRenameModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    this.props.updateContent(_map(this.props.items, item => item.url), _map(this.props.items, (item, index) => ({\n      id: data[`${index}_id`],\n      title: data[`${index}_title`]\n    })));\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return this.props.open && __jsx(ModalForm, {\n      open: this.props.open,\n      loading: this.props.request.loading,\n      loadingMessage: this.props.intl.formatMessage(messages.loadingMessage),\n      onSubmit: this.onSubmit,\n      onCancel: this.props.onCancel,\n      formData: _merge(..._map(this.props.items, (item, index) => ({\n        [`${index}_title`]: item.title,\n        [`${index}_id`]: item.id\n      }))),\n      title: this.props.intl.formatMessage(messages.renameItems),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: _concat(..._map(this.props.items, (item, index) => [`${index}_title`, `${index}_id`]))\n        }],\n        properties: _merge(..._map(this.props.items, (item, index) => ({\n          [`${index}_title`]: {\n            title: this.props.intl.formatMessage(messages.title),\n            type: 'string',\n            description: ''\n          },\n          [`${index}_id`]: {\n            title: this.props.intl.formatMessage(messages.shortName),\n            type: 'id',\n            description: this.props.intl.formatMessage(messages.shortNameDescription)\n          }\n        }))),\n        required: []\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\n_defineProperty(ContentsRenameModal, \"propTypes\", {\n  updateContent: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    url: PropTypes.string\n  })).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\n\nexport default compose(injectIntl, connect(state => ({\n  request: state.content.update\n}), {\n  updateContent\n}))(ContentsRenameModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","updateContent","ModalForm","messages","renameItems","default","title","shortName","shortNameDescription","loadingMessage","ContentsRenameModal","constructor","props","onSubmit","bind","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","data","items","item","url","index","id","render","open","intl","formatMessage","onCancel","fieldsets","fields","properties","type","description","required","func","isRequired","arrayOf","shape","string","bool","state","content","update"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Contents/ContentsRenameModal.jsx"],"sourcesContent":["/**\n * Contents rename modal.\n * @module components/manage/Contents/ContentsRenameModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, merge, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  renameItems: {\n    id: 'Rename items',\n    defaultMessage: 'Rename items',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  shortName: {\n    id: 'Short name',\n    defaultMessage: 'Short name',\n  },\n  shortNameDescription: {\n    id: 'This name will be displayed in the URL.',\n    defaultMessage: 'This name will be displayed in the URL.',\n  },\n  loadingMessage: {\n    id: 'Rename Items Loading Message',\n    defaultMessage: 'Renaming items...',\n  },\n});\n\n/**\n * ContentsRenameModal class.\n * @class ContentsRenameModal\n * @extends Component\n */\nclass ContentsRenameModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(\n      map(this.props.items, (item) => item.url),\n      map(this.props.items, (item, index) => ({\n        id: data[`${index}_id`],\n        title: data[`${index}_title`],\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={merge(\n            ...map(this.props.items, (item, index) => ({\n              [`${index}_title`]: item.title,\n              [`${index}_id`]: item.id,\n            })),\n          )}\n          title={this.props.intl.formatMessage(messages.renameItems)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: concat(\n                  ...map(this.props.items, (item, index) => [\n                    `${index}_title`,\n                    `${index}_id`,\n                  ]),\n                ),\n              },\n            ],\n            properties: merge(\n              ...map(this.props.items, (item, index) => ({\n                [`${index}_title`]: {\n                  title: this.props.intl.formatMessage(messages.title),\n                  type: 'string',\n                  description: '',\n                },\n                [`${index}_id`]: {\n                  title: this.props.intl.formatMessage(messages.shortName),\n                  type: 'id',\n                  description: this.props.intl.formatMessage(\n                    messages.shortNameDescription,\n                  ),\n                },\n              })),\n            ),\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.update,\n    }),\n    { updateContent },\n  ),\n)(ContentsRenameModal);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;EAC9BK,WAAW;IAAA;IAAA;EAAA,CADmB;EAK9BC,OAAO;IAAA;IAAA;EAAA,CALuB;EAS9BC,KAAK;IAAA;IAAA;EAAA,CATyB;EAa9BC,SAAS;IAAA;IAAA;EAAA,CAbqB;EAiB9BC,oBAAoB;IAAA;IAAA;EAAA,CAjBU;EAqB9BC,cAAc;IAAA;IAAA;EAAA;AArBgB,CAAD,CAA/B;AA2BA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAN,SAAkCf,SAAlC,CAA4C;EAC1C;AACF;AACA;AACA;AACA;;EAmBE;AACF;AACA;AACA;AACA;AACA;EACEgB,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,gCAAgC,CAACC,SAAD,EAAY;IAC1C,IAAI,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,OAAnB,IAA8BF,SAAS,CAACC,OAAV,CAAkBE,MAApD,EAA4D;MAC1D,KAAKP,KAAL,CAAWQ,IAAX;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEP,QAAQ,CAACQ,IAAD,EAAO;IACb,KAAKT,KAAL,CAAWX,aAAX,CACE,KAAI,KAAKW,KAAL,CAAWU,KAAf,EAAuBC,IAAD,IAAUA,IAAI,CAACC,GAArC,CADF,EAEE,KAAI,KAAKZ,KAAL,CAAWU,KAAf,EAAsB,CAACC,IAAD,EAAOE,KAAP,MAAkB;MACtCC,EAAE,EAAEL,IAAI,CAAE,GAAEI,KAAM,KAAV,CAD8B;MAEtCnB,KAAK,EAAEe,IAAI,CAAE,GAAEI,KAAM,QAAV;IAF2B,CAAlB,CAAtB,CAFF;EAOD;EAED;AACF;AACA;AACA;AACA;;;EACEE,MAAM,GAAG;IACP,OACE,KAAKf,KAAL,CAAWgB,IAAX,IACE,MAAC,SAAD;MACE,IAAI,EAAE,KAAKhB,KAAL,CAAWgB,IADnB;MAEE,OAAO,EAAE,KAAKhB,KAAL,CAAWK,OAAX,CAAmBC,OAF9B;MAGE,cAAc,EAAE,KAAKN,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CACd3B,QAAQ,CAACM,cADK,CAHlB;MAME,QAAQ,EAAE,KAAKI,QANjB;MAOE,QAAQ,EAAE,KAAKD,KAAL,CAAWmB,QAPvB;MAQE,QAAQ,EAAE,OACR,GAAG,KAAI,KAAKnB,KAAL,CAAWU,KAAf,EAAsB,CAACC,IAAD,EAAOE,KAAP,MAAkB;QACzC,CAAE,GAAEA,KAAM,QAAV,GAAoBF,IAAI,CAACjB,KADgB;QAEzC,CAAE,GAAEmB,KAAM,KAAV,GAAiBF,IAAI,CAACG;MAFmB,CAAlB,CAAtB,CADK,CARZ;MAcE,KAAK,EAAE,KAAKd,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B3B,QAAQ,CAACC,WAAvC,CAdT;MAeE,MAAM,EAAE;QACN4B,SAAS,EAAE,CACT;UACEN,EAAE,EAAE,SADN;UAEEpB,KAAK,EAAE,KAAKM,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B3B,QAAQ,CAACE,OAAvC,CAFT;UAGE4B,MAAM,EAAE,QACN,GAAG,KAAI,KAAKrB,KAAL,CAAWU,KAAf,EAAsB,CAACC,IAAD,EAAOE,KAAP,KAAiB,CACvC,GAAEA,KAAM,QAD+B,EAEvC,GAAEA,KAAM,KAF+B,CAAvC,CADG;QAHV,CADS,CADL;QAaNS,UAAU,EAAE,OACV,GAAG,KAAI,KAAKtB,KAAL,CAAWU,KAAf,EAAsB,CAACC,IAAD,EAAOE,KAAP,MAAkB;UACzC,CAAE,GAAEA,KAAM,QAAV,GAAoB;YAClBnB,KAAK,EAAE,KAAKM,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B3B,QAAQ,CAACG,KAAvC,CADW;YAElB6B,IAAI,EAAE,QAFY;YAGlBC,WAAW,EAAE;UAHK,CADqB;UAMzC,CAAE,GAAEX,KAAM,KAAV,GAAiB;YACfnB,KAAK,EAAE,KAAKM,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CAA8B3B,QAAQ,CAACI,SAAvC,CADQ;YAEf4B,IAAI,EAAE,IAFS;YAGfC,WAAW,EAAE,KAAKxB,KAAL,CAAWiB,IAAX,CAAgBC,aAAhB,CACX3B,QAAQ,CAACK,oBADE;UAHE;QANwB,CAAlB,CAAtB,CADO,CAbN;QA6BN6B,QAAQ,EAAE;MA7BJ,CAfV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAFJ;EAmDD;;AAxHyC;;gBAAtC3B,mB,eAMe;EACjBT,aAAa,EAAEL,SAAS,CAAC0C,IAAV,CAAeC,UADb;EAEjBjB,KAAK,EAAE1B,SAAS,CAAC4C,OAAV,CACL5C,SAAS,CAAC6C,KAAV,CAAgB;IACdf,EAAE,EAAE9B,SAAS,CAAC8C,MADA;IAEdpC,KAAK,EAAEV,SAAS,CAAC8C,MAFH;IAGdlB,GAAG,EAAE5B,SAAS,CAAC8C;EAHD,CAAhB,CADK,EAMLH,UARe;EASjBtB,OAAO,EAAErB,SAAS,CAAC6C,KAAV,CAAgB;IACvBvB,OAAO,EAAEtB,SAAS,CAAC+C,IADI;IAEvBxB,MAAM,EAAEvB,SAAS,CAAC+C;EAFK,CAAhB,EAGNJ,UAZc;EAajBX,IAAI,EAAEhC,SAAS,CAAC+C,IAAV,CAAeJ,UAbJ;EAcjBnB,IAAI,EAAExB,SAAS,CAAC0C,IAAV,CAAeC,UAdJ;EAejBR,QAAQ,EAAEnC,SAAS,CAAC0C,IAAV,CAAeC;AAfR,C;;AAqHrB,eAAezC,OAAO,CACpBE,UADoB,EAEpBH,OAAO,CACJ+C,KAAD,KAAY;EACV3B,OAAO,EAAE2B,KAAK,CAACC,OAAN,CAAcC;AADb,CAAZ,CADK,EAIL;EAAE7C;AAAF,CAJK,CAFa,CAAP,CAQbS,mBARa,CAAf"},"metadata":{"react-intl":{"messages":[{"id":"Rename items","defaultMessage":"Rename items"},{"id":"Default","defaultMessage":"Default"},{"id":"Title","defaultMessage":"Title"},{"id":"Short name","defaultMessage":"Short name"},{"id":"This name will be displayed in the URL.","defaultMessage":"This name will be displayed in the URL."},{"id":"Rename Items Loading Message","defaultMessage":"Renaming items..."}]}},"sourceType":"module"}