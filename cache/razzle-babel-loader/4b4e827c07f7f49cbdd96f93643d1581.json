{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { defineMessages } from 'react-intl';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nimport { defaultStyleSchema } from '@plone/volto/components/manage/Blocks/Block/StylesSchema';\nconst messages = defineMessages({\n  variation: {\n    \"id\": \"Variation\",\n    \"defaultMessage\": \"Variation\"\n  },\n  styling: {\n    \"id\": \"Styling\",\n    \"defaultMessage\": \"Styling\"\n  }\n});\n/**\n * Sets the field name as first field in schema\n */\n\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\n\n\nfunction getBlocksConfig(props) {\n  const {\n    blocks\n  } = config;\n\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n\n  return blocks === null || blocks === void 0 ? void 0 : blocks.blocksConfig;\n}\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\n\n\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description,\n  insertFieldToOrder = _addField\n}) => {\n  const _ = intl.formatMessage;\n  insertFieldToOrder(schema, name);\n  const hasDefaultExtension = (items === null || items === void 0 ? void 0 : items.findIndex(({\n    isDefault\n  }) => isDefault)) > -1;\n\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n\n  schema.properties[name] = {\n    title: _(title),\n    choices: items === null || items === void 0 ? void 0 : items.map(({\n      id,\n      title\n    }) => [id, _({\n      id: title,\n      defaultMessage: title\n    })]),\n    noValueOption: false,\n    default: hasDefaultExtension ? items === null || items === void 0 ? void 0 : items.find(item => item.isDefault).id : null\n  };\n  return schema;\n};\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\n\nexport const withBlockSchemaEnhancer = (FormComponent, extensionName = 'vendor', insertFieldToOrder = _addField) => _ref => {\n  var _blocksConfig$blockTy, _blocksConfig$blockTy2, _extensionConfig$item, _extensionConfig$item2, _activeItem, _blocksConfig$blockTy3, _extensionConfig$item3;\n\n  let props = Object.assign({}, _ref);\n  const {\n    formData,\n    schema: originalSchema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const extensionConfig = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy = blocksConfig[blockType]) === null || _blocksConfig$blockTy === void 0 ? void 0 : (_blocksConfig$blockTy2 = _blocksConfig$blockTy.extensions) === null || _blocksConfig$blockTy2 === void 0 ? void 0 : _blocksConfig$blockTy2[extensionName];\n  if (!extensionConfig) return __jsx(FormComponent, _extends({}, props, {\n    schema: originalSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 12\n    }\n  }));\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionName];\n  let activeItem = (_extensionConfig$item = extensionConfig.items) === null || _extensionConfig$item === void 0 ? void 0 : _extensionConfig$item.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = (_extensionConfig$item2 = extensionConfig.items) === null || _extensionConfig$item2 === void 0 ? void 0 : _extensionConfig$item2.find(item => item.isDefault);\n  const schemaEnhancer = // For the main \"variation\" of blocks, allow simply passing a\n  // schemaEnhancer in the block configuration\n  ((_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer']) || extensionName === 'variation' && (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy3 = blocksConfig[blockType]) === null || _blocksConfig$blockTy3 === void 0 ? void 0 : _blocksConfig$blockTy3.schemaEnhancer);\n  let schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl\n  }) : cloneDeepSchema(originalSchema);\n  const {\n    title = messages.variation,\n    description\n  } = extensionConfig;\n\n  if (((_extensionConfig$item3 = extensionConfig.items) === null || _extensionConfig$item3 === void 0 ? void 0 : _extensionConfig$item3.length) > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder\n    });\n  }\n\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 10\n    }\n  }));\n};\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\n\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig\n}) => {\n  var _blocksConfig$blockTy4, _activeItem2, _blocksConfig$blockTy6;\n\n  let schema, schemaEnhancer;\n  const blockType = formData['@type'];\n  const variations = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy4 = blocksConfig[blockType]) === null || _blocksConfig$blockTy4 === void 0 ? void 0 : _blocksConfig$blockTy4.variations) || [];\n\n  if (variations.length === 0) {\n    var _blocksConfig$blockTy5;\n\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy5 = blocksConfig[blockType]) === null || _blocksConfig$blockTy5 === void 0 ? void 0 : _blocksConfig$blockTy5.schemaEnhancer;\n    if (schemaEnhancer) schema = schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData,\n      intl\n    });\n    return schema || originalSchema;\n  }\n\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n  let activeItem = variations.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find(item => item.isDefault);\n  schemaEnhancer = (_activeItem2 = activeItem) === null || _activeItem2 === void 0 ? void 0 : _activeItem2['schemaEnhancer'];\n  schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl\n  }) : cloneDeepSchema(originalSchema); // Finalize the schema with a schemaEnhancer in the block config;\n\n  schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy6 = blocksConfig[blockType]) === null || _blocksConfig$blockTy6 === void 0 ? void 0 : _blocksConfig$blockTy6.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({\n    schema,\n    formData,\n    intl\n  });\n  return schema || originalSchema;\n};\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\n\nexport const withVariationSchemaEnhancer = FormComponent => props => {\n  var _blocksConfig$blockTy7;\n\n  const {\n    formData,\n    schema: originalSchema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const variations = ((_blocksConfig$blockTy7 = blocksConfig[blockType]) === null || _blocksConfig$blockTy7 === void 0 ? void 0 : _blocksConfig$blockTy7.variations) || [];\n  let schema = applySchemaEnhancer({\n    schema: originalSchema,\n    formData,\n    intl\n  });\n\n  if (variations.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField\n    });\n  }\n\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 10\n    }\n  }));\n};\n/**\n * A HOC that enhances the incoming schema prop with styling widget support\n * by:\n *\n * - adds the variation selection input (as a choice widget)\n */\n\nexport const withStylingSchemaEnhancer = FormComponent => props => {\n  var _blocksConfig$blockTy8;\n\n  const {\n    formData,\n    schema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const enableStyling = (_blocksConfig$blockTy8 = blocksConfig[blockType]) === null || _blocksConfig$blockTy8 === void 0 ? void 0 : _blocksConfig$blockTy8.enableStyling;\n\n  if (enableStyling) {\n    var _blocksConfig$blockTy9;\n\n    const stylesSchema = ((_blocksConfig$blockTy9 = blocksConfig[blockType]) === null || _blocksConfig$blockTy9 === void 0 ? void 0 : _blocksConfig$blockTy9.stylesSchema) || defaultStyleSchema;\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles']\n    });\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: stylesSchema({\n        schema: defaultStyleSchema({\n          formData,\n          intl\n        }),\n        formData,\n        intl\n      })\n    };\n  }\n\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 10\n    }\n  }));\n};","map":{"version":3,"names":["defineMessages","React","useIntl","config","cloneDeepSchema","defaultStyleSchema","messages","variation","styling","_addField","schema","name","fieldsets","fields","indexOf","unshift","getBlocksConfig","props","blocks","blocksConfig","addExtensionFieldToSchema","items","intl","title","description","insertFieldToOrder","_","formatMessage","hasDefaultExtension","findIndex","isDefault","console","warn","properties","choices","map","id","defaultMessage","noValueOption","default","find","item","withBlockSchemaEnhancer","FormComponent","extensionName","formData","originalSchema","blockType","extensionConfig","extensions","activeItemName","activeItem","schemaEnhancer","length","applySchemaEnhancer","variations","withVariationSchemaEnhancer","withStylingSchemaEnhancer","enableStyling","stylesSchema","push","styles","widget"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js"],"sourcesContent":["import { defineMessages } from 'react-intl';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nimport { defaultStyleSchema } from '@plone/volto/components/manage/Blocks/Block/StylesSchema';\n\nconst messages = defineMessages({\n  variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n  styling: {\n    id: 'Styling',\n    defaultMessage: 'Styling',\n  },\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const { blocks } = config;\n\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n\n  return blocks?.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description,\n  insertFieldToOrder = _addField,\n}) => {\n  const _ = intl.formatMessage;\n\n  insertFieldToOrder(schema, name);\n\n  const hasDefaultExtension =\n    items?.findIndex(({ isDefault }) => isDefault) > -1;\n\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n\n  schema.properties[name] = {\n    title: _(title),\n    choices: items?.map(({ id, title }) => [\n      id,\n      _({ id: title, defaultMessage: title }),\n    ]),\n    noValueOption: false,\n    default: hasDefaultExtension\n      ? items?.find((item) => item.isDefault).id\n      : null,\n  };\n\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = (\n  FormComponent,\n  extensionName = 'vendor',\n  insertFieldToOrder = _addField,\n) => ({ ...props }) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const extensionConfig =\n    blocksConfig?.[blockType]?.extensions?.[extensionName];\n\n  if (!extensionConfig)\n    return <FormComponent {...props} schema={originalSchema} />;\n\n  const activeItemName = formData?.[extensionName];\n  let activeItem = extensionConfig.items?.find(\n    (item) => item.id === activeItemName,\n  );\n  if (!activeItem)\n    activeItem = extensionConfig.items?.find((item) => item.isDefault);\n\n  const schemaEnhancer =\n    // For the main \"variation\" of blocks, allow simply passing a\n    // schemaEnhancer in the block configuration\n    activeItem?.['schemaEnhancer'] ||\n    (extensionName === 'variation' &&\n      blocksConfig?.[blockType]?.schemaEnhancer);\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  const { title = messages.variation, description } = extensionConfig;\n\n  if (extensionConfig.items?.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig,\n}) => {\n  let schema, schemaEnhancer;\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig?.[blockType]?.variations || [];\n\n  if (variations.length === 0) {\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n\n    if (schemaEnhancer)\n      schema = schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      });\n    return schema || originalSchema;\n  }\n\n  const activeItemName = formData?.variation;\n  let activeItem = variations.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n  schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({ schema, formData, intl });\n\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig[blockType]?.variations || [];\n\n  let schema = applySchemaEnhancer({ schema: originalSchema, formData, intl });\n\n  if (variations.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with styling widget support\n * by:\n *\n * - adds the variation selection input (as a choice widget)\n */\nexport const withStylingSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const enableStyling = blocksConfig[blockType]?.enableStyling;\n\n  if (enableStyling) {\n    const stylesSchema =\n      blocksConfig[blockType]?.stylesSchema || defaultStyleSchema;\n\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles'],\n    });\n\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: stylesSchema({\n        schema: defaultStyleSchema({ formData, intl }),\n        formData,\n        intl,\n      }),\n    };\n  }\n  return <FormComponent {...props} schema={schema} />;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Variation","defaultMessage":"Variation"},{"id":"Styling","defaultMessage":"Styling"}]}},"sourceType":"module"}