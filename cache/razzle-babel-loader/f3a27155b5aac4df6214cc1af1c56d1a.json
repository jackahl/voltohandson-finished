{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Icon, Toolbar, Form, Toast } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { Helmet } from '@plone/volto/helpers';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\nconst messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  sortBy: {\n    \"id\": \"Sort By\",\n    \"defaultMessage\": \"Sort by\"\n  },\n  sorted: {\n    \"id\": \"Sorted\",\n    \"defaultMessage\": \"Sorted\"\n  },\n  unsorted: {\n    \"id\": \"Unsorted\",\n    \"defaultMessage\": \"Unsorted\"\n  },\n  sortByDescription: {\n    \"id\": \"Sort transactions by User-Name, Path or Date\",\n    \"defaultMessage\": \"Sort transactions by User-Name, Path or Date\"\n  },\n  failedToUndoTransactions: {\n    \"id\": \"Failed To Undo Transactions\",\n    \"defaultMessage\": \"Failed to undo transactions\"\n  },\n  successfullyUndoneTransactions: {\n    \"id\": \"Successfully Undone Transactions\",\n    \"defaultMessage\": \"Successfully undone transactions\"\n  },\n  transactionsHaveBeenSorted: {\n    \"id\": \"Transactions Have Been Sorted\",\n    \"defaultMessage\": \"Transactions have been sorted\"\n  },\n  transactionsHaveBeenUnsorted: {\n    \"id\": \"Transactions Have Been Unsorted\",\n    \"defaultMessage\": \"Transactions have been unsorted\"\n  },\n  noTransactionsSelected: {\n    \"id\": \"No Transactions Selected\",\n    \"defaultMessage\": \"No transactions selected\"\n  },\n  noTransactionsSelectedToDoUndo: {\n    \"id\": \"No Transactions Selected To Do Undo\",\n    \"defaultMessage\": \"No transactions selected to do undo\"\n  }\n});\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\n\nclass UndoControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons = this.handleNotSortedNextPrevButtons.bind(this);\n    this.handleSortedNextPrevButtons = this.handleSortedNextPrevButtons.bind(this);\n    this.checkTransactionsUndoneStatus = this.checkTransactionsUndoneStatus.bind(this);\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.props.getTransactions();\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false\n      });\n    } else {\n      this.setState({\n        isTransactionsNotFound: true\n      });\n    }\n  }\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.unsorted),\n        content: this.props.intl.formatMessage(messages.transactionsHaveBeenUnsorted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable\n    });\n  }\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n\n\n  onSelect(data) {\n    if (data !== null && data.sortingTypes !== null && this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()) {\n      return;\n    }\n\n    let sortType = data !== null && data.sortingTypes || 'no value';\n\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({\n        isSortingTypeSelected: true\n      });\n      sortType.toLowerCase() === 'user name' && this.setState({\n        sortType: 'user name'\n      });\n      sortType.toLowerCase() === 'date' && this.setState({\n        sortType: 'date'\n      });\n      sortType.toLowerCase() === 'path' && this.setState({\n        sortType: 'path'\n      });\n    } else {\n      this.onCancel();\n    }\n  }\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n\n\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    sortType.toLowerCase() === 'user name' && (value = data.sortByUsername) || sortType.toLowerCase() === 'path' && (value = data.sortByPath) || sortType.toLowerCase() === 'date' && (value = data.sortByDate) || (value = undefined);\n\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach(element => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (element.username.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach(element => {\n          if (element.id.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay + MSInADay - 1;\n        let startTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay;\n        this.props.transactions.forEach(element => {\n          if (endTimeOfSortingDateInMS >= Date.parse(element.time) && Date.parse(element.time) >= startTimeOfSortingDateInMS) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.sorted),\n        content: this.props.intl.formatMessage(messages.transactionsHaveBeenSorted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      this.setState({\n        isEmptyInputForSorting: true\n      });\n    }\n  }\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n\n\n  onUndo() {\n    let transactionsSelected = false;\n\n    let undoTransactionsIds = _map(this.props.transactions.slice(0, this.props.transactions.length), transaction => {\n      if (document.getElementById(transaction.id) !== null && document.getElementById(transaction.id).firstElementChild.firstElementChild.firstElementChild.checked) {\n        transactionsSelected = true;\n        return transaction.id;\n      }\n\n      return '';\n    });\n\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.noTransactionsSelected),\n        content: this.props.intl.formatMessage(messages.noTransactionsSelectedToDoUndo),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    Array.from(document.getElementsByClassName('transactions-checkboxes')).forEach(element => {\n      element.firstElementChild.checked = false;\n    });\n  }\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n\n\n  onPrev() {\n    0 < this.state.lowerIndex && this.setState({\n      upperIndex: this.state.lowerIndex,\n      lowerIndex: this.state.lowerIndex - this.state.defaultTransactionsLenInTable\n    });\n  }\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n\n\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex && this.setState({\n      lowerIndex: this.state.upperIndex,\n      upperIndex: this.state.upperIndex + this.state.defaultTransactionsLenInTable\n    });\n  }\n  /**\n   * Handle next and prev buttons visiblity when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n\n\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length && this.state.showNextButton && this.setState({\n      showNextButton: false\n    });\n    this.state.upperIndex < this.state.sortedTransactions.length && !this.state.showNextButton && this.setState({\n      showNextButton: true\n    });\n    this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n      showPrevButton: false\n    });\n    this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n      showPrevButton: true\n    });\n  }\n  /**\n   * Handle next and prev buttons visiblity when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n\n\n  handleNotSortedNextPrevButtons() {\n    var _this$props$transacti, _this$props$transacti2;\n\n    this.state.upperIndex >= ((_this$props$transacti = this.props.transactions) === null || _this$props$transacti === void 0 ? void 0 : _this$props$transacti.length) && this.state.showNextButton && this.setState({\n      showNextButton: false\n    });\n    this.state.upperIndex < ((_this$props$transacti2 = this.props.transactions) === null || _this$props$transacti2 === void 0 ? void 0 : _this$props$transacti2.length) && !this.state.showNextButton && this.setState({\n      showNextButton: true\n    });\n    this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n      showPrevButton: false\n    });\n    this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n      showPrevButton: true\n    });\n  }\n  /**\n   * Handle next, prev buttons and table visiblity\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n\n\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      var _this$props$transacti3, _this$props$transacti4;\n\n      ((_this$props$transacti3 = this.props.transactions) === null || _this$props$transacti3 === void 0 ? void 0 : _this$props$transacti3.length) > 0 && this.state.isTransactionsNotFound && this.setState({\n        isTransactionsNotFound: false\n      });\n      ((_this$props$transacti4 = this.props.transactions) === null || _this$props$transacti4 === void 0 ? void 0 : _this$props$transacti4.length) <= 0 && !this.state.isTransactionsNotFound && this.setState({\n        isTransactionsNotFound: true\n      });\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n\n\n  checkTransactionsUndoneStatus() {\n    if (this.props.revertRequest.error && this.props.revertRequest.error !== null && this.state.isClickedOnUndoButton) {\n      this.setState({\n        isClickedOnUndoButton: false\n      });\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: this.props.intl.formatMessage(messages.failedToUndoTransactions),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 9\n        }\n      }));\n    } else if (this.props.revertRequest.error === null && this.state.isClickedOnUndoButton) {\n      this.setState({\n        isClickedOnUndoButton: false\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.successfullyUndoneTransactions),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$transacti5, _this$props$transacti6;\n\n    const transactionsRange = this.state.sortedTransactions.length > 0 && this.state.sortedTransactions.slice(this.state.lowerIndex, this.state.upperIndex) || ((_this$props$transacti5 = this.props.transactions) === null || _this$props$transacti5 === void 0 ? void 0 : _this$props$transacti5.slice(this.state.lowerIndex, this.state.upperIndex));\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n    return __jsx(Container, {\n      id: \"page-undo\",\n      className: \"controlpanel-undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: \"Undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Undo Controlpanel\",\n      defaultMessage: \"Undo Controlpanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }\n    }, ((_this$props$transacti6 = this.props.transactions) === null || _this$props$transacti6 === void 0 ? void 0 : _this$props$transacti6.length) > 0 && __jsx(Form, {\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: this.state.isSortingTypeSelected ? ['sortingTypes', this.state.sortType.toLowerCase() === 'user name' && 'sortByUsername' || this.state.sortType.toLowerCase() === 'path' && 'sortByPath' || this.state.sortType.toLowerCase() === 'date' && 'sortByDate'] : ['sortingTypes']\n        }],\n        properties: {\n          sortingTypes: {\n            title: this.props.intl.formatMessage(messages.sortBy),\n            description: this.props.intl.formatMessage(messages.sortByDescription),\n            type: 'string',\n            choices: _map(['User Name', 'Path', 'Date'], type => [type, type])\n          },\n          sortByUsername: {\n            title: `Enter Username`,\n            type: 'string'\n          },\n          sortByPath: {\n            title: `Enter Path`,\n            type: 'string'\n          },\n          sortByDate: {\n            title: `Enter Date and Time`,\n            type: 'date'\n          }\n        },\n        required: []\n      },\n      error: this.state.isEmptyInputForSorting ? {\n        message: 'Please enter any input to perform sorting'\n      } : undefined,\n      onChangeFormData: this.onSelect,\n      onSubmit: this.state.isSortingTypeSelected ? this.onSort : undefined,\n      onCancel: this.state.isSortingTypeSelected ? this.onCancel : undefined,\n      resetOnCancel: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 15\n      }\n    })), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Transactions\",\n      defaultMessage: \"Transactions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 15\n      }\n    })), this.state.isTransactionsNotFound ? __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"No Transactions Found\",\n      defaultMessage: \"No transactions found\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 17\n      }\n    })) : __jsx(Table, {\n      selectable: true,\n      fixed: true,\n      celled: true,\n      compact: true,\n      singleLine: true,\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Transactions Checkbox\",\n      defaultMessage: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"What\",\n      defaultMessage: \"What\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Who\",\n      defaultMessage: \"Who\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"When\",\n      defaultMessage: \"When\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Note\",\n      defaultMessage: \"Note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 21\n      }\n    }))), __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }\n    }, _map(transactionsRange, transaction => __jsx(Table.Row, {\n      id: transaction.id,\n      key: transaction.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 21\n      }\n    }, __jsx(Table.Cell, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 23\n      }\n    }, __jsx(Input, {\n      type: \"checkbox\",\n      className: \"transactions-checkboxes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 25\n      }\n    })), __jsx(Table.Cell, {\n      width: 3,\n      title: [transaction.description].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 23\n      }\n    }, transaction.description), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 23\n      }\n    }, transaction.username ? transaction.username : 'Zope'), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 23\n      }\n    }, transaction.time), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 23\n      }\n    }, transaction.description.includes('Undo') ? 'Undone' : '')))), __jsx(Table.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      colSpan: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 21\n      }\n    }, __jsx(Menu, {\n      pagination: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 23\n      }\n    }, __jsx(Menu.Item, {\n      as: \"a\",\n      id: \"prev-button\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 25\n      }\n    }, this.state.showPrevButton ? __jsx(Icon, {\n      onClick: this.onPrev,\n      name: prevIcon,\n      title: \"Prev\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 29\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        width: '36px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 29\n      }\n    })), __jsx(Menu.Item, {\n      as: \"a\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: undoSVG,\n      id: \"undo-button\",\n      className: \"circled\",\n      size: \"30px\",\n      title: this.props.intl.formatMessage(messages.undo),\n      onClick: this.onUndo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 27\n      }\n    })), __jsx(Menu.Item, {\n      as: \"a\",\n      id: \"next-button\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 25\n      }\n    }, this.state.showNextButton ? __jsx(Icon, {\n      onClick: this.onNext,\n      name: nextIcon,\n      title: \"Next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 29\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        width: '36px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 29\n      }\n    }))))))))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        \"aria-label\": this.props.intl.formatMessage(messages.back),\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(UndoControlpanel, \"propTypes\", {\n  getTransactions: PropTypes.func.isRequired,\n  revertTransactions: PropTypes.func.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string,\n    id: PropTypes.string,\n    size: PropTypes.number,\n    time: PropTypes.string,\n    username: PropTypes.string\n  })),\n  revertRequest: PropTypes.shape({\n    loaded: PropTypes.bool,\n    loading: PropTypes.bool\n  }).isRequired\n});\n\nexport default compose(injectIntl, connect((state, props) => ({\n  pathname: props.location.pathname,\n  transactions: state.transactions.transactions_recieved,\n  revertRequest: state.transactions.revert\n}), {\n  getTransactions,\n  revertTransactions\n}))(UndoControlpanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Container","Segment","Table","Menu","Input","FormattedMessage","defineMessages","injectIntl","Icon","Toolbar","Form","Toast","backSVG","Helmet","nextIcon","prevIcon","undoSVG","getTransactions","revertTransactions","toast","messages","success","error","undo","back","default","sortBy","sorted","unsorted","sortByDescription","failedToUndoTransactions","successfullyUndoneTransactions","transactionsHaveBeenSorted","transactionsHaveBeenUnsorted","noTransactionsSelected","noTransactionsSelectedToDoUndo","UndoControlpanel","constructor","props","state","isClient","sortType","lowerIndex","upperIndex","defaultTransactionsLenInTable","isSortingTypeSelected","sortedTransactions","isEmptyInputForSorting","isTransactionsNotFound","isClickedOnUndoButton","showPrevButton","showNextButton","onCancel","bind","onSort","onSelect","onPrev","onNext","onUndo","handleTableVisiblity","handleNotSortedNextPrevButtons","handleSortedNextPrevButtons","checkTransactionsUndoneStatus","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","revertRequest","loading","loaded","setSortedTransactions","length","info","intl","formatMessage","data","sortingTypes","toLowerCase","value","sortByUsername","sortByPath","sortByDate","undefined","transactions","forEach","element","trim","username","push","includes","id","MSInADay","sortingTimeInMS","Date","parse","endTimeOfSortingDateInMS","startTimeOfSortingDateInMS","time","transactionsSelected","undoTransactionsIds","slice","transaction","document","getElementById","firstElementChild","checked","Array","from","getElementsByClassName","render","transactionsRange","fieldsets","title","fields","properties","description","type","choices","required","message","join","width","pathname","func","isRequired","arrayOf","shape","string","size","number","bool","location","transactions_recieved","revert"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Icon, Toolbar, Form, Toast } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { map } from 'lodash';\nimport { Helmet } from '@plone/volto/helpers';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  sortBy: {\n    id: 'Sort By',\n    defaultMessage: 'Sort by',\n  },\n  sorted: {\n    id: 'Sorted',\n    defaultMessage: 'Sorted',\n  },\n  unsorted: {\n    id: 'Unsorted',\n    defaultMessage: 'Unsorted',\n  },\n  sortByDescription: {\n    id: 'Sort transactions by User-Name, Path or Date',\n    defaultMessage: 'Sort transactions by User-Name, Path or Date',\n  },\n  failedToUndoTransactions: {\n    id: 'Failed To Undo Transactions',\n    defaultMessage: 'Failed to undo transactions',\n  },\n  successfullyUndoneTransactions: {\n    id: 'Successfully Undone Transactions',\n    defaultMessage: 'Successfully undone transactions',\n  },\n  transactionsHaveBeenSorted: {\n    id: 'Transactions Have Been Sorted',\n    defaultMessage: 'Transactions have been sorted',\n  },\n  transactionsHaveBeenUnsorted: {\n    id: 'Transactions Have Been Unsorted',\n    defaultMessage: 'Transactions have been unsorted',\n  },\n  noTransactionsSelected: {\n    id: 'No Transactions Selected',\n    defaultMessage: 'No transactions selected',\n  },\n  noTransactionsSelectedToDoUndo: {\n    id: 'No Transactions Selected To Do Undo',\n    defaultMessage: 'No transactions selected to do undo',\n  },\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nclass UndoControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    revertTransactions: PropTypes.func.isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        description: PropTypes.string,\n        id: PropTypes.string,\n        size: PropTypes.number,\n        time: PropTypes.string,\n        username: PropTypes.string,\n      }),\n    ),\n    revertRequest: PropTypes.shape({\n      loaded: PropTypes.bool,\n      loading: PropTypes.bool,\n    }).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons = this.handleNotSortedNextPrevButtons.bind(\n      this,\n    );\n    this.handleSortedNextPrevButtons = this.handleSortedNextPrevButtons.bind(\n      this,\n    );\n    this.checkTransactionsUndoneStatus = this.checkTransactionsUndoneStatus.bind(\n      this,\n    );\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.props.getTransactions();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false,\n      });\n    } else {\n      this.setState({ isTransactionsNotFound: true });\n    }\n  }\n\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.unsorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenUnsorted,\n          )}\n        />,\n      );\n    }\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable,\n    });\n  }\n\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSelect(data) {\n    if (\n      data !== null &&\n      data.sortingTypes !== null &&\n      this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()\n    ) {\n      return;\n    }\n    let sortType = (data !== null && data.sortingTypes) || 'no value';\n\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({ isSortingTypeSelected: true });\n      sortType.toLowerCase() === 'user name' &&\n        this.setState({ sortType: 'user name' });\n      sortType.toLowerCase() === 'date' && this.setState({ sortType: 'date' });\n      sortType.toLowerCase() === 'path' && this.setState({ sortType: 'path' });\n    } else {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    (sortType.toLowerCase() === 'user name' && (value = data.sortByUsername)) ||\n      (sortType.toLowerCase() === 'path' && (value = data.sortByPath)) ||\n      (sortType.toLowerCase() === 'date' && (value = data.sortByDate)) ||\n      (value = undefined);\n\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach((element) => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (\n            element.username\n              .trim()\n              .toLowerCase()\n              .includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach((element) => {\n          if (\n            element.id.trim().toLowerCase().includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay) + MSInADay - 1;\n        let startTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay);\n\n        this.props.transactions.forEach((element) => {\n          if (\n            endTimeOfSortingDateInMS >= Date.parse(element.time) &&\n            Date.parse(element.time) >= startTimeOfSortingDateInMS\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.sorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenSorted,\n          )}\n        />,\n      );\n    } else {\n      this.setState({ isEmptyInputForSorting: true });\n    }\n  }\n\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n  onUndo() {\n    let transactionsSelected = false;\n    let undoTransactionsIds = map(\n      this.props.transactions.slice(0, this.props.transactions.length),\n      (transaction) => {\n        if (\n          document.getElementById(transaction.id) !== null &&\n          document.getElementById(transaction.id).firstElementChild\n            .firstElementChild.firstElementChild.checked\n        ) {\n          transactionsSelected = true;\n          return transaction.id;\n        }\n        return '';\n      },\n    );\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true,\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.noTransactionsSelected)}\n          content={this.props.intl.formatMessage(\n            messages.noTransactionsSelectedToDoUndo,\n          )}\n        />,\n      );\n    }\n\n    Array.from(\n      document.getElementsByClassName('transactions-checkboxes'),\n    ).forEach((element) => {\n      element.firstElementChild.checked = false;\n    });\n  }\n\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n  onPrev() {\n    0 < this.state.lowerIndex &&\n      this.setState({\n        upperIndex: this.state.lowerIndex,\n        lowerIndex:\n          this.state.lowerIndex - this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex &&\n      this.setState({\n        lowerIndex: this.state.upperIndex,\n        upperIndex:\n          this.state.upperIndex + this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.state.sortedTransactions.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleNotSortedNextPrevButtons() {\n    this.state.upperIndex >= this.props.transactions?.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.props.transactions?.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next, prev buttons and table visiblity\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      this.props.transactions?.length > 0 &&\n        this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: false });\n\n      this.props.transactions?.length <= 0 &&\n        !this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: true });\n\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n  checkTransactionsUndoneStatus() {\n    if (\n      this.props.revertRequest.error &&\n      this.props.revertRequest.error !== null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={this.props.intl.formatMessage(\n            messages.failedToUndoTransactions,\n          )}\n        />,\n      );\n    } else if (\n      this.props.revertRequest.error === null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(\n            messages.successfullyUndoneTransactions,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const transactionsRange =\n      (this.state.sortedTransactions.length > 0 &&\n        this.state.sortedTransactions.slice(\n          this.state.lowerIndex,\n          this.state.upperIndex,\n        )) ||\n      this.props.transactions?.slice(\n        this.state.lowerIndex,\n        this.state.upperIndex,\n      );\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n\n    return (\n      <Container id=\"page-undo\" className=\"controlpanel-undo\">\n        <Helmet title=\"Undo\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Undo Controlpanel\"\n              defaultMessage=\"Undo Controlpanel\"\n            />\n          </Segment>\n          <Segment>\n            {this.props.transactions?.length > 0 && (\n              <Form\n                schema={{\n                  fieldsets: [\n                    {\n                      id: 'default',\n                      title: this.props.intl.formatMessage(messages.default),\n                      fields: this.state.isSortingTypeSelected\n                        ? [\n                            'sortingTypes',\n                            (this.state.sortType.toLowerCase() ===\n                              'user name' &&\n                              'sortByUsername') ||\n                              (this.state.sortType.toLowerCase() === 'path' &&\n                                'sortByPath') ||\n                              (this.state.sortType.toLowerCase() === 'date' &&\n                                'sortByDate'),\n                          ]\n                        : ['sortingTypes'],\n                    },\n                  ],\n                  properties: {\n                    sortingTypes: {\n                      title: this.props.intl.formatMessage(messages.sortBy),\n                      description: this.props.intl.formatMessage(\n                        messages.sortByDescription,\n                      ),\n                      type: 'string',\n                      choices: map(['User Name', 'Path', 'Date'], (type) => [\n                        type,\n                        type,\n                      ]),\n                    },\n                    sortByUsername: {\n                      title: `Enter Username`,\n                      type: 'string',\n                    },\n                    sortByPath: {\n                      title: `Enter Path`,\n                      type: 'string',\n                    },\n                    sortByDate: {\n                      title: `Enter Date and Time`,\n                      type: 'date',\n                    },\n                  },\n                  required: [],\n                }}\n                error={\n                  this.state.isEmptyInputForSorting\n                    ? { message: 'Please enter any input to perform sorting' }\n                    : undefined\n                }\n                onChangeFormData={this.onSelect}\n                onSubmit={\n                  this.state.isSortingTypeSelected ? this.onSort : undefined\n                }\n                onCancel={\n                  this.state.isSortingTypeSelected ? this.onCancel : undefined\n                }\n                resetOnCancel={true}\n              />\n            )}\n          </Segment>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Transactions\"\n                defaultMessage=\"Transactions\"\n              />\n            </Segment>\n            {this.state.isTransactionsNotFound ? (\n              <Segment>\n                <FormattedMessage\n                  id=\"No Transactions Found\"\n                  defaultMessage=\"No transactions found\"\n                />\n              </Segment>\n            ) : (\n              <Table selectable fixed celled compact singleLine attached>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={1}>\n                      <FormattedMessage\n                        id=\"Transactions Checkbox\"\n                        defaultMessage=\"#\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"What\" defaultMessage=\"What\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Who\" defaultMessage=\"Who\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"When\" defaultMessage=\"When\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Note\" defaultMessage=\"Note\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(transactionsRange, (transaction) => (\n                    <Table.Row id={transaction.id} key={transaction.id}>\n                      <Table.Cell width={1}>\n                        <Input\n                          type=\"checkbox\"\n                          className=\"transactions-checkboxes\"\n                        />\n                      </Table.Cell>\n                      <Table.Cell\n                        width={3}\n                        title={[transaction.description].join(' ')}\n                      >\n                        {transaction.description}\n                      </Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.username ? transaction.username : 'Zope'}\n                      </Table.Cell>\n                      <Table.Cell width={3}>{transaction.time}</Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.description.includes('Undo')\n                          ? 'Undone'\n                          : ''}\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n                <Table.Footer>\n                  <Table.Row>\n                    <Table.HeaderCell textAlign=\"center\" colSpan=\"6\">\n                      <Menu pagination>\n                        <Menu.Item as=\"a\" id=\"prev-button\" icon>\n                          {this.state.showPrevButton ? (\n                            <Icon\n                              onClick={this.onPrev}\n                              name={prevIcon}\n                              title=\"Prev\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" icon>\n                          <Icon\n                            name={undoSVG}\n                            id=\"undo-button\"\n                            className=\"circled\"\n                            size=\"30px\"\n                            title={this.props.intl.formatMessage(messages.undo)}\n                            onClick={this.onUndo}\n                          />\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" id=\"next-button\" icon>\n                          {this.state.showNextButton ? (\n                            <Icon\n                              onClick={this.onNext}\n                              name={nextIcon}\n                              title=\"Next\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                      </Menu>\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Footer>\n              </Table>\n            )}\n          </Segment.Group>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      pathname: props.location.pathname,\n      transactions: state.transactions.transactions_recieved,\n      revertRequest: state.transactions.revert,\n    }),\n    { getTransactions, revertTransactions },\n  ),\n)(UndoControlpanel);\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,SAAT,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoCC,IAApC,EAA0CC,KAA1C,QAAuD,mBAAvD;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,YAA7D;AACA,SAASC,IAAT,EAAeC,OAAf,EAAwBC,IAAxB,EAA8BC,KAA9B,QAA2C,yBAA3C;AACA,OAAOC,OAAP,MAAoB,6BAApB;AAEA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,eAAT,EAA0BC,kBAA1B,QAAoD,sBAApD;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,QAAQ,GAAGd,cAAc,CAAC;EAC9Be,OAAO;IAAA;IAAA;EAAA,CADuB;EAK9BC,KAAK;IAAA;IAAA;EAAA,CALyB;EAS9BC,IAAI;IAAA;IAAA;EAAA,CAT0B;EAa9BC,IAAI;IAAA;IAAA;EAAA,CAb0B;EAiB9BC,OAAO;IAAA;IAAA;EAAA,CAjBuB;EAqB9BC,MAAM;IAAA;IAAA;EAAA,CArBwB;EAyB9BC,MAAM;IAAA;IAAA;EAAA,CAzBwB;EA6B9BC,QAAQ;IAAA;IAAA;EAAA,CA7BsB;EAiC9BC,iBAAiB;IAAA;IAAA;EAAA,CAjCa;EAqC9BC,wBAAwB;IAAA;IAAA;EAAA,CArCM;EAyC9BC,8BAA8B;IAAA;IAAA;EAAA,CAzCA;EA6C9BC,0BAA0B;IAAA;IAAA;EAAA,CA7CI;EAiD9BC,4BAA4B;IAAA;IAAA;EAAA,CAjDE;EAqD9BC,sBAAsB;IAAA;IAAA;EAAA,CArDQ;EAyD9BC,8BAA8B;IAAA;IAAA;EAAA;AAzDA,CAAD,CAA/B;AA+DA;AACA;AACA;AACA;AACA;;AACA,MAAMC,gBAAN,SAA+B1C,SAA/B,CAAyC;EACvC;AACF;AACA;AACA;AACA;;EAmBE;AACF;AACA;AACA;AACA;AACA;EACE2C,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACXC,QAAQ,EAAE,KADC;MAEXC,QAAQ,EAAE,UAFC;MAGXC,UAAU,EAAE,CAHD;MAIXC,UAAU,EAAE,EAJD;MAKXC,6BAA6B,EAAE,EALpB;MAMXC,qBAAqB,EAAE,KANZ;MAOXC,kBAAkB,EAAE,EAPT;MAQXC,sBAAsB,EAAE,KARb;MASXC,sBAAsB,EAAE,KATb;MAUXC,qBAAqB,EAAE,KAVZ;MAWXC,cAAc,EAAE,KAXL;MAYXC,cAAc,EAAE;IAZL,CAAb;IAcA,KAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAhB;IACA,KAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYD,IAAZ,CAAiB,IAAjB,CAAd;IACA,KAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;IACA,KAAKG,MAAL,GAAc,KAAKA,MAAL,CAAYH,IAAZ,CAAiB,IAAjB,CAAd;IACA,KAAKI,MAAL,GAAc,KAAKA,MAAL,CAAYJ,IAAZ,CAAiB,IAAjB,CAAd;IACA,KAAKK,MAAL,GAAc,KAAKA,MAAL,CAAYL,IAAZ,CAAiB,IAAjB,CAAd;IACA,KAAKM,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BN,IAA1B,CAA+B,IAA/B,CAA5B;IACA,KAAKO,8BAAL,GAAsC,KAAKA,8BAAL,CAAoCP,IAApC,CACpC,IADoC,CAAtC;IAGA,KAAKQ,2BAAL,GAAmC,KAAKA,2BAAL,CAAiCR,IAAjC,CACjC,IADiC,CAAnC;IAGA,KAAKS,6BAAL,GAAqC,KAAKA,6BAAL,CAAmCT,IAAnC,CACnC,IADmC,CAArC;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACEU,iBAAiB,GAAG;IAClB,KAAKC,QAAL,CAAc;MACZxB,QAAQ,EAAE;IADE,CAAd;IAGA,KAAKF,KAAL,CAAWrB,eAAX;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEgD,gCAAgC,CAACC,SAAD,EAAY;IAC1C,IAAI,KAAK5B,KAAL,CAAW6B,aAAX,CAAyBC,OAAzB,IAAoCF,SAAS,CAACC,aAAV,CAAwBE,MAAhE,EAAwE;MACtE,KAAK/B,KAAL,CAAWrB,eAAX;IACD;EACF;;EAEDqD,qBAAqB,CAACxB,kBAAD,EAAqB;IACxC,IAAIA,kBAAkB,CAACyB,MAAnB,GAA4B,CAAhC,EAAmC;MACjC,KAAKP,QAAL,CAAc;QACZtB,UAAU,EAAE,CADA;QAEZC,UAAU,EAAE,KAAKJ,KAAL,CAAWK,6BAFX;QAGZE,kBAAkB,EAAEA,kBAHR;QAIZC,sBAAsB,EAAE,KAJZ;QAKZC,sBAAsB,EAAE;MALZ,CAAd;IAOD,CARD,MAQO;MACL,KAAKgB,QAAL,CAAc;QAAEhB,sBAAsB,EAAE;MAA1B,CAAd;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEI,QAAQ,GAAG;IACT,IAAI,KAAKb,KAAL,CAAWO,kBAAX,CAA8ByB,MAA9B,GAAuC,CAA3C,EAA8C;MAC5CpD,KAAK,CAACqD,IAAN,CACE,MAAC,KAAD;QACE,IAAI,MADN;QAEE,KAAK,EAAE,KAAKlC,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACQ,QAAvC,CAFT;QAGE,OAAO,EAAE,KAAKU,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CACPtD,QAAQ,CAACa,4BADF,CAHX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IASD;;IACD,KAAK+B,QAAL,CAAc;MACZnB,qBAAqB,EAAE,KADX;MAEZG,sBAAsB,EAAE,KAFZ;MAGZD,sBAAsB,EAAE,KAHZ;MAIZN,QAAQ,EAAE,UAJE;MAKZK,kBAAkB,EAAE,EALR;MAMZJ,UAAU,EAAE,CANA;MAOZC,UAAU,EAAE,KAAKJ,KAAL,CAAWK;IAPX,CAAd;EASD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEW,QAAQ,CAACoB,IAAD,EAAO;IACb,IACEA,IAAI,KAAK,IAAT,IACAA,IAAI,CAACC,YAAL,KAAsB,IADtB,IAEA,KAAKrC,KAAL,CAAWE,QAAX,CAAoBoC,WAApB,OAAsCF,IAAI,CAACC,YAAL,CAAkBC,WAAlB,EAHxC,EAIE;MACA;IACD;;IACD,IAAIpC,QAAQ,GAAIkC,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACC,YAAvB,IAAwC,UAAvD;;IAEA,IAAInC,QAAQ,CAACoC,WAAT,OAA2B,UAA/B,EAA2C;MACzC,KAAKb,QAAL,CAAc;QAAEnB,qBAAqB,EAAE;MAAzB,CAAd;MACAJ,QAAQ,CAACoC,WAAT,OAA2B,WAA3B,IACE,KAAKb,QAAL,CAAc;QAAEvB,QAAQ,EAAE;MAAZ,CAAd,CADF;MAEAA,QAAQ,CAACoC,WAAT,OAA2B,MAA3B,IAAqC,KAAKb,QAAL,CAAc;QAAEvB,QAAQ,EAAE;MAAZ,CAAd,CAArC;MACAA,QAAQ,CAACoC,WAAT,OAA2B,MAA3B,IAAqC,KAAKb,QAAL,CAAc;QAAEvB,QAAQ,EAAE;MAAZ,CAAd,CAArC;IACD,CAND,MAMO;MACL,KAAKW,QAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,MAAM,CAACqB,IAAD,EAAO;IACX,IAAIlC,QAAQ,GAAGkC,IAAI,CAACC,YAAL,IAAqB,UAApC;IACA,IAAIE,KAAJ;IACCrC,QAAQ,CAACoC,WAAT,OAA2B,WAA3B,KAA2CC,KAAK,GAAGH,IAAI,CAACI,cAAxD,CAAD,IACGtC,QAAQ,CAACoC,WAAT,OAA2B,MAA3B,KAAsCC,KAAK,GAAGH,IAAI,CAACK,UAAnD,CADH,IAEGvC,QAAQ,CAACoC,WAAT,OAA2B,MAA3B,KAAsCC,KAAK,GAAGH,IAAI,CAACM,UAAnD,CAFH,KAGGH,KAAK,GAAGI,SAHX;;IAKA,IAAIzC,QAAQ,CAACoC,WAAT,OAA2B,UAA3B,IAAyCC,KAAK,KAAKI,SAAvD,EAAkE;MAChE,IAAIpC,kBAAkB,GAAG,EAAzB;;MACA,IAAIL,QAAQ,CAACoC,WAAT,OAA2B,WAA/B,EAA4C;QAC1C,KAAKvC,KAAL,CAAW6C,YAAX,CAAwBC,OAAxB,CAAiCC,OAAD,IAAa;UAC3C,IAAIP,KAAK,CAACQ,IAAN,GAAaT,WAAb,OAA+B,MAA/B,IAAyC,CAACQ,OAAO,CAACE,QAAtD,EAAgE;YAC9DzC,kBAAkB,CAAC0C,IAAnB,CAAwBH,OAAxB;UACD,CAFD,MAEO,IACLA,OAAO,CAACE,QAAR,CACGD,IADH,GAEGT,WAFH,GAGGY,QAHH,CAGYX,KAAK,CAACQ,IAAN,GAAaT,WAAb,EAHZ,CADK,EAKL;YACA/B,kBAAkB,CAAC0C,IAAnB,CAAwBH,OAAxB;UACD;QACF,CAXD;QAYA,KAAKf,qBAAL,CAA2BxB,kBAA3B;MACD,CAdD,MAcO,IAAIL,QAAQ,CAACoC,WAAT,OAA2B,MAA/B,EAAuC;QAC5C,KAAKvC,KAAL,CAAW6C,YAAX,CAAwBC,OAAxB,CAAiCC,OAAD,IAAa;UAC3C,IACEA,OAAO,CAACK,EAAR,CAAWJ,IAAX,GAAkBT,WAAlB,GAAgCY,QAAhC,CAAyCX,KAAK,CAACQ,IAAN,GAAaT,WAAb,EAAzC,CADF,EAEE;YACA/B,kBAAkB,CAAC0C,IAAnB,CAAwBH,OAAxB;UACD;QACF,CAND;QAOA,KAAKf,qBAAL,CAA2BxB,kBAA3B;MACD,CATM,MASA;QACL;QACA,IAAI6C,QAAQ,GAAG,QAAf;QACA,IAAIC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWhB,KAAX,CAAtB;QACA,IAAIiB,wBAAwB,GAC1BH,eAAe,GAAIA,eAAe,GAAGD,QAArC,GAAiDA,QAAjD,GAA4D,CAD9D;QAEA,IAAIK,0BAA0B,GAC5BJ,eAAe,GAAIA,eAAe,GAAGD,QADvC;QAGA,KAAKrD,KAAL,CAAW6C,YAAX,CAAwBC,OAAxB,CAAiCC,OAAD,IAAa;UAC3C,IACEU,wBAAwB,IAAIF,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACY,IAAnB,CAA5B,IACAJ,IAAI,CAACC,KAAL,CAAWT,OAAO,CAACY,IAAnB,KAA4BD,0BAF9B,EAGE;YACAlD,kBAAkB,CAAC0C,IAAnB,CAAwBH,OAAxB;UACD;QACF,CAPD;QAQA,KAAKf,qBAAL,CAA2BxB,kBAA3B;MACD;;MACD3B,KAAK,CAACqD,IAAN,CACE,MAAC,KAAD;QACE,IAAI,MADN;QAEE,KAAK,EAAE,KAAKlC,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACO,MAAvC,CAFT;QAGE,OAAO,EAAE,KAAKW,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CACPtD,QAAQ,CAACY,0BADF,CAHX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IASD,CArDD,MAqDO;MACL,KAAKgC,QAAL,CAAc;QAAEjB,sBAAsB,EAAE;MAA1B,CAAd;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEW,MAAM,GAAG;IACP,IAAIwC,oBAAoB,GAAG,KAA3B;;IACA,IAAIC,mBAAmB,GAAG,KACxB,KAAK7D,KAAL,CAAW6C,YAAX,CAAwBiB,KAAxB,CAA8B,CAA9B,EAAiC,KAAK9D,KAAL,CAAW6C,YAAX,CAAwBZ,MAAzD,CADwB,EAEvB8B,WAAD,IAAiB;MACf,IACEC,QAAQ,CAACC,cAAT,CAAwBF,WAAW,CAACX,EAApC,MAA4C,IAA5C,IACAY,QAAQ,CAACC,cAAT,CAAwBF,WAAW,CAACX,EAApC,EAAwCc,iBAAxC,CACGA,iBADH,CACqBA,iBADrB,CACuCC,OAHzC,EAIE;QACAP,oBAAoB,GAAG,IAAvB;QACA,OAAOG,WAAW,CAACX,EAAnB;MACD;;MACD,OAAO,EAAP;IACD,CAZuB,CAA1B;;IAcA,IAAIQ,oBAAJ,EAA0B;MACxB,KAAKlC,QAAL,CAAc;QACZf,qBAAqB,EAAE;MADX,CAAd;MAGA,KAAKX,KAAL,CAAWpB,kBAAX,CAA8BiF,mBAA9B;IACD,CALD,MAKO;MACLhF,KAAK,CAACG,KAAN,CACE,MAAC,KAAD;QACE,KAAK,MADP;QAEE,KAAK,EAAE,KAAKgB,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACc,sBAAvC,CAFT;QAGE,OAAO,EAAE,KAAKI,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CACPtD,QAAQ,CAACe,8BADF,CAHX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IASD;;IAEDuE,KAAK,CAACC,IAAN,CACEL,QAAQ,CAACM,sBAAT,CAAgC,yBAAhC,CADF,EAEExB,OAFF,CAEWC,OAAD,IAAa;MACrBA,OAAO,CAACmB,iBAAR,CAA0BC,OAA1B,GAAoC,KAApC;IACD,CAJD;EAKD;EAED;AACF;AACA;AACA;AACA;;;EACEjD,MAAM,GAAG;IACP,IAAI,KAAKjB,KAAL,CAAWG,UAAf,IACE,KAAKsB,QAAL,CAAc;MACZrB,UAAU,EAAE,KAAKJ,KAAL,CAAWG,UADX;MAEZA,UAAU,EACR,KAAKH,KAAL,CAAWG,UAAX,GAAwB,KAAKH,KAAL,CAAWK;IAHzB,CAAd,CADF;EAMD;EAED;AACF;AACA;AACA;AACA;;;EACEa,MAAM,GAAG;IACP,KAAKnB,KAAL,CAAW6C,YAAX,CAAwBZ,MAAxB,GAAiC,KAAKhC,KAAL,CAAWI,UAA5C,IACE,KAAKqB,QAAL,CAAc;MACZtB,UAAU,EAAE,KAAKH,KAAL,CAAWI,UADX;MAEZA,UAAU,EACR,KAAKJ,KAAL,CAAWI,UAAX,GAAwB,KAAKJ,KAAL,CAAWK;IAHzB,CAAd,CADF;EAMD;EAED;AACF;AACA;AACA;AACA;;;EACEiB,2BAA2B,GAAG;IAC5B,KAAKtB,KAAL,CAAWI,UAAX,IAAyB,KAAKJ,KAAL,CAAWO,kBAAX,CAA8ByB,MAAvD,IACE,KAAKhC,KAAL,CAAWY,cADb,IAEE,KAAKa,QAAL,CAAc;MAAEb,cAAc,EAAE;IAAlB,CAAd,CAFF;IAIA,KAAKZ,KAAL,CAAWI,UAAX,GAAwB,KAAKJ,KAAL,CAAWO,kBAAX,CAA8ByB,MAAtD,IACE,CAAC,KAAKhC,KAAL,CAAWY,cADd,IAEE,KAAKa,QAAL,CAAc;MAAEb,cAAc,EAAE;IAAlB,CAAd,CAFF;IAIA,KAAKZ,KAAL,CAAWG,UAAX,IAAyB,CAAzB,IACE,KAAKH,KAAL,CAAWW,cADb,IAEE,KAAKc,QAAL,CAAc;MAAEd,cAAc,EAAE;IAAlB,CAAd,CAFF;IAIA,KAAKX,KAAL,CAAWG,UAAX,GAAwB,CAAxB,IACE,CAAC,KAAKH,KAAL,CAAWW,cADd,IAEE,KAAKc,QAAL,CAAc;MAAEd,cAAc,EAAE;IAAlB,CAAd,CAFF;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACEU,8BAA8B,GAAG;IAAA;;IAC/B,KAAKrB,KAAL,CAAWI,UAAX,8BAAyB,KAAKL,KAAL,CAAW6C,YAApC,0DAAyB,sBAAyBZ,MAAlD,KACE,KAAKhC,KAAL,CAAWY,cADb,IAEE,KAAKa,QAAL,CAAc;MAAEb,cAAc,EAAE;IAAlB,CAAd,CAFF;IAIA,KAAKZ,KAAL,CAAWI,UAAX,8BAAwB,KAAKL,KAAL,CAAW6C,YAAnC,2DAAwB,uBAAyBZ,MAAjD,KACE,CAAC,KAAKhC,KAAL,CAAWY,cADd,IAEE,KAAKa,QAAL,CAAc;MAAEb,cAAc,EAAE;IAAlB,CAAd,CAFF;IAIA,KAAKZ,KAAL,CAAWG,UAAX,IAAyB,CAAzB,IACE,KAAKH,KAAL,CAAWW,cADb,IAEE,KAAKc,QAAL,CAAc;MAAEd,cAAc,EAAE;IAAlB,CAAd,CAFF;IAIA,KAAKX,KAAL,CAAWG,UAAX,GAAwB,CAAxB,IACE,CAAC,KAAKH,KAAL,CAAWW,cADd,IAEE,KAAKc,QAAL,CAAc;MAAEd,cAAc,EAAE;IAAlB,CAAd,CAFF;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACES,oBAAoB,GAAG;IACrB,IAAI,KAAKpB,KAAL,CAAWO,kBAAX,CAA8ByB,MAA9B,GAAuC,CAA3C,EAA8C;MAC5C,KAAKV,2BAAL;IACD,CAFD,MAEO,IAAI,CAAC,KAAKtB,KAAL,CAAWM,qBAAhB,EAAuC;MAAA;;MAC5C,gCAAKP,KAAL,CAAW6C,YAAX,kFAAyBZ,MAAzB,IAAkC,CAAlC,IACE,KAAKhC,KAAL,CAAWS,sBADb,IAEE,KAAKgB,QAAL,CAAc;QAAEhB,sBAAsB,EAAE;MAA1B,CAAd,CAFF;MAIA,gCAAKV,KAAL,CAAW6C,YAAX,kFAAyBZ,MAAzB,KAAmC,CAAnC,IACE,CAAC,KAAKhC,KAAL,CAAWS,sBADd,IAEE,KAAKgB,QAAL,CAAc;QAAEhB,sBAAsB,EAAE;MAA1B,CAAd,CAFF;MAIA,KAAKY,8BAAL;IACD,CAVM,MAUA;MACL,KAAKA,8BAAL;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEE,6BAA6B,GAAG;IAC9B,IACE,KAAKxB,KAAL,CAAW6B,aAAX,CAAyB7C,KAAzB,IACA,KAAKgB,KAAL,CAAW6B,aAAX,CAAyB7C,KAAzB,KAAmC,IADnC,IAEA,KAAKiB,KAAL,CAAWU,qBAHb,EAIE;MACA,KAAKe,QAAL,CAAc;QACZf,qBAAqB,EAAE;MADX,CAAd;MAGA9B,KAAK,CAACG,KAAN,CACE,MAAC,KAAD;QACE,KAAK,MADP;QAEE,KAAK,EAAE,KAAKgB,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACE,KAAvC,CAFT;QAGE,OAAO,EAAE,KAAKgB,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CACPtD,QAAQ,CAACU,wBADF,CAHX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IASD,CAjBD,MAiBO,IACL,KAAKQ,KAAL,CAAW6B,aAAX,CAAyB7C,KAAzB,KAAmC,IAAnC,IACA,KAAKiB,KAAL,CAAWU,qBAFN,EAGL;MACA,KAAKe,QAAL,CAAc;QACZf,qBAAqB,EAAE;MADX,CAAd;MAGA9B,KAAK,CAACE,OAAN,CACE,MAAC,KAAD;QACE,OAAO,MADT;QAEE,KAAK,EAAE,KAAKiB,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACC,OAAvC,CAFT;QAGE,OAAO,EAAE,KAAKiB,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CACPtD,QAAQ,CAACW,8BADF,CAHX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;IASD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACE8E,MAAM,GAAG;IAAA;;IACP,MAAMC,iBAAiB,GACpB,KAAKvE,KAAL,CAAWO,kBAAX,CAA8ByB,MAA9B,GAAuC,CAAvC,IACC,KAAKhC,KAAL,CAAWO,kBAAX,CAA8BsD,KAA9B,CACE,KAAK7D,KAAL,CAAWG,UADb,EAEE,KAAKH,KAAL,CAAWI,UAFb,CADF,+BAKA,KAAKL,KAAL,CAAW6C,YALX,2DAKA,uBAAyBiB,KAAzB,CACE,KAAK7D,KAAL,CAAWG,UADb,EAEE,KAAKH,KAAL,CAAWI,UAFb,CALA,CADF;IAUA,KAAKgB,oBAAL;IACA,KAAKG,6BAAL;IAEA,OACE,MAAC,SAAD;MAAW,EAAE,EAAC,WAAd;MAA0B,SAAS,EAAC,mBAApC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,MAAD;MAAQ,KAAK,EAAC,MAAd;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,EAEE,MAAC,OAAD,CAAS,KAAT;MAAe,MAAM,MAArB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MAAS,SAAS,EAAC,SAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,mBADL;MAEE,cAAc,EAAC,mBAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE,MAAC,OAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,gCAAKxB,KAAL,CAAW6C,YAAX,kFAAyBZ,MAAzB,IAAkC,CAAlC,IACC,MAAC,IAAD;MACE,MAAM,EAAE;QACNwC,SAAS,EAAE,CACT;UACErB,EAAE,EAAE,SADN;UAEEsB,KAAK,EAAE,KAAK1E,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACK,OAAvC,CAFT;UAGEwF,MAAM,EAAE,KAAK1E,KAAL,CAAWM,qBAAX,GACJ,CACE,cADF,EAEG,KAAKN,KAAL,CAAWE,QAAX,CAAoBoC,WAApB,OACC,WADD,IAEC,gBAFF,IAGG,KAAKtC,KAAL,CAAWE,QAAX,CAAoBoC,WAApB,OAAsC,MAAtC,IACC,YAJJ,IAKG,KAAKtC,KAAL,CAAWE,QAAX,CAAoBoC,WAApB,OAAsC,MAAtC,IACC,YARN,CADI,GAWJ,CAAC,cAAD;QAdN,CADS,CADL;QAmBNqC,UAAU,EAAE;UACVtC,YAAY,EAAE;YACZoC,KAAK,EAAE,KAAK1E,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACM,MAAvC,CADK;YAEZyF,WAAW,EAAE,KAAK7E,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CACXtD,QAAQ,CAACS,iBADE,CAFD;YAKZuF,IAAI,EAAE,QALM;YAMZC,OAAO,EAAE,KAAI,CAAC,WAAD,EAAc,MAAd,EAAsB,MAAtB,CAAJ,EAAoCD,IAAD,IAAU,CACpDA,IADoD,EAEpDA,IAFoD,CAA7C;UANG,CADJ;UAYVrC,cAAc,EAAE;YACdiC,KAAK,EAAG,gBADM;YAEdI,IAAI,EAAE;UAFQ,CAZN;UAgBVpC,UAAU,EAAE;YACVgC,KAAK,EAAG,YADE;YAEVI,IAAI,EAAE;UAFI,CAhBF;UAoBVnC,UAAU,EAAE;YACV+B,KAAK,EAAG,qBADE;YAEVI,IAAI,EAAE;UAFI;QApBF,CAnBN;QA4CNE,QAAQ,EAAE;MA5CJ,CADV;MA+CE,KAAK,EACH,KAAK/E,KAAL,CAAWQ,sBAAX,GACI;QAAEwE,OAAO,EAAE;MAAX,CADJ,GAEIrC,SAlDR;MAoDE,gBAAgB,EAAE,KAAK3B,QApDzB;MAqDE,QAAQ,EACN,KAAKhB,KAAL,CAAWM,qBAAX,GAAmC,KAAKS,MAAxC,GAAiD4B,SAtDrD;MAwDE,QAAQ,EACN,KAAK3C,KAAL,CAAWM,qBAAX,GAAmC,KAAKO,QAAxC,GAAmD8B,SAzDvD;MA2DE,aAAa,EAAE,IA3DjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAFJ,CAPF,EAwEE,MAAC,OAAD,CAAS,KAAT;MAAe,MAAM,MAArB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MAAS,SAAS,EAAC,SAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,cADL;MAEE,cAAc,EAAC,cAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOG,KAAK3C,KAAL,CAAWS,sBAAX,GACC,MAAC,OAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,uBADL;MAEE,cAAc,EAAC,uBAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADD,GAQC,MAAC,KAAD;MAAO,UAAU,MAAjB;MAAkB,KAAK,MAAvB;MAAwB,MAAM,MAA9B;MAA+B,OAAO,MAAtC;MAAuC,UAAU,MAAjD;MAAkD,QAAQ,MAA1D;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,MAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,GAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,UAAP;MAAkB,KAAK,EAAE,CAAzB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,uBADL;MAEE,cAAc,EAAC,GAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE,MAAC,KAAD,CAAO,UAAP;MAAkB,KAAK,EAAE,CAAzB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,MAArB;MAA4B,cAAc,EAAC,MAA3C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAPF,EAUE,MAAC,KAAD,CAAO,UAAP;MAAkB,KAAK,EAAE,CAAzB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,KAArB;MAA2B,cAAc,EAAC,KAA1C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAVF,EAaE,MAAC,KAAD,CAAO,UAAP;MAAkB,KAAK,EAAE,CAAzB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,MAArB;MAA4B,cAAc,EAAC,MAA3C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAbF,EAgBE,MAAC,KAAD,CAAO,UAAP;MAAkB,KAAK,EAAE,CAAzB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,MAArB;MAA4B,cAAc,EAAC,MAA3C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAhBF,EAmBE,MAAC,KAAD,CAAO,UAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAnBF,CADF,CADF,EAwBE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,KAAI8D,iBAAJ,EAAwBT,WAAD,IACtB,MAAC,KAAD,CAAO,GAAP;MAAW,EAAE,EAAEA,WAAW,CAACX,EAA3B;MAA+B,GAAG,EAAEW,WAAW,CAACX,EAAhD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,IAAP;MAAY,KAAK,EAAE,CAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD;MACE,IAAI,EAAC,UADP;MAEE,SAAS,EAAC,yBAFZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE,MAAC,KAAD,CAAO,IAAP;MACE,KAAK,EAAE,CADT;MAEE,KAAK,EAAE,CAACW,WAAW,CAACc,WAAb,EAA0BK,IAA1B,CAA+B,GAA/B,CAFT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAIGnB,WAAW,CAACc,WAJf,CAPF,EAaE,MAAC,KAAD,CAAO,IAAP;MAAY,KAAK,EAAE,CAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGd,WAAW,CAACd,QAAZ,GAAuBc,WAAW,CAACd,QAAnC,GAA8C,MADjD,CAbF,EAgBE,MAAC,KAAD,CAAO,IAAP;MAAY,KAAK,EAAE,CAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAuBc,WAAW,CAACJ,IAAnC,CAhBF,EAiBE,MAAC,KAAD,CAAO,IAAP;MAAY,KAAK,EAAE,CAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGI,WAAW,CAACc,WAAZ,CAAwB1B,QAAxB,CAAiC,MAAjC,IACG,QADH,GAEG,EAHN,CAjBF,CADD,CADH,CAxBF,EAmDE,MAAC,KAAD,CAAO,MAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,GAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,UAAP;MAAkB,SAAS,EAAC,QAA5B;MAAqC,OAAO,EAAC,GAA7C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD;MAAM,UAAU,MAAhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD,CAAM,IAAN;MAAW,EAAE,EAAC,GAAd;MAAkB,EAAE,EAAC,aAArB;MAAmC,IAAI,MAAvC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,KAAKlD,KAAL,CAAWW,cAAX,GACC,MAAC,IAAD;MACE,OAAO,EAAE,KAAKM,MADhB;MAEE,IAAI,EAAEzC,QAFR;MAGE,KAAK,EAAC,MAHR;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADD,GAOC;MAAK,KAAK,EAAE;QAAE0G,KAAK,EAAE;MAAT,CAAZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EARJ,CADF,EAYE,MAAC,IAAD,CAAM,IAAN;MAAW,EAAE,EAAC,GAAd;MAAkB,IAAI,MAAtB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD;MACE,IAAI,EAAEzG,OADR;MAEE,EAAE,EAAC,aAFL;MAGE,SAAS,EAAC,SAHZ;MAIE,IAAI,EAAC,MAJP;MAKE,KAAK,EAAE,KAAKsB,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACG,IAAvC,CALT;MAME,OAAO,EAAE,KAAKmC,MANhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAZF,EAsBE,MAAC,IAAD,CAAM,IAAN;MAAW,EAAE,EAAC,GAAd;MAAkB,EAAE,EAAC,aAArB;MAAmC,IAAI,MAAvC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,KAAKnB,KAAL,CAAWY,cAAX,GACC,MAAC,IAAD;MACE,OAAO,EAAE,KAAKM,MADhB;MAEE,IAAI,EAAE3C,QAFR;MAGE,KAAK,EAAC,MAHR;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADD,GAOC;MAAK,KAAK,EAAE;QAAE2G,KAAK,EAAE;MAAT,CAAZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EARJ,CAtBF,CADF,CADF,CADF,CAnDF,CAfJ,CAxEF,CAFF,EAwLG,KAAKlF,KAAL,CAAWC,QAAX,IACC,MAAC,MAAD;MAAQ,IAAI,EAAE8D,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MACE,QAAQ,EAAE,KAAKjE,KAAL,CAAWoF,QADvB;MAEE,sBAAsB,MAFxB;MAGE,KAAK,EACH,4BACE,MAAC,IAAD;QAAM,EAAE,EAAC,eAAT;QAAyB,SAAS,EAAC,MAAnC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,IAAD;QACE,IAAI,EAAE9G,OADR;QAEE,cAAY,KAAK0B,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACI,IAAvC,CAFd;QAGE,SAAS,EAAC,kBAHZ;QAIE,IAAI,EAAC,MAJP;QAKE,KAAK,EAAE,KAAKc,KAAL,CAAWmC,IAAX,CAAgBC,aAAhB,CAA8BtD,QAAQ,CAACI,IAAvC,CALT;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CADF,CAJJ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAzLJ,CADF;EAgND;;AAhoBsC;;gBAAnCY,gB,eAMe;EACjBnB,eAAe,EAAEtB,SAAS,CAACgI,IAAV,CAAeC,UADf;EAEjB1G,kBAAkB,EAAEvB,SAAS,CAACgI,IAAV,CAAeC,UAFlB;EAGjBzC,YAAY,EAAExF,SAAS,CAACkI,OAAV,CACZlI,SAAS,CAACmI,KAAV,CAAgB;IACdX,WAAW,EAAExH,SAAS,CAACoI,MADT;IAEdrC,EAAE,EAAE/F,SAAS,CAACoI,MAFA;IAGdC,IAAI,EAAErI,SAAS,CAACsI,MAHF;IAIdhC,IAAI,EAAEtG,SAAS,CAACoI,MAJF;IAKdxC,QAAQ,EAAE5F,SAAS,CAACoI;EALN,CAAhB,CADY,CAHG;EAYjB5D,aAAa,EAAExE,SAAS,CAACmI,KAAV,CAAgB;IAC7BzD,MAAM,EAAE1E,SAAS,CAACuI,IADW;IAE7B9D,OAAO,EAAEzE,SAAS,CAACuI;EAFU,CAAhB,EAGZN;AAfc,C;;AA6nBrB,eAAe/H,OAAO,CACpBU,UADoB,EAEpBX,OAAO,CACL,CAAC2C,KAAD,EAAQD,KAAR,MAAmB;EACjBoF,QAAQ,EAAEpF,KAAK,CAAC6F,QAAN,CAAeT,QADR;EAEjBvC,YAAY,EAAE5C,KAAK,CAAC4C,YAAN,CAAmBiD,qBAFhB;EAGjBjE,aAAa,EAAE5B,KAAK,CAAC4C,YAAN,CAAmBkD;AAHjB,CAAnB,CADK,EAML;EAAEpH,eAAF;EAAmBC;AAAnB,CANK,CAFa,CAAP,CAUbkB,gBAVa,CAAf"},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Error","defaultMessage":"Error"},{"id":"Undo","defaultMessage":"Undo"},{"id":"Back","defaultMessage":"Back"},{"id":"Default","defaultMessage":"Default"},{"id":"Sort By","defaultMessage":"Sort by"},{"id":"Sorted","defaultMessage":"Sorted"},{"id":"Unsorted","defaultMessage":"Unsorted"},{"id":"Sort transactions by User-Name, Path or Date","defaultMessage":"Sort transactions by User-Name, Path or Date"},{"id":"Failed To Undo Transactions","defaultMessage":"Failed to undo transactions"},{"id":"Successfully Undone Transactions","defaultMessage":"Successfully undone transactions"},{"id":"Transactions Have Been Sorted","defaultMessage":"Transactions have been sorted"},{"id":"Transactions Have Been Unsorted","defaultMessage":"Transactions have been unsorted"},{"id":"No Transactions Selected","defaultMessage":"No transactions selected"},{"id":"No Transactions Selected To Do Undo","defaultMessage":"No transactions selected to do undo"},{"id":"Undo Controlpanel","defaultMessage":"Undo Controlpanel"},{"id":"Transactions","defaultMessage":"Transactions"},{"id":"No Transactions Found","defaultMessage":"No transactions found"},{"id":"Transactions Checkbox","defaultMessage":"#"},{"id":"What","defaultMessage":"What"},{"id":"Who","defaultMessage":"Who"},{"id":"When","defaultMessage":"When"},{"id":"Note","defaultMessage":"Note"}]}},"sourceType":"module"}