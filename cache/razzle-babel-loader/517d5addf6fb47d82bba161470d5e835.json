{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n * Upload reducer.\n * @module reducers/content\n *\n * Customized copy of Volto's content reducer\n */\nimport config from '@plone/volto/registry';\nimport { UPLOAD_CONTENT } from '@plone/volto-slate/constants';\nconst initialState = {};\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\n\nexport default function upload_content() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let {\n    result,\n    origin\n  } = action;\n\n  switch (action.type) {\n    case `${UPLOAD_CONTENT}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [origin]: _objectSpread(_objectSpread({}, state[origin]), {}, {\n          upload: {\n            loading: true,\n            loaded: false,\n            error: null\n          }\n        })\n      });\n\n    case `${UPLOAD_CONTENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [origin]: _objectSpread(_objectSpread({}, state[origin]), {}, {\n          data: _objectSpread(_objectSpread({}, result), {}, {\n            items: action.result && action.result.items && action.result.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n              url: item['@id'].replace(config.settings.apiPath, '')\n            }))\n          }),\n          upload: {\n            loading: false,\n            loaded: true,\n            error: null\n          }\n        })\n      });\n\n    case `${UPLOAD_CONTENT}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [origin]: _objectSpread(_objectSpread({}, state[origin]), {}, {\n          data: null,\n          upload: {\n            loading: false,\n            loaded: false,\n            error: action.error\n          }\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["config","UPLOAD_CONTENT","initialState","upload_content","state","action","result","origin","type","upload","loading","loaded","error","data","items","map","item","url","replace","settings","apiPath"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/reducers/content.js"],"sourcesContent":["/**\n * Upload reducer.\n * @module reducers/content\n *\n * Customized copy of Volto's content reducer\n */\n\nimport config from '@plone/volto/registry';\n\nimport { UPLOAD_CONTENT } from '@plone/volto-slate/constants';\n\nconst initialState = {};\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function upload_content(state = initialState, action = {}) {\n  let { result, origin } = action;\n  switch (action.type) {\n    case `${UPLOAD_CONTENT}_PENDING`:\n      return {\n        ...state,\n        [origin]: {\n          ...state[origin],\n          upload: {\n            loading: true,\n            loaded: false,\n            error: null,\n          },\n        },\n      };\n    case `${UPLOAD_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [origin]: {\n          ...state[origin],\n          data: {\n            ...result,\n            items:\n              action.result &&\n              action.result.items &&\n              action.result.items.map((item) => ({\n                ...item,\n                url: item['@id'].replace(config.settings.apiPath, ''),\n              })),\n          },\n          upload: {\n            loading: false,\n            loaded: true,\n            error: null,\n          },\n        },\n      };\n    case `${UPLOAD_CONTENT}_FAIL`:\n      return {\n        ...state,\n        [origin]: {\n          ...state[origin],\n          data: null,\n          upload: {\n            loading: false,\n            loaded: false,\n            error: action.error,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,uBAAnB;AAEA,SAASC,cAAT,QAA+B,8BAA/B;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,cAAT,GAA2D;EAAA,IAAnCC,KAAmC,uEAA3BF,YAA2B;EAAA,IAAbG,MAAa,uEAAJ,EAAI;EACxE,IAAI;IAAEC,MAAF;IAAUC;EAAV,IAAqBF,MAAzB;;EACA,QAAQA,MAAM,CAACG,IAAf;IACE,KAAM,GAAEP,cAAe,UAAvB;MACE,uCACKG,KADL;QAEE,CAACG,MAAD,mCACKH,KAAK,CAACG,MAAD,CADV;UAEEE,MAAM,EAAE;YACNC,OAAO,EAAE,IADH;YAENC,MAAM,EAAE,KAFF;YAGNC,KAAK,EAAE;UAHD;QAFV;MAFF;;IAWF,KAAM,GAAEX,cAAe,UAAvB;MACE,uCACKG,KADL;QAEE,CAACG,MAAD,mCACKH,KAAK,CAACG,MAAD,CADV;UAEEM,IAAI,kCACCP,MADD;YAEFQ,KAAK,EACHT,MAAM,CAACC,MAAP,IACAD,MAAM,CAACC,MAAP,CAAcQ,KADd,IAEAT,MAAM,CAACC,MAAP,CAAcQ,KAAd,CAAoBC,GAApB,CAAyBC,IAAD,oCACnBA,IADmB;cAEtBC,GAAG,EAAED,IAAI,CAAC,KAAD,CAAJ,CAAYE,OAAZ,CAAoBlB,MAAM,CAACmB,QAAP,CAAgBC,OAApC,EAA6C,EAA7C;YAFiB,EAAxB;UALA,EAFN;UAYEX,MAAM,EAAE;YACNC,OAAO,EAAE,KADH;YAENC,MAAM,EAAE,IAFF;YAGNC,KAAK,EAAE;UAHD;QAZV;MAFF;;IAqBF,KAAM,GAAEX,cAAe,OAAvB;MACE,uCACKG,KADL;QAEE,CAACG,MAAD,mCACKH,KAAK,CAACG,MAAD,CADV;UAEEM,IAAI,EAAE,IAFR;UAGEJ,MAAM,EAAE;YACNC,OAAO,EAAE,KADH;YAENC,MAAM,EAAE,KAFF;YAGNC,KAAK,EAAEP,MAAM,CAACO;UAHR;QAHV;MAFF;;IAYF;MACE,OAAOR,KAAP;EAjDJ;AAmDD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}