{"ast":null,"code":"/**\n * Content actions.\n * @module actions/content/content\n */\nimport { CREATE_CONTENT, DELETE_CONTENT, UPDATE_CONTENT, GET_CONTENT, ORDER_CONTENT, RESET_CONTENT, UPDATECOLUMNS_CONTENT, LOCK_CONTENT, UNLOCK_CONTENT } from '@plone/volto/constants/ActionTypes';\nimport { nestContent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n/**\n * Create content function.\n * @function createContent\n * @param {string} url Parent URL.\n * @param {Object|Array} content Content data.\n * @param {string} subrequest Optional. Key of the subrequest.\n * @returns {Object} Create content action.\n */\n\nexport function createContent(url, content, subrequest) {\n  return {\n    type: CREATE_CONTENT,\n    subrequest,\n    mode: 'serial',\n    request: Array.isArray(content) ? content.map(item => ({\n      op: 'post',\n      path: url,\n      data: item\n    })) : {\n      op: 'post',\n      path: url,\n      data: nestContent(content)\n    }\n  };\n}\n/**\n * Delete content function.\n * @function deleteContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Delete content action.\n */\n\nexport function deleteContent(urls) {\n  return {\n    type: DELETE_CONTENT,\n    mode: 'serial',\n    request: typeof urls === 'string' ? {\n      op: 'del',\n      path: urls\n    } : urls.map(url => ({\n      op: 'del',\n      path: url\n    }))\n  };\n}\n/**\n * Update content function.\n * @function updateContent\n * @param {string|Array} urls Content url(s).\n * @param {Object|Array} content Content data.\n * @param {Object|Array} headers Custom headers.\n * @returns {Object} Update content action.\n */\n\nexport function updateContent(urls, content, headers = {}) {\n  return {\n    type: UPDATE_CONTENT,\n    request: typeof urls === 'string' ? {\n      op: 'patch',\n      path: urls,\n      data: nestContent(content),\n      headers: headers\n    } : urls.map((url, index) => ({\n      op: 'patch',\n      path: url,\n      data: nestContent(content[index]),\n      headers: headers\n    }))\n  };\n}\n/**\n * Order content function\n * @function orderContent\n * @param {string} parent Parent url\n * @param {string} url Content url\n * @param {string|number} delta Order delta\n * @param {Array} subset Subset ids\n * @returns {Object} Order content action\n */\n\nexport function orderContent(parent, url, delta, subset) {\n  return {\n    type: ORDER_CONTENT,\n    request: {\n      op: 'patch',\n      path: parent,\n      data: {\n        ordering: {\n          obj_id: url,\n          delta,\n          subset_ids: subset\n        }\n      }\n    }\n  };\n}\n/**\n * Sort content function\n * @function sortContent\n * @param {string} url Content url\n * @param {string} on Sort on index\n * @param {string} order Sort order\n * @returns {Object} Sort content action\n */\n\nexport function sortContent(url, on, order) {\n  return {\n    type: UPDATE_CONTENT,\n    sort: {\n      on,\n      order\n    },\n    request: {\n      op: 'patch',\n      path: url,\n      data: {\n        sort: {\n          on,\n          order\n        }\n      }\n    }\n  };\n}\n/**\n * Get content function\n * @function getContent\n * @param {string} url Content url\n * @param {string} version Version id\n * @param {string} subrequest Key of the subrequest.\n * @param {boolean} fullobjects If full object information should be retrieved\n * @returns {Object} Get content action\n */\n\nexport function getContent(url, version = null, subrequest = null, page = null, fullobjects = false) {\n  const {\n    settings\n  } = config;\n  const query = Object.assign({}, fullobjects || settings.bbb_getContentFetchesFullobjects ? {\n    fullobjects: true\n  } : {}, page ? {\n    b_start: settings.defaultPageSize * (page - 1),\n    b_size: settings.defaultPageSize\n  } : {}, settings.isMultilingual ? {\n    expand: 'translations'\n  } : {});\n  let qs = Object.keys(query).map(function (key) {\n    return key + '=' + query[key];\n  }).join('&');\n  return {\n    type: GET_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}${version ? `/@history/${version}` : ''}${qs ? `?${qs}` : ''}`\n    }\n  };\n}\n/**\n * Reset content function\n * @function resetContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Get content action\n */\n\nexport function resetContent(subrequest = null) {\n  return {\n    type: RESET_CONTENT,\n    subrequest\n  };\n}\n/**\n * Add, remove or order indexes\n * @param {string} url Content url\n * @param {string} index indexes with order\n * @returns {Object} Index content action\n */\n\nexport function updateColumnsContent(url, index) {\n  return {\n    type: UPDATECOLUMNS_CONTENT,\n    indexcolumns: index\n  };\n}\n/**\n * Lock content function.\n * @function lockContent\n * @param {string} urls Content url(s)\n * @returns {Object} Lock content action.\n */\n\nexport function lockContent(urls) {\n  return {\n    type: LOCK_CONTENT,\n    mode: 'serial',\n    request: typeof urls === 'string' ? {\n      op: 'post',\n      path: `${urls}/@lock`\n    } : urls.map(url => ({\n      op: 'post',\n      path: `${url}/@lock`\n    }))\n  };\n}\n/**\n * Unlock content function.\n * @function unlockContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Unlock content action.\n */\n\nexport function unlockContent(urls, force = false) {\n  return {\n    type: UNLOCK_CONTENT,\n    mode: 'serial',\n    request: typeof urls === 'string' ? {\n      op: 'del',\n      path: `${urls}/@lock`,\n      data: force ? {\n        force: true\n      } : {}\n    } : urls.map(url => ({\n      op: 'del',\n      path: `${url}/@lock`,\n      data: force ? {\n        force: true\n      } : {}\n    }))\n  };\n}","map":{"version":3,"names":["CREATE_CONTENT","DELETE_CONTENT","UPDATE_CONTENT","GET_CONTENT","ORDER_CONTENT","RESET_CONTENT","UPDATECOLUMNS_CONTENT","LOCK_CONTENT","UNLOCK_CONTENT","nestContent","config","createContent","url","content","subrequest","type","mode","request","Array","isArray","map","item","op","path","data","deleteContent","urls","updateContent","headers","index","orderContent","parent","delta","subset","ordering","obj_id","subset_ids","sortContent","on","order","sort","getContent","version","page","fullobjects","settings","query","Object","assign","bbb_getContentFetchesFullobjects","b_start","defaultPageSize","b_size","isMultilingual","expand","qs","keys","key","join","resetContent","updateColumnsContent","indexcolumns","lockContent","unlockContent","force"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/actions/content/content.js"],"sourcesContent":["/**\n * Content actions.\n * @module actions/content/content\n */\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  UPDATE_CONTENT,\n  GET_CONTENT,\n  ORDER_CONTENT,\n  RESET_CONTENT,\n  UPDATECOLUMNS_CONTENT,\n  LOCK_CONTENT,\n  UNLOCK_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\nimport { nestContent } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\n/**\n * Create content function.\n * @function createContent\n * @param {string} url Parent URL.\n * @param {Object|Array} content Content data.\n * @param {string} subrequest Optional. Key of the subrequest.\n * @returns {Object} Create content action.\n */\nexport function createContent(url, content, subrequest) {\n  return {\n    type: CREATE_CONTENT,\n    subrequest,\n    mode: 'serial',\n    request: Array.isArray(content)\n      ? content.map((item) => ({ op: 'post', path: url, data: item }))\n      : { op: 'post', path: url, data: nestContent(content) },\n  };\n}\n\n/**\n * Delete content function.\n * @function deleteContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Delete content action.\n */\nexport function deleteContent(urls) {\n  return {\n    type: DELETE_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? { op: 'del', path: urls }\n        : urls.map((url) => ({ op: 'del', path: url })),\n  };\n}\n\n/**\n * Update content function.\n * @function updateContent\n * @param {string|Array} urls Content url(s).\n * @param {Object|Array} content Content data.\n * @param {Object|Array} headers Custom headers.\n * @returns {Object} Update content action.\n */\nexport function updateContent(urls, content, headers = {}) {\n  return {\n    type: UPDATE_CONTENT,\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'patch',\n            path: urls,\n            data: nestContent(content),\n            headers: headers,\n          }\n        : urls.map((url, index) => ({\n            op: 'patch',\n            path: url,\n            data: nestContent(content[index]),\n            headers: headers,\n          })),\n  };\n}\n\n/**\n * Order content function\n * @function orderContent\n * @param {string} parent Parent url\n * @param {string} url Content url\n * @param {string|number} delta Order delta\n * @param {Array} subset Subset ids\n * @returns {Object} Order content action\n */\nexport function orderContent(parent, url, delta, subset) {\n  return {\n    type: ORDER_CONTENT,\n    request: {\n      op: 'patch',\n      path: parent,\n      data: { ordering: { obj_id: url, delta, subset_ids: subset } },\n    },\n  };\n}\n\n/**\n * Sort content function\n * @function sortContent\n * @param {string} url Content url\n * @param {string} on Sort on index\n * @param {string} order Sort order\n * @returns {Object} Sort content action\n */\nexport function sortContent(url, on, order) {\n  return {\n    type: UPDATE_CONTENT,\n    sort: { on, order },\n    request: {\n      op: 'patch',\n      path: url,\n      data: { sort: { on, order } },\n    },\n  };\n}\n\n/**\n * Get content function\n * @function getContent\n * @param {string} url Content url\n * @param {string} version Version id\n * @param {string} subrequest Key of the subrequest.\n * @param {boolean} fullobjects If full object information should be retrieved\n * @returns {Object} Get content action\n */\nexport function getContent(\n  url,\n  version = null,\n  subrequest = null,\n  page = null,\n  fullobjects = false,\n) {\n  const { settings } = config;\n  const query = Object.assign(\n    {},\n    fullobjects || settings.bbb_getContentFetchesFullobjects\n      ? { fullobjects: true }\n      : {},\n    page\n      ? {\n          b_start: settings.defaultPageSize * (page - 1),\n          b_size: settings.defaultPageSize,\n        }\n      : {},\n    settings.isMultilingual ? { expand: 'translations' } : {},\n  );\n\n  let qs = Object.keys(query)\n    .map(function (key) {\n      return key + '=' + query[key];\n    })\n    .join('&');\n\n  return {\n    type: GET_CONTENT,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `${url}${version ? `/@history/${version}` : ''}${\n        qs ? `?${qs}` : ''\n      }`,\n    },\n  };\n}\n\n/**\n * Reset content function\n * @function resetContent\n * @param {string} subrequest Key of the subrequest.\n * @returns {Object} Get content action\n */\nexport function resetContent(subrequest = null) {\n  return {\n    type: RESET_CONTENT,\n    subrequest,\n  };\n}\n\n/**\n * Add, remove or order indexes\n * @param {string} url Content url\n * @param {string} index indexes with order\n * @returns {Object} Index content action\n */\nexport function updateColumnsContent(url, index) {\n  return {\n    type: UPDATECOLUMNS_CONTENT,\n    indexcolumns: index,\n  };\n}\n\n/**\n * Lock content function.\n * @function lockContent\n * @param {string} urls Content url(s)\n * @returns {Object} Lock content action.\n */\nexport function lockContent(urls) {\n  return {\n    type: LOCK_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? { op: 'post', path: `${urls}/@lock` }\n        : urls.map((url) => ({ op: 'post', path: `${url}/@lock` })),\n  };\n}\n\n/**\n * Unlock content function.\n * @function unlockContent\n * @param {string|Array} urls Content url(s).\n * @returns {Object} Unlock content action.\n */\nexport function unlockContent(urls, force = false) {\n  return {\n    type: UNLOCK_CONTENT,\n    mode: 'serial',\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'del',\n            path: `${urls}/@lock`,\n            data: force ? { force: true } : {},\n          }\n        : urls.map((url) => ({\n            op: 'del',\n            path: `${url}/@lock`,\n            data: force ? { force: true } : {},\n          })),\n  };\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}