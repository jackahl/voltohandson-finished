{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/WysiwygWidget.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * WysiwygWidget container.\n * @module components/manage/WysiwygWidget/WysiwygWidget\n */\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport redraft from 'redraft';\nimport { Form, Label, TextArea } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport configureStore from 'redux-mock-store';\nimport { MemoryRouter } from 'react-router-dom';\nimport config from '@plone/volto/registry';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst Editor = loadable({\n  resolved: {},\n\n  chunkName() {\n    return \"draft-js-plugins-editor\";\n  },\n\n  isReady(props) {\n    const key = this.resolve(props);\n\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n\n    return false;\n  },\n\n  importAsync: () => import(\n  /* webpackChunkName: \"draft-js-plugins-editor\" */\n  'draft-js-plugins-editor'),\n\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n\n  requireSync(props) {\n    const id = this.resolve(props);\n\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n\n    return eval('module.require')(id);\n  },\n\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"draft-js-plugins-editor\");\n    }\n\n    return eval('require.resolve')(\"draft-js-plugins-editor\");\n  }\n\n});\n_c = Editor;\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  delete: {\n    \"id\": \"Delete\",\n    \"defaultMessage\": \"Delete\"\n  }\n});\n/**\n * WysiwygWidget HTML richtext editing widget\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Rich text\",\n *  widget: 'richtext',\n * }\n * ```\n *\n */\n\nclass WysiwygWidgetComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygWidget\n   */\n  constructor(props) {\n    super(props);\n    const {\n      stateFromHTML\n    } = props.draftJsImportHtml;\n    const {\n      EditorState\n    } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n    this.draftConfig = config.settings.richtextEditorSettings(props);\n\n    if (!__SERVER__) {\n      let editorState;\n\n      if (props.value && props.value.data) {\n        const contentState = stateFromHTML(props.value.data, {\n          customBlockFn: this.draftConfig.FromHTMLCustomBlockFn\n        });\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons\n      });\n      this.state = {\n        editorState,\n        inlineToolbarPlugin\n      };\n    }\n\n    this.schema = {\n      fieldsets: [{\n        id: 'default',\n        title: props.intl.formatMessage(messages.default),\n        fields: ['title', 'id', 'description', 'required']\n      }],\n      properties: {\n        id: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.idTitle),\n          description: props.intl.formatMessage(messages.idDescription)\n        },\n        title: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.title)\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: props.intl.formatMessage(messages.description)\n        },\n        required: {\n          type: 'boolean',\n          title: props.intl.formatMessage(messages.required)\n        }\n      },\n      required: ['id', 'title']\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n\n\n  onChange(editorState) {\n    const {\n      convertToRaw\n    } = this.props.draftJs;\n    this.setState({\n      editorState\n    });\n    const mockStore = configureStore();\n    this.props.onChange(this.props.id, {\n      'content-type': this.props.value ? this.props.value['content-type'] : 'text/html',\n      encoding: this.props.value ? this.props.value.encoding : 'utf8',\n      data: ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n        store: mockStore({\n          userSession: {\n            token: this.props.token\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, __jsx(MemoryRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, redraft(convertToRaw(editorState.getCurrentContent()), config.settings.richtextViewSettings.ToHTMLRenderers, config.settings.richtextViewSettings.ToHTMLOptions))))\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    const {\n      id,\n      title,\n      description,\n      required,\n      value,\n      error,\n      fieldSet\n    } = this.props;\n\n    if (__SERVER__) {\n      return __jsx(Form.Field, {\n        inline: true,\n        required: required,\n        error: error.length > 0,\n        className: description ? 'help' : '',\n        id: `${fieldSet || 'field'}-${id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }, __jsx(\"label\", {\n        htmlFor: `field-${id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }\n      }, title), __jsx(TextArea, {\n        id: id,\n        name: id,\n        value: value ? value.data : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }\n      }), description && __jsx(\"p\", {\n        className: \"help\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 29\n        }\n      }, description), _map(error, message => __jsx(Label, {\n        key: message,\n        basic: true,\n        color: \"red\",\n        pointing: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }\n      }, message))));\n    }\n\n    const {\n      InlineToolbar\n    } = this.state.inlineToolbarPlugin;\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      className: \"wysiwyg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      style: {\n        boxSizing: 'initial'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }\n    }, this.props.onChange ? __jsx(React.Fragment, null, __jsx(Editor, {\n      id: `field-${id}`,\n      readOnly: this.props.isDisabled,\n      onChange: this.onChange,\n      editorState: this.state.editorState,\n      plugins: [this.state.inlineToolbarPlugin, ...this.draftConfig.richTextEditorPlugins],\n      placeholder: this.props.placeholder,\n      blockRenderMap: this.draftConfig.extendedBlockRenderMap,\n      blockStyleFn: this.draftConfig.blockStyleFn,\n      customStyleMap: this.draftConfig.customStyleMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 15\n      }\n    }), this.props.onChange && __jsx(InlineToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 39\n      }\n    })) : __jsx(\"div\", {\n      className: \"DraftEditor-root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(WysiwygWidgetComponent, \"propTypes\", {\n  /**\n   * Id of the field\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Title of the field\n   */\n  title: PropTypes.string.isRequired,\n\n  /**\n   * Description of the field\n   */\n  description: PropTypes.string,\n\n  /**\n   * True if field is required\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Value of the field\n   */\n  value: PropTypes.shape({\n    /**\n     * Content type of the value\n     */\n    'content-type': PropTypes.string,\n\n    /**\n     * Data of the value\n     */\n    data: PropTypes.string,\n\n    /**\n     * Encoding of the value\n     */\n    encoding: PropTypes.string\n  }),\n\n  /**\n   * Placeholder for the editor\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * List of error messages\n   */\n  error: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * On change handler\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * On delete handler\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * On edit handler\n   */\n  onEdit: PropTypes.func,\n\n  /**\n   * Wrapped form component\n   */\n  wrapped: PropTypes.bool\n});\n\n_defineProperty(WysiwygWidgetComponent, \"defaultProps\", {\n  description: null,\n  required: false,\n  value: {\n    'content-type': 'text/html',\n    data: '',\n    encoding: 'utf8'\n  },\n  error: [],\n  onEdit: null,\n  onDelete: null,\n  onChange: null\n});\n\nexport const WysiwygWidget = compose(injectIntl, injectLazyLibs(['draftJs', 'draftJsBlockBreakoutPlugin', 'draftJsCreateBlockStyleButton', 'draftJsCreateInlineStyleButton', 'draftJsFilters', 'draftJsImportHtml', 'draftJsInlineToolbarPlugin', 'draftJsLibIsSoftNewlineEvent', 'immutableLib']), connect((state, props) => ({\n  token: state.userSession.token\n}), {}))(WysiwygWidgetComponent);\n_c2 = WysiwygWidget;\n\nconst Preloader = props => {\n  _s();\n\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? __jsx(WysiwygWidget, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 19\n    }\n  })) : null;\n};\n\n_s(Preloader, \"I8RUn14npbk54TheiKdNt4wCpsU=\");\n\n_c3 = Preloader;\nexport default Preloader;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Editor\");\n$RefreshReg$(_c2, \"WysiwygWidget\");\n$RefreshReg$(_c3, \"Preloader\");","map":{"version":3,"names":["React","Component","ReactDOMServer","PropTypes","connect","Provider","compose","redraft","Form","Label","TextArea","defineMessages","injectIntl","configureStore","MemoryRouter","config","FormFieldWrapper","loadable","injectLazyLibs","Editor","messages","default","idTitle","idDescription","title","description","required","delete","WysiwygWidgetComponent","constructor","props","stateFromHTML","draftJsImportHtml","EditorState","draftJs","createInlineToolbarPlugin","draftJsInlineToolbarPlugin","draftConfig","settings","richtextEditorSettings","__SERVER__","editorState","value","data","contentState","customBlockFn","FromHTMLCustomBlockFn","createWithContent","createEmpty","inlineToolbarPlugin","structure","richTextEditorInlineToolbarButtons","state","schema","fieldsets","id","intl","formatMessage","fields","properties","type","widget","onChange","bind","convertToRaw","setState","mockStore","encoding","renderToStaticMarkup","userSession","token","getCurrentContent","richtextViewSettings","ToHTMLRenderers","ToHTMLOptions","render","error","fieldSet","length","message","InlineToolbar","boxSizing","isDisabled","richTextEditorPlugins","placeholder","extendedBlockRenderMap","blockStyleFn","customStyleMap","string","isRequired","bool","shape","arrayOf","func","onDelete","onEdit","wrapped","WysiwygWidget","Preloader","loaded","setLoaded","useState","useEffect","load","then"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/WysiwygWidget.jsx"],"sourcesContent":["/**\n * WysiwygWidget container.\n * @module components/manage/WysiwygWidget/WysiwygWidget\n */\n\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport redraft from 'redraft';\nimport { Form, Label, TextArea } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport configureStore from 'redux-mock-store';\nimport { MemoryRouter } from 'react-router-dom';\nimport config from '@plone/volto/registry';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nimport loadable from '@loadable/component';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst Editor = loadable(() => import('draft-js-plugins-editor'));\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n});\n\n/**\n * WysiwygWidget HTML richtext editing widget\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Rich text\",\n *  widget: 'richtext',\n * }\n * ```\n *\n */\nclass WysiwygWidgetComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Description of the field\n     */\n    description: PropTypes.string,\n    /**\n     * True if field is required\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.shape({\n      /**\n       * Content type of the value\n       */\n      'content-type': PropTypes.string,\n      /**\n       * Data of the value\n       */\n      data: PropTypes.string,\n      /**\n       * Encoding of the value\n       */\n      encoding: PropTypes.string,\n    }),\n    /**\n     * Placeholder for the editor\n     */\n    placeholder: PropTypes.string,\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func,\n    /**\n     * On delete handler\n     */\n    onDelete: PropTypes.func,\n    /**\n     * On edit handler\n     */\n    onEdit: PropTypes.func,\n    /**\n     * Wrapped form component\n     */\n    wrapped: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    value: {\n      'content-type': 'text/html',\n      data: '',\n      encoding: 'utf8',\n    },\n    error: [],\n    onEdit: null,\n    onDelete: null,\n    onChange: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygWidget\n   */\n  constructor(props) {\n    super(props);\n\n    const { stateFromHTML } = props.draftJsImportHtml;\n    const { EditorState } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n\n    this.draftConfig = config.settings.richtextEditorSettings(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.value && props.value.data) {\n        const contentState = stateFromHTML(props.value.data, {\n          customBlockFn: this.draftConfig.FromHTMLCustomBlockFn,\n        });\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = { editorState, inlineToolbarPlugin };\n    }\n\n    this.schema = {\n      fieldsets: [\n        {\n          id: 'default',\n          title: props.intl.formatMessage(messages.default),\n          fields: ['title', 'id', 'description', 'required'],\n        },\n      ],\n      properties: {\n        id: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.idTitle),\n          description: props.intl.formatMessage(messages.idDescription),\n        },\n        title: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.title),\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: props.intl.formatMessage(messages.description),\n        },\n        required: {\n          type: 'boolean',\n          title: props.intl.formatMessage(messages.required),\n        },\n      },\n      required: ['id', 'title'],\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const { convertToRaw } = this.props.draftJs;\n    this.setState({ editorState });\n    const mockStore = configureStore();\n\n    this.props.onChange(this.props.id, {\n      'content-type': this.props.value\n        ? this.props.value['content-type']\n        : 'text/html',\n      encoding: this.props.value ? this.props.value.encoding : 'utf8',\n      data: ReactDOMServer.renderToStaticMarkup(\n        <Provider\n          store={mockStore({\n            userSession: {\n              token: this.props.token,\n            },\n          })}\n        >\n          <MemoryRouter>\n            {redraft(\n              convertToRaw(editorState.getCurrentContent()),\n              config.settings.richtextViewSettings.ToHTMLRenderers,\n              config.settings.richtextViewSettings.ToHTMLOptions,\n            )}\n          </MemoryRouter>\n        </Provider>,\n      ),\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      description,\n      required,\n      value,\n      error,\n      fieldSet,\n    } = this.props;\n\n    if (__SERVER__) {\n      return (\n        <Form.Field\n          inline\n          required={required}\n          error={error.length > 0}\n          className={description ? 'help' : ''}\n          id={`${fieldSet || 'field'}-${id}`}\n        >\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n            <TextArea id={id} name={id} value={value ? value.data : ''} />\n            {description && <p className=\"help\">{description}</p>}\n            {map(error, (message) => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </div>\n        </Form.Field>\n      );\n    }\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n\n    return (\n      <FormFieldWrapper {...this.props} className=\"wysiwyg\">\n        <div style={{ boxSizing: 'initial' }}>\n          {this.props.onChange ? (\n            <>\n              <Editor\n                id={`field-${id}`}\n                readOnly={this.props.isDisabled}\n                onChange={this.onChange}\n                editorState={this.state.editorState}\n                plugins={[\n                  this.state.inlineToolbarPlugin,\n                  ...this.draftConfig.richTextEditorPlugins,\n                ]}\n                placeholder={this.props.placeholder}\n                blockRenderMap={this.draftConfig.extendedBlockRenderMap}\n                blockStyleFn={this.draftConfig.blockStyleFn}\n                customStyleMap={this.draftConfig.customStyleMap}\n              />\n              {this.props.onChange && <InlineToolbar />}\n            </>\n          ) : (\n            <div className=\"DraftEditor-root\" />\n          )}\n        </div>\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const WysiwygWidget = compose(\n  injectIntl,\n  injectLazyLibs([\n    'draftJs',\n    'draftJsBlockBreakoutPlugin',\n    'draftJsCreateBlockStyleButton',\n    'draftJsCreateInlineStyleButton',\n    'draftJsFilters',\n    'draftJsImportHtml',\n    'draftJsInlineToolbarPlugin',\n    'draftJsLibIsSoftNewlineEvent',\n    'immutableLib',\n  ]),\n  connect(\n    (state, props) => ({\n      token: state.userSession.token,\n    }),\n    {},\n  ),\n)(WysiwygWidgetComponent);\n\nconst Preloader = (props) => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? <WysiwygWidget {...props} /> : null;\n};\n\nexport default Preloader;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Required","defaultMessage":"Required"},{"id":"Delete","defaultMessage":"Delete"}]}},"sourceType":"module"}