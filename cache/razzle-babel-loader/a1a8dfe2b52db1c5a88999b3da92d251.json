{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\n/**\n * Hook used to detect clicks outside a component (or an escape key press).\n * onTriggered function is triggered on `click` or escape `keyup` event.\n */\n\nexport function useDetectClickOutside(_ref) {\n  _s();\n\n  let {\n    onTriggered,\n    disableClick,\n    disableKeys,\n    allowAnyKey,\n    triggerKeys\n  } = _ref;\n  const ref = useRef(null);\n  const keyListener = useCallback(e => {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  const clickListener = useCallback(e => {\n    if (ref && ref.current) {\n      if (!doesNodeContainClick(ref.current, e)) {\n        onTriggered(e);\n      }\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [ref.current]);\n  useEffect(() => {\n    // We attach the events to `window`, since the React synthetic event system is\n    // attached in there, so if we stopPropagation on `onClick` then it does not stop\n    // if the event is attached in `document`\n    // https://stackoverflow.com/questions/24415631/reactjs-syntheticevent-stoppropagation-only-works-with-react-events/52879137#52879137\n    // https://gist.github.com/ggregoire/ce7bc946212920c0a6bad8125567d001\n    // https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2\n    !disableClick && window.addEventListener('click', clickListener);\n    !disableKeys && window.addEventListener('keyup', keyListener);\n    return () => {\n      !disableClick && window.removeEventListener('click', clickListener);\n      !disableKeys && window.removeEventListener('keyup', keyListener);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return ref;\n}\n\n_s(useDetectClickOutside, \"yn0AyjgD0aVBjNjxxrDPfQ2H8pI=\");","map":{"version":3,"names":["useCallback","useEffect","useRef","doesNodeContainClick","useDetectClickOutside","onTriggered","disableClick","disableKeys","allowAnyKey","triggerKeys","ref","keyListener","e","includes","key","clickListener","current","window","addEventListener","removeEventListener"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Utils/useDetectClickOutside.js"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\n\n/**\n * Hook used to detect clicks outside a component (or an escape key press).\n * onTriggered function is triggered on `click` or escape `keyup` event.\n */\nexport function useDetectClickOutside({\n  onTriggered,\n  disableClick,\n  disableKeys,\n  allowAnyKey,\n  triggerKeys,\n}) {\n  const ref = useRef(null);\n\n  const keyListener = useCallback((e) => {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const clickListener = useCallback(\n    (e) => {\n      if (ref && ref.current) {\n        if (!doesNodeContainClick(ref.current, e)) {\n          onTriggered(e);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ref.current],\n  );\n\n  useEffect(() => {\n    // We attach the events to `window`, since the React synthetic event system is\n    // attached in there, so if we stopPropagation on `onClick` then it does not stop\n    // if the event is attached in `document`\n    // https://stackoverflow.com/questions/24415631/reactjs-syntheticevent-stoppropagation-only-works-with-react-events/52879137#52879137\n    // https://gist.github.com/ggregoire/ce7bc946212920c0a6bad8125567d001\n    // https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2\n    !disableClick && window.addEventListener('click', clickListener);\n    !disableKeys && window.addEventListener('keyup', keyListener);\n    return () => {\n      !disableClick && window.removeEventListener('click', clickListener);\n      !disableKeys && window.removeEventListener('keyup', keyListener);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return ref;\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,oBAAT,QAAqC,qCAArC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,OAMJ;EAAA;;EAAA,IANmC;IACpCC,WADoC;IAEpCC,YAFoC;IAGpCC,WAHoC;IAIpCC,WAJoC;IAKpCC;EALoC,CAMnC;EACD,MAAMC,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB;EAEA,MAAMS,WAAW,GAAGX,WAAW,CAAEY,CAAD,IAAO;IACrC,IAAIJ,WAAJ,EAAiB;MACfH,WAAW,CAACO,CAAD,CAAX;IACD,CAFD,MAEO,IAAIH,WAAJ,EAAiB;MACtB,IAAIA,WAAW,CAACI,QAAZ,CAAqBD,CAAC,CAACE,GAAvB,CAAJ,EAAiC;QAC/BT,WAAW,CAACO,CAAD,CAAX;MACD;IACF,CAJM,MAIA;MACL,IAAIA,CAAC,CAACE,GAAF,KAAU,QAAd,EAAwB;QACtBT,WAAW,CAACO,CAAD,CAAX;MACD;IACF,CAXoC,CAYrC;;EACD,CAb8B,EAa5B,EAb4B,CAA/B;EAeA,MAAMG,aAAa,GAAGf,WAAW,CAC9BY,CAAD,IAAO;IACL,IAAIF,GAAG,IAAIA,GAAG,CAACM,OAAf,EAAwB;MACtB,IAAI,CAACb,oBAAoB,CAACO,GAAG,CAACM,OAAL,EAAcJ,CAAd,CAAzB,EAA2C;QACzCP,WAAW,CAACO,CAAD,CAAX;MACD;IACF;EACF,CAP8B,EAQ/B;EACA,CAACF,GAAG,CAACM,OAAL,CAT+B,CAAjC;EAYAf,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA,CAACK,YAAD,IAAiBW,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,aAAjC,CAAjB;IACA,CAACR,WAAD,IAAgBU,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCP,WAAjC,CAAhB;IACA,OAAO,MAAM;MACX,CAACL,YAAD,IAAiBW,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCJ,aAApC,CAAjB;MACA,CAACR,WAAD,IAAgBU,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCR,WAApC,CAAhB;IACD,CAHD,CATc,CAad;EACD,CAdQ,EAcN,EAdM,CAAT;EAgBA,OAAOD,GAAP;AACD;;GArDeN,qB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}