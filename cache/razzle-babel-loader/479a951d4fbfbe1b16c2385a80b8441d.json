{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Maps/Edit.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { compose } from 'redux';\nimport { Icon, SidebarPortal, MapsSidebar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    \"id\": \"Enter map Embed Code\",\n    \"defaultMessage\": \"Enter map Embed Code\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  GoogleMapsEmbeddedBlock: {\n    \"id\": \"Google Maps Embedded Block\",\n    \"defaultMessage\": \"Google Maps Embedded Block\"\n  }\n});\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\n\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChangeUrl\", ({\n      target\n    }) => {\n      this.setState({\n        url: target.value\n      });\n    });\n\n    _defineProperty(this, \"resetSubmitUrl\", () => {\n      this.setState({\n        url: ''\n      });\n    });\n\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n  }\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || nextProps.selected || !_isEqual(this.props.data, nextProps.data);\n  }\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      url: this.getSrc(this.state.url)\n    }));\n  }\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n\n\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation(); // TODO: Do something on ESC key\n    }\n  }\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n\n\n  getSrc(embed) {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n\n    if (iframe.length === 0) {\n      this.setState({\n        error: true\n      });\n      return '';\n    }\n\n    this.setState({\n      error: false\n    });\n    return iframe[0].src;\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.MapsBlockInputPlaceholder);\n    return __jsx(\"div\", {\n      className: cx('block maps align', {\n        center: !Boolean(this.props.data.align)\n      }, this.props.data.align),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }\n    }, this.props.data.url ? __jsx(\"div\", {\n      className: cx('maps-inner', {\n        'full-width': this.props.data.align === 'full'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }, __jsx(\"iframe\", {\n      title: this.props.intl.formatMessage(messages.GoogleMapsEmbeddedBlock),\n      src: this.props.data.url,\n      className: \"google-map\",\n      frameBorder: \"0\",\n      allowFullScreen: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    })) : __jsx(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }\n    }, __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: mapsBlockSVG,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      className: \"toolbar-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      onKeyDown: this.onKeyDownVariantMenuForm,\n      onChange: this.onChangeUrl,\n      placeholder: placeholder,\n      value: this.state.url // Prevents propagation to the Dropzone and the opening\n      // of the upload browser dialog\n      ,\n      onClick: e => e.stopPropagation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }), this.state.url && __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      basic: true,\n      className: \"cancel\",\n      onClick: e => {\n        e.stopPropagation();\n        this.setState({\n          url: ''\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 23\n      }\n    }))), __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      basic: true,\n      primary: true,\n      onClick: e => {\n        e.stopPropagation();\n        this.onSubmitUrl();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 19\n      }\n    }, __jsx(Icon, {\n      name: aheadSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    })))), __jsx(\"div\", {\n      className: \"message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n      defaultMessage: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }\n    }), this.state.error && __jsx(\"div\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Embed code error, please follow the instructions and try again.\",\n      defaultMessage: \"Embed code error, please follow the instructions and try again.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 21\n      }\n    }))))), !this.props.selected && __jsx(\"div\", {\n      className: \"map-overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 34\n      }\n    }), __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }\n    }, __jsx(MapsSidebar, _extends({}, this.props, {\n      resetSubmitUrl: this.resetSubmitUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n});\n\nexport default compose(injectIntl, withBlockExtensions)(Edit);","map":{"version":3,"names":["React","Component","PropTypes","Button","Input","Message","defineMessages","FormattedMessage","injectIntl","cx","withBlockExtensions","compose","Icon","SidebarPortal","MapsSidebar","clearSVG","aheadSVG","mapsBlockSVG","messages","MapsBlockInputPlaceholder","left","right","center","full","GoogleMapsEmbeddedBlock","Edit","constructor","props","target","setState","url","value","getSrc","bind","state","error","onSubmitUrl","onKeyDownVariantMenuForm","shouldComponentUpdate","nextProps","selected","data","onChangeBlock","block","e","key","preventDefault","stopPropagation","embed","parser","DOMParser","doc","parseFromString","iframe","getElementsByTagName","length","src","render","placeholder","intl","formatMessage","Boolean","align","onChangeUrl","color","resetSubmitUrl","bool","isRequired","string","index","number","objectOf","any","pathname","func","onSelectBlock","onDeleteBlock","onFocusPreviousBlock","onFocusNextBlock","handleKeyDown"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Maps/Edit.jsx"],"sourcesContent":["/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { compose } from 'redux';\nimport { Icon, SidebarPortal, MapsSidebar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null,\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return (\n      this.props.selected ||\n      nextProps.selected ||\n      !isEqual(this.props.data, nextProps.data)\n    );\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl = ({ target }) => {\n    this.setState({\n      url: target.value,\n    });\n  };\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.getSrc(this.state.url),\n    });\n  }\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }\n\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  getSrc(embed) {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      this.setState({ error: true });\n      return '';\n    }\n    this.setState({ error: false });\n    return iframe[0].src;\n  }\n\n  resetSubmitUrl = () => {\n    this.setState({\n      url: '',\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.MapsBlockInputPlaceholder);\n    return (\n      <div\n        className={cx(\n          'block maps align',\n          {\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {this.props.data.url ? (\n          <div\n            className={cx('maps-inner', {\n              'full-width': this.props.data.align === 'full',\n            })}\n          >\n            <iframe\n              title={this.props.intl.formatMessage(\n                messages.GoogleMapsEmbeddedBlock,\n              )}\n              src={this.props.data.url}\n              className=\"google-map\"\n              frameBorder=\"0\"\n              allowFullScreen\n            />\n          </div>\n        ) : (\n          <Message>\n            <center>\n              <img src={mapsBlockSVG} alt=\"\" />\n              <div className=\"toolbar-inner\">\n                <Input\n                  onKeyDown={this.onKeyDownVariantMenuForm}\n                  onChange={this.onChangeUrl}\n                  placeholder={placeholder}\n                  value={this.state.url}\n                  // Prevents propagation to the Dropzone and the opening\n                  // of the upload browser dialog\n                  onClick={(e) => e.stopPropagation()}\n                />\n                {this.state.url && (\n                  <Button.Group>\n                    <Button\n                      basic\n                      className=\"cancel\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        this.setState({ url: '' });\n                      }}\n                    >\n                      <Icon name={clearSVG} size=\"30px\" />\n                    </Button>\n                  </Button.Group>\n                )}\n                <Button.Group>\n                  <Button\n                    basic\n                    primary\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onSubmitUrl();\n                    }}\n                  >\n                    <Icon name={aheadSVG} size=\"30px\" />\n                  </Button>\n                </Button.Group>\n              </div>\n              <div className=\"message-text\">\n                <FormattedMessage\n                  id=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                  defaultMessage=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                />\n                {this.state.error && (\n                  <div style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Embed code error, please follow the instructions and try again.\"\n                      defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                    />\n                  </div>\n                )}\n              </div>\n            </center>\n          </Message>\n        )}\n        {!this.props.selected && <div className=\"map-overlay\" />}\n        <SidebarPortal selected={this.props.selected}>\n          <MapsSidebar {...this.props} resetSubmitUrl={this.resetSubmitUrl} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default compose(injectIntl, withBlockExtensions)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Enter map Embed Code","defaultMessage":"Enter map Embed Code"},{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Full","defaultMessage":"Full"},{"id":"Google Maps Embedded Block","defaultMessage":"Google Maps Embedded Block"},{"id":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.","defaultMessage":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it."},{"id":"Embed code error, please follow the instructions and try again.","defaultMessage":"Embed code error, please follow the instructions and try again."}]}},"sourceType":"module"}