{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _remove from \"lodash/remove\";\nimport _findIndex from \"lodash/findIndex\";\nimport _find from \"lodash/find\";\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/VocabularyTermsWidget.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * VocabularyTermsWidget\n * @module components/manage/Widgets/VocabularyTermsWidget\n * Widget for plone.schema.JSONField field meant for a SimpleVocabulary source\n * \n\nVOCABULARY_SCHEMA = json.dumps(\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"items\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"token\": {\"type\": \"string\"},\n                        \"titles\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"lang\": {\"type\": \"string\"},\n                                \"title\": {\"type\": \"string\"},\n                            }\n                        },\n                    }\n                }\n            }\n        },\n    }\n)\n\n\nclass IPloneconfSettings(Interface):\n\n    types_of_foo = schema.JSONField(\n        title=\"Types of Foo\",\n        description=\"Available types of a foo\",\n        required=False,\n        schema=VOCABULARY_SCHEMA,\n        widget=\"vocabularyterms\",\n        default={\"items\": [\n            {\n                \"token\": \"talk\",\n                \"titles\": {\n                    \"en\": \"Talk\",\n                    \"de\": \"Vortrag\",\n                }\n            },\n            {\n                \"token\": \"lightning-talk\",\n                \"titles\": {\n                    \"en\": \"Lightning-Talk\",\n                    \"de\": \"kÃ¼rzerer erleuchtender Vortrag\",\n                }\n            },\n        ]},\n        missing_value={\"items\": []},\n    )\n\n\n@provider(IVocabularyFactory)\ndef TalkTypesVocabulary(context):\n    name = \"ploneconf.types_of_talk\"\n    registry_record_value = api.portal.get_registry_record(name)\n    items = registry_record_value.get('items', [])\n    lang = api.portal.get_current_language()\n    return SimpleVocabulary.fromItems([[item['token'], item['token'], item['titles'][lang]] for item in items])\n\n\n * titles are editable\n * tokens are generated\n * \n * Purpose: Use this widget for a controlpanel field\n * that acts as a source of a vocabulary for a zope.schema.Choice field.\n * Vocabulary terms should change over time only in title, not value,\n * as vocabulary term values are stored on content type instances.\n *\n * Apply widget with `widget='vocabularyterms'`\n * Future widget directive coming: Apply widget with directive widget\n *\n * See storybook for a demo: Run\n * `yarn storybook`\n * or see https://docs.voltocms.com/storybook/\n */\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport { Button } from 'semantic-ui-react';\nimport { DragDropList, FormFieldWrapper, Icon, ObjectWidget } from '@plone/volto/components';\nimport { langmap } from '@plone/volto/helpers';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Vocabulary terms\",\n    \"defaultMessage\": \"Vocabulary terms\"\n  },\n  termtitle: {\n    \"id\": \"Vocabulary term\",\n    \"defaultMessage\": \"Vocabulary term\"\n  },\n  addTerm: {\n    \"id\": \"Add vocabulary term\",\n    \"defaultMessage\": \"Add term\"\n  },\n  removeTerm: {\n    \"id\": \"Remove term\",\n    \"defaultMessage\": \"Remove term\"\n  },\n  clearTermTitle: {\n    \"id\": \"Reset term title\",\n    \"defaultMessage\": \"Reset title\"\n  },\n  termtitlelabel: {\n    \"id\": \"Vocabulary term title\",\n    \"defaultMessage\": \"Title\"\n  }\n});\n\nconst VocabularyTermsWidget = props => {\n  _s();\n\n  var _vocabularyterms$map;\n\n  const {\n    id,\n    value = {},\n    onChange\n  } = props;\n  var widgetvalue = value;\n  const dispatch = useDispatch();\n  const [toFocusId, setToFocusId] = React.useState('');\n  const [editableToken, setEditableToken] = React.useState('');\n  const intl = useIntl();\n  React.useEffect(() => {\n    const element = document.getElementById(toFocusId);\n    element && element.focus();\n    setToFocusId('');\n  }, [dispatch, toFocusId]); // LEGACY: value from unordered zope.schema.Dict instead of zope.schema.JSONField\n\n  if (widgetvalue.items === undefined) {\n    widgetvalue = {\n      items: Object.keys(widgetvalue).map(key => {\n        return {\n          token: key,\n          titles: {\n            en: widgetvalue[key]\n          }\n        };\n      })\n    };\n  }\n\n  let vocabularyterms = widgetvalue.items;\n  let supportedLanguages = Object.keys((vocabularyterms === null || vocabularyterms === void 0 ? void 0 : (_vocabularyterms$map = vocabularyterms.map(el => el.titles)) === null || _vocabularyterms$map === void 0 ? void 0 : _vocabularyterms$map.pop()) || {});\n  const TermSchema = {\n    title: 'Translation of term',\n    fieldsets: [{\n      id: 'default',\n      title: 'Email',\n      fields: supportedLanguages\n    }],\n    properties: Object.fromEntries(supportedLanguages.map(languageIdentifier => {\n      var _langmap$languageIden, _langmap$languageIden2;\n\n      return [languageIdentifier, {\n        title: (_langmap$languageIden = (_langmap$languageIden2 = langmap[languageIdentifier]) === null || _langmap$languageIden2 === void 0 ? void 0 : _langmap$languageIden2.nativeName) !== null && _langmap$languageIden !== void 0 ? _langmap$languageIden : languageIdentifier\n      }];\n    })),\n    required: []\n  };\n\n  function onChangeFieldHandler(token, fieldid, fieldvalue) {\n    let index = _findIndex(widgetvalue.items, {\n      token: token\n    });\n\n    let newitems = widgetvalue.items;\n    newitems.splice(index, 1, {\n      token: token,\n      titles: fieldvalue\n    });\n    onChange(id, {\n      items: newitems\n    });\n  }\n\n  function addTermHandler(e) {\n    e.preventDefault();\n    const newtoken = uuid();\n    let newitems = widgetvalue.items;\n    newitems.push({\n      token: newtoken,\n      titles: Object.fromEntries(supportedLanguages.map(el => [el, '']))\n    });\n    onChange(id, {\n      items: newitems\n    });\n    setToFocusId(`field-${supportedLanguages[0]}-0-${id}-${newtoken}`);\n    setEditableToken(newtoken);\n  }\n\n  function swap(arr, from, to) {\n    arr.splice(from, 1, arr.splice(to, 1, arr[from])[0]);\n  }\n\n  let enhancedvocabularyterms = vocabularyterms.map(el => {\n    return _objectSpread(_objectSpread({}, el), {}, {\n      '@id': el.token\n    });\n  });\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"vocabularytermswidget dictwidget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"add-item-button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    \"aria-label\": intl.formatMessage(messages.termtitle),\n    onClick: e => {\n      addTermHandler(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: addSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }), intl.formatMessage(messages.addTerm))), __jsx(DragDropList, {\n    childList: enhancedvocabularyterms.map(o => [o['@id'], o]),\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      let newitems = widgetvalue.items;\n      swap(newitems, source.index, destination.index);\n      onChange(id, {\n        items: newitems\n      });\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }, dragProps => {\n    const {\n      child,\n      childId,\n      index\n    } = dragProps;\n    let termProps = {\n      index: index,\n      id,\n      vocabularyterms,\n      vterm: child,\n      onChange\n    };\n    return termsWrapper(dragProps, __jsx(ObjectWidget, {\n      id: `${id}-${child.token}`,\n      key: childId,\n      onChange: (fieldid, fieldvalue) => {\n        onChangeFieldHandler(child.token, fieldid, fieldvalue);\n      },\n      value: child.titles,\n      schema: TermSchema,\n      title: \"Translation of term\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }), _objectSpread({\n      editableToken,\n      setEditableToken\n    }, termProps));\n  }));\n};\n\n_s(VocabularyTermsWidget, \"ot3i1KzppDPwQMkxiHJ9phnIjoM=\", false, function () {\n  return [useDispatch, useIntl];\n});\n\n_c = VocabularyTermsWidget;\n\nconst termsWrapper = (_ref, OW, termProps) => {\n  let {\n    draginfo\n  } = _ref;\n  return __jsx(TermsWrapper, {\n    draginfo: draginfo,\n    termProps: termProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 3\n    }\n  }, OW);\n};\n\nconst TermsWrapper = props => {\n  _s2();\n\n  const intl = useIntl();\n  const {\n    termProps,\n    draginfo,\n    children\n  } = props;\n  const {\n    id,\n    vocabularyterms,\n    vterm,\n    onChange\n  } = termProps;\n\n  const _updateTermsWithNewToken = (term, newtoken) => {\n    let newitems = termProps.vocabularyterms;\n\n    let index = _findIndex(newitems, {\n      token: term.token\n    });\n\n    newitems.splice(index, 1, {\n      token: newtoken,\n      titles: newitems[index].titles\n    });\n    onChange(id, {\n      items: newitems\n    });\n  };\n\n  function onChangeTokenHandler(event) {\n    let value = event.target.value; // required token length: 3\n\n    if (value.length > 2) {\n      // check if value is different from already used tokens\n      if (_find(termProps.vocabularyterms, el => el.token === value)) {// token already token. Stay with uuid.\n      } else {\n        // `token '${value}' is OK`\n        _updateTermsWithNewToken(vterm, value);\n\n        termProps.setEditableToken('');\n      }\n    }\n  }\n\n  return __jsx(\"div\", _extends({\n    ref: draginfo.innerRef\n  }, draginfo.draggableProps, {\n    className: \"vocabularyterm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    style: {\n      alignItems: 'center',\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", _extends({}, draginfo.dragHandleProps, {\n    className: \"draghandlewrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 9\n    }\n  }), __jsx(Icon, {\n    name: dragSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    className: \"ui drag block inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }\n  }, children), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }\n  }, vterm.token === termProps.editableToken ? __jsx(\"input\", {\n    id: `token-${vterm.token}`,\n    title: \"Token\",\n    placeholder: \"token\",\n    onBlur: onChangeTokenHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }\n  }) : null, __jsx(Button, {\n    icon: true,\n    basic: true,\n    className: \"delete-button\",\n    title: intl.formatMessage(messages.removeTerm),\n    \"aria-label\": `${intl.formatMessage(messages.removeTerm)} #${vterm.token}`,\n    onClick: e => {\n      e.preventDefault();\n\n      _remove(vocabularyterms, el => el.token === vterm.token);\n\n      onChange(id, {\n        items: vocabularyterms\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"20px\",\n    color: \"#e40166\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 13\n    }\n  })))));\n};\n\n_s2(TermsWrapper, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n\n_c2 = TermsWrapper;\nexport default VocabularyTermsWidget;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VocabularyTermsWidget\");\n$RefreshReg$(_c2, \"TermsWrapper\");","map":{"version":3,"names":["React","useDispatch","defineMessages","useIntl","v4","uuid","Button","DragDropList","FormFieldWrapper","Icon","ObjectWidget","langmap","deleteSVG","addSVG","dragSVG","messages","title","termtitle","addTerm","removeTerm","clearTermTitle","termtitlelabel","VocabularyTermsWidget","props","id","value","onChange","widgetvalue","dispatch","toFocusId","setToFocusId","useState","editableToken","setEditableToken","intl","useEffect","element","document","getElementById","focus","items","undefined","Object","keys","map","key","token","titles","en","vocabularyterms","supportedLanguages","el","pop","TermSchema","fieldsets","fields","properties","fromEntries","languageIdentifier","nativeName","required","onChangeFieldHandler","fieldid","fieldvalue","index","newitems","splice","addTermHandler","e","preventDefault","newtoken","push","swap","arr","from","to","enhancedvocabularyterms","formatMessage","o","result","source","destination","dragProps","child","childId","termProps","vterm","termsWrapper","OW","draginfo","TermsWrapper","children","_updateTermsWithNewToken","term","onChangeTokenHandler","event","target","length","innerRef","draggableProps","alignItems","display","dragHandleProps"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/VocabularyTermsWidget.jsx"],"sourcesContent":["/**\n * VocabularyTermsWidget\n * @module components/manage/Widgets/VocabularyTermsWidget\n * Widget for plone.schema.JSONField field meant for a SimpleVocabulary source\n * \n\nVOCABULARY_SCHEMA = json.dumps(\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"items\": {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"token\": {\"type\": \"string\"},\n                        \"titles\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"lang\": {\"type\": \"string\"},\n                                \"title\": {\"type\": \"string\"},\n                            }\n                        },\n                    }\n                }\n            }\n        },\n    }\n)\n\n\nclass IPloneconfSettings(Interface):\n\n    types_of_foo = schema.JSONField(\n        title=\"Types of Foo\",\n        description=\"Available types of a foo\",\n        required=False,\n        schema=VOCABULARY_SCHEMA,\n        widget=\"vocabularyterms\",\n        default={\"items\": [\n            {\n                \"token\": \"talk\",\n                \"titles\": {\n                    \"en\": \"Talk\",\n                    \"de\": \"Vortrag\",\n                }\n            },\n            {\n                \"token\": \"lightning-talk\",\n                \"titles\": {\n                    \"en\": \"Lightning-Talk\",\n                    \"de\": \"kÃ¼rzerer erleuchtender Vortrag\",\n                }\n            },\n        ]},\n        missing_value={\"items\": []},\n    )\n\n\n@provider(IVocabularyFactory)\ndef TalkTypesVocabulary(context):\n    name = \"ploneconf.types_of_talk\"\n    registry_record_value = api.portal.get_registry_record(name)\n    items = registry_record_value.get('items', [])\n    lang = api.portal.get_current_language()\n    return SimpleVocabulary.fromItems([[item['token'], item['token'], item['titles'][lang]] for item in items])\n\n\n * titles are editable\n * tokens are generated\n * \n * Purpose: Use this widget for a controlpanel field\n * that acts as a source of a vocabulary for a zope.schema.Choice field.\n * Vocabulary terms should change over time only in title, not value,\n * as vocabulary term values are stored on content type instances.\n *\n * Apply widget with `widget='vocabularyterms'`\n * Future widget directive coming: Apply widget with directive widget\n *\n * See storybook for a demo: Run\n * `yarn storybook`\n * or see https://docs.voltocms.com/storybook/\n */\n\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { find, findIndex, remove } from 'lodash';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\n\nimport { Button } from 'semantic-ui-react';\n\nimport {\n  DragDropList,\n  FormFieldWrapper,\n  Icon,\n  ObjectWidget,\n} from '@plone/volto/components';\nimport { langmap } from '@plone/volto/helpers';\n\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Vocabulary terms',\n    defaultMessage: 'Vocabulary terms',\n  },\n  termtitle: {\n    id: 'Vocabulary term',\n    defaultMessage: 'Vocabulary term',\n  },\n  addTerm: {\n    id: 'Add vocabulary term',\n    defaultMessage: 'Add term',\n  },\n  removeTerm: {\n    id: 'Remove term',\n    defaultMessage: 'Remove term',\n  },\n  clearTermTitle: {\n    id: 'Reset term title',\n    defaultMessage: 'Reset title',\n  },\n  termtitlelabel: {\n    id: 'Vocabulary term title',\n    defaultMessage: 'Title',\n  },\n});\n\nconst VocabularyTermsWidget = (props) => {\n  const { id, value = {}, onChange } = props;\n  var widgetvalue = value;\n  const dispatch = useDispatch();\n  const [toFocusId, setToFocusId] = React.useState('');\n  const [editableToken, setEditableToken] = React.useState('');\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    const element = document.getElementById(toFocusId);\n    element && element.focus();\n    setToFocusId('');\n  }, [dispatch, toFocusId]);\n\n  // LEGACY: value from unordered zope.schema.Dict instead of zope.schema.JSONField\n  if (widgetvalue.items === undefined) {\n    widgetvalue = {\n      items: Object.keys(widgetvalue).map((key) => {\n        return {\n          token: key,\n          titles: {\n            en: widgetvalue[key],\n          },\n        };\n      }),\n    };\n  }\n\n  let vocabularyterms = widgetvalue.items;\n\n  let supportedLanguages = Object.keys(\n    vocabularyterms?.map((el) => el.titles)?.pop() || {},\n  );\n\n  const TermSchema = {\n    title: 'Translation of term',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Email',\n        fields: supportedLanguages,\n      },\n    ],\n    properties: Object.fromEntries(\n      supportedLanguages.map((languageIdentifier) => [\n        languageIdentifier,\n        {\n          title: langmap[languageIdentifier]?.nativeName ?? languageIdentifier,\n        },\n      ]),\n    ),\n    required: [],\n  };\n\n  function onChangeFieldHandler(token, fieldid, fieldvalue) {\n    let index = findIndex(widgetvalue.items, { token: token });\n    let newitems = widgetvalue.items;\n    newitems.splice(index, 1, {\n      token: token,\n      titles: fieldvalue,\n    });\n    onChange(id, {\n      items: newitems,\n    });\n  }\n\n  function addTermHandler(e) {\n    e.preventDefault();\n    const newtoken = uuid();\n    let newitems = widgetvalue.items;\n    newitems.push({\n      token: newtoken,\n      titles: Object.fromEntries(supportedLanguages.map((el) => [el, ''])),\n    });\n    onChange(id, {\n      items: newitems,\n    });\n    setToFocusId(`field-${supportedLanguages[0]}-0-${id}-${newtoken}`);\n    setEditableToken(newtoken);\n  }\n\n  function swap(arr, from, to) {\n    arr.splice(from, 1, arr.splice(to, 1, arr[from])[0]);\n  }\n\n  let enhancedvocabularyterms = vocabularyterms.map((el) => {\n    return { ...el, '@id': el.token };\n  });\n\n  return (\n    <FormFieldWrapper {...props} className=\"vocabularytermswidget dictwidget\">\n      <div className=\"add-item-button-wrapper\">\n        <Button\n          aria-label={intl.formatMessage(messages.termtitle)}\n          onClick={(e) => {\n            addTermHandler(e);\n          }}\n        >\n          <Icon name={addSVG} size=\"18px\" />\n          {intl.formatMessage(messages.addTerm)}\n        </Button>\n      </div>\n      <DragDropList\n        childList={enhancedvocabularyterms.map((o) => [o['@id'], o])}\n        onMoveItem={(result) => {\n          const { source, destination } = result;\n          if (!destination) {\n            return;\n          }\n          let newitems = widgetvalue.items;\n          swap(newitems, source.index, destination.index);\n          onChange(id, {\n            items: newitems,\n          });\n          return true;\n        }}\n      >\n        {(dragProps) => {\n          const { child, childId, index } = dragProps;\n          let termProps = {\n            index: index,\n            id,\n            vocabularyterms,\n            vterm: child,\n            onChange,\n          };\n          return termsWrapper(\n            dragProps,\n            <ObjectWidget\n              id={`${id}-${child.token}`}\n              key={childId}\n              onChange={(fieldid, fieldvalue) => {\n                onChangeFieldHandler(child.token, fieldid, fieldvalue);\n              }}\n              value={child.titles}\n              schema={TermSchema}\n              title=\"Translation of term\"\n            />,\n            { editableToken, setEditableToken, ...termProps },\n          );\n        }}\n      </DragDropList>\n    </FormFieldWrapper>\n  );\n};\n\nconst termsWrapper = ({ draginfo }, OW, termProps) => (\n  <TermsWrapper draginfo={draginfo} termProps={termProps}>\n    {OW}\n  </TermsWrapper>\n);\n\nconst TermsWrapper = (props) => {\n  const intl = useIntl();\n  const { termProps, draginfo, children } = props;\n  const { id, vocabularyterms, vterm, onChange } = termProps;\n\n  const _updateTermsWithNewToken = (term, newtoken) => {\n    let newitems = termProps.vocabularyterms;\n    let index = findIndex(newitems, { token: term.token });\n    newitems.splice(index, 1, {\n      token: newtoken,\n      titles: newitems[index].titles,\n    });\n    onChange(id, {\n      items: newitems,\n    });\n  };\n\n  function onChangeTokenHandler(event) {\n    let value = event.target.value;\n    // required token length: 3\n    if (value.length > 2) {\n      // check if value is different from already used tokens\n      if (find(termProps.vocabularyterms, (el) => el.token === value)) {\n        // token already token. Stay with uuid.\n      } else {\n        // `token '${value}' is OK`\n        _updateTermsWithNewToken(vterm, value);\n        termProps.setEditableToken('');\n      }\n    }\n  }\n\n  return (\n    <div\n      ref={draginfo.innerRef}\n      {...draginfo.draggableProps}\n      className=\"vocabularyterm\"\n    >\n      <div style={{ alignItems: 'center', display: 'flex' }}>\n        <div {...draginfo.dragHandleProps} className=\"draghandlewrapper\">\n          <Icon name={dragSVG} size=\"18px\" />\n        </div>\n        <div className=\"ui drag block inner\">{children}</div>\n        <div>\n          {vterm.token === termProps.editableToken ? (\n            <input\n              id={`token-${vterm.token}`}\n              title=\"Token\"\n              placeholder=\"token\"\n              onBlur={onChangeTokenHandler}\n            />\n          ) : null}\n          <Button\n            icon\n            basic\n            className=\"delete-button\"\n            title={intl.formatMessage(messages.removeTerm)}\n            aria-label={`${intl.formatMessage(messages.removeTerm)} #${\n              vterm.token\n            }`}\n            onClick={(e) => {\n              e.preventDefault();\n              remove(vocabularyterms, (el) => el.token === vterm.token);\n              onChange(id, { items: vocabularyterms });\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" color=\"#e40166\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default VocabularyTermsWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Vocabulary terms","defaultMessage":"Vocabulary terms"},{"id":"Vocabulary term","defaultMessage":"Vocabulary term"},{"id":"Add vocabulary term","defaultMessage":"Add term"},{"id":"Remove term","defaultMessage":"Remove term"},{"id":"Reset term title","defaultMessage":"Reset title"},{"id":"Vocabulary term title","defaultMessage":"Title"}]}},"sourceType":"module"}