{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/FileWidget.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { defineMessages, useIntl } from 'react-intl';\nconst imageMimetypes = ['image/png', 'image/jpeg', 'image/webp', 'image/jpg', 'image/gif', 'image/svg+xml'];\nconst Dropzone = loadable({\n  resolved: {},\n\n  chunkName() {\n    return \"react-dropzone\";\n  },\n\n  isReady(props) {\n    const key = this.resolve(props);\n\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n\n    return false;\n  },\n\n  importAsync: () => import(\n  /* webpackChunkName: \"react-dropzone\" */\n  'react-dropzone'),\n\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n\n  requireSync(props) {\n    const id = this.resolve(props);\n\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n\n    return eval('module.require')(id);\n  },\n\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-dropzone\");\n    }\n\n    return eval('require.resolve')(\"react-dropzone\");\n  }\n\n});\n_c = Dropzone;\nconst messages = defineMessages({\n  releaseDrag: {\n    \"id\": \"Drop files here ...\",\n    \"defaultMessage\": \"Drop files here ...\"\n  },\n  editFile: {\n    \"id\": \"Drop file here to replace the existing file\",\n    \"defaultMessage\": \"Drop file here to replace the existing file\"\n  },\n  fileDrag: {\n    \"id\": \"Drop file here to upload a new file\",\n    \"defaultMessage\": \"Drop file here to upload a new file\"\n  },\n  replaceFile: {\n    \"id\": \"Replace existing file\",\n    \"defaultMessage\": \"Replace existing file\"\n  },\n  addNewFile: {\n    \"id\": \"Choose a file\",\n    \"defaultMessage\": \"Choose a file\"\n  }\n});\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\n\nconst FileWidget = props => {\n  _s();\n\n  const {\n    id,\n    value,\n    onChange\n  } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n  const imgsrc = value !== null && value !== void 0 && value.download ? `${flattenToAppURL(value === null || value === void 0 ? void 0 : value.download)}?id=${Date.now()}` : null || value !== null && value !== void 0 && value.data ? `data:${value['content-type']};${value.encoding},${value.data}` : null;\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n\n  const onDrop = files => {\n    const file = files[0];\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name\n      });\n    });\n    let reader = new FileReader();\n\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n\n    reader.readAsDataURL(files[0]);\n  };\n\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }), __jsx(Dropzone, {\n    onDrop: onDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }\n  }, _ref => {\n    let {\n      getRootProps,\n      getInputProps,\n      isDragActive\n    } = _ref;\n    return __jsx(\"div\", _extends({\n      className: \"file-widget-dropzone\"\n    }, getRootProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }), isDragActive && __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 30\n      }\n    }), fileType ? __jsx(Image, {\n      className: \"image-preview\",\n      id: `field-${id}-image`,\n      size: \"small\",\n      src: imgsrc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }) : __jsx(\"div\", {\n      className: \"dropzone-placeholder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, isDragActive ? __jsx(\"p\", {\n      className: \"dropzone-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.releaseDrag)) : value ? __jsx(\"p\", {\n      className: \"dropzone-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.editFile)) : __jsx(\"p\", {\n      className: \"dropzone-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.fileDrag))), __jsx(\"label\", {\n      className: \"label-file-widget-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, value ? intl.formatMessage(messages.replaceFile) : intl.formatMessage(messages.addNewFile)), __jsx(\"input\", _extends({}, getInputProps({\n      type: 'file',\n      style: {\n        display: 'none'\n      }\n    }), {\n      id: `field-${id}`,\n      name: id,\n      type: \"file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    })));\n  }), __jsx(\"div\", {\n    className: \"field-file-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }, value && value.filename, value && __jsx(Button, {\n    icon: true,\n    basic: true,\n    className: \"delete-button\",\n    \"aria-label\": \"delete file\",\n    onClick: () => {\n      onChange(id, null);\n      setFileType(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: deleteSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }\n  }))));\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\n_s(FileWidget, \"aNj9YhSwy7mKt6m5uGk8lc9VMKY=\", false, function () {\n  return [useIntl];\n});\n\n_c2 = FileWidget;\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool\n};\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null\n};\nexport default _c3 = injectIntl(FileWidget);\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Dropzone\");\n$RefreshReg$(_c2, \"FileWidget\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["React","PropTypes","Button","Image","Dimmer","readAsDataURL","injectIntl","deleteSVG","Icon","FormFieldWrapper","loadable","flattenToAppURL","defineMessages","useIntl","imageMimetypes","Dropzone","messages","releaseDrag","editFile","fileDrag","replaceFile","addNewFile","FileWidget","props","id","value","onChange","fileType","setFileType","useState","intl","useEffect","includes","imgsrc","download","Date","now","data","encoding","onDrop","files","file","then","fields","match","filename","name","reader","FileReader","onload","result","imagePreview","document","getElementById","src","getRootProps","getInputProps","isDragActive","formatMessage","type","style","display","propTypes","string","isRequired","title","description","required","bool","error","arrayOf","shape","func","wrapped","defaultProps"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/FileWidget.jsx"],"sourcesContent":["/**\n * FileWidget component.\n * @module components/manage/Widgets/FileWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Image, Dimmer } from 'semantic-ui-react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { injectIntl } from 'react-intl';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst imageMimetypes = [\n  'image/png',\n  'image/jpeg',\n  'image/webp',\n  'image/jpg',\n  'image/gif',\n  'image/svg+xml',\n];\nconst Dropzone = loadable(() => import('react-dropzone'));\n\nconst messages = defineMessages({\n  releaseDrag: {\n    id: 'Drop files here ...',\n    defaultMessage: 'Drop files here ...',\n  },\n  editFile: {\n    id: 'Drop file here to replace the existing file',\n    defaultMessage: 'Drop file here to replace the existing file',\n  },\n  fileDrag: {\n    id: 'Drop file here to upload a new file',\n    defaultMessage: 'Drop file here to upload a new file',\n  },\n  replaceFile: {\n    id: 'Replace existing file',\n    defaultMessage: 'Replace existing file',\n  },\n  addNewFile: {\n    id: 'Choose a file',\n    defaultMessage: 'Choose a file',\n  },\n});\n\n/**\n * FileWidget component class.\n * @function FileWidget\n * @returns {string} Markup of the component.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  widget: 'file',\n * }\n * ```\n * or:\n *\n * ```jsx\n * {\n *  title: \"File\",\n *  type: 'object',\n * }\n * ```\n *\n */\nconst FileWidget = (props) => {\n  const { id, value, onChange } = props;\n  const [fileType, setFileType] = React.useState(false);\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    if (value && imageMimetypes.includes(value['content-type'])) {\n      setFileType(true);\n    }\n  }, [value]);\n\n  const imgsrc = value?.download\n    ? `${flattenToAppURL(value?.download)}?id=${Date.now()}`\n    : null || value?.data\n    ? `data:${value['content-type']};${value.encoding},${value.data}`\n    : null;\n\n  /**\n   * Drop handler\n   * @method onDrop\n   * @param {array} files File objects\n   * @returns {undefined}\n   */\n  const onDrop = (files) => {\n    const file = files[0];\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      onChange(id, {\n        data: fields[3],\n        encoding: fields[2],\n        'content-type': fields[1],\n        filename: file.name,\n      });\n    });\n\n    let reader = new FileReader();\n    reader.onload = function () {\n      const fields = reader.result.match(/^data:(.*);(.*),(.*)$/);\n      if (imageMimetypes.includes(fields[1])) {\n        setFileType(true);\n        let imagePreview = document.getElementById(`field-${id}-image`);\n        imagePreview.src = reader.result;\n      } else {\n        setFileType(false);\n      }\n    };\n    reader.readAsDataURL(files[0]);\n  };\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Dropzone onDrop={onDrop}>\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div className=\"file-widget-dropzone\" {...getRootProps()}>\n            {isDragActive && <Dimmer active></Dimmer>}\n            {fileType ? (\n              <Image\n                className=\"image-preview\"\n                id={`field-${id}-image`}\n                size=\"small\"\n                src={imgsrc}\n              />\n            ) : (\n              <div className=\"dropzone-placeholder\">\n                {isDragActive ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.releaseDrag)}\n                  </p>\n                ) : value ? (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.editFile)}\n                  </p>\n                ) : (\n                  <p className=\"dropzone-text\">\n                    {intl.formatMessage(messages.fileDrag)}\n                  </p>\n                )}\n              </div>\n            )}\n\n            <label className=\"label-file-widget-input\">\n              {value\n                ? intl.formatMessage(messages.replaceFile)\n                : intl.formatMessage(messages.addNewFile)}\n            </label>\n            <input\n              {...getInputProps({\n                type: 'file',\n                style: { display: 'none' },\n              })}\n              id={`field-${id}`}\n              name={id}\n              type=\"file\"\n            />\n          </div>\n        )}\n      </Dropzone>\n      <div className=\"field-file-name\">\n        {value && value.filename}\n        {value && (\n          <Button\n            icon\n            basic\n            className=\"delete-button\"\n            aria-label=\"delete file\"\n            onClick={() => {\n              onChange(id, null);\n              setFileType(false);\n            }}\n          >\n            <Icon name={deleteSVG} size=\"20px\" />\n          </Button>\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nFileWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.shape({\n    '@type': PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nFileWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n};\n\nexport default injectIntl(FileWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Drop files here ...","defaultMessage":"Drop files here ..."},{"id":"Drop file here to replace the existing file","defaultMessage":"Drop file here to replace the existing file"},{"id":"Drop file here to upload a new file","defaultMessage":"Drop file here to upload a new file"},{"id":"Replace existing file","defaultMessage":"Replace existing file"},{"id":"Choose a file","defaultMessage":"Choose a file"}]}},"sourceType":"module"}