{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/Facets.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { resolveExtension } from '@plone/volto/helpers/Extensions/withBlockExtensions';\nimport config from '@plone/volto/registry';\nimport { hasNonValueOperation, hasDateOperation } from '../utils';\n\nconst showFacet = index => {\n  const {\n    values\n  } = index;\n  return index ? hasNonValueOperation(index.operations || []) || hasDateOperation(index.operations || []) ? true : values && Object.keys(values).length > 0 : values && Object.keys(values).length > 0;\n};\n\nconst Facets = props => {\n  var _data$query, _data$query$query, _data$facets;\n\n  const {\n    querystring,\n    data = {},\n    facets,\n    setFacets,\n    facetWrapper,\n    isEditMode\n  } = props;\n  const {\n    search\n  } = config.blocks.blocksConfig;\n  const FacetWrapper = facetWrapper;\n  const query_to_values = Object.assign({}, ...((data === null || data === void 0 ? void 0 : (_data$query = data.query) === null || _data$query === void 0 ? void 0 : (_data$query$query = _data$query.query) === null || _data$query$query === void 0 ? void 0 : _data$query$query.map(({\n    i,\n    v\n  }) => ({\n    [i]: v\n  }))) || []));\n  return __jsx(React.Fragment, null, data === null || data === void 0 ? void 0 : (_data$facets = data.facets) === null || _data$facets === void 0 ? void 0 : _data$facets.filter(facetSettings => !facetSettings.hidden).map(facetSettings => {\n    var _facetSettings$field, _facetSettings$field2, _facetSettings$field3;\n\n    const field = facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field = facetSettings.field) === null || _facetSettings$field === void 0 ? void 0 : _facetSettings$field.value;\n    const index = querystring.indexes[field] || {};\n    const {\n      values = {}\n    } = index;\n    let choices = Object.keys(values).map(name => ({\n      value: name,\n      label: values[name].title\n    })) // filter the available values based on the allowed values in the\n    // base query\n    .filter(({\n      value\n    }) => query_to_values[field] ? query_to_values[field].includes(value) : true);\n    choices = choices.sort((a, b) => a.label.localeCompare(b.label, 'en', {\n      sensitivity: 'base'\n    }));\n    const isMulti = facetSettings.multiple;\n    const selectedValue = facets[facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field2 = facetSettings.field) === null || _facetSettings$field2 === void 0 ? void 0 : _facetSettings$field2.value]; // TODO :handle changing the type of facet (multi/nonmulti)\n\n    const {\n      view: FacetWidget,\n      stateToValue\n    } = resolveExtension('type', search.extensions.facetWidgets.types, facetSettings);\n    let value = stateToValue({\n      facetSettings,\n      index,\n      selectedValue\n    });\n    const {\n      rewriteOptions = (name, options) => options\n    } = search.extensions.facetWidgets;\n    return FacetWrapper && (isEditMode || showFacet(index)) ? __jsx(FacetWrapper, {\n      key: facetSettings['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(FacetWidget, {\n      facet: facetSettings,\n      choices: rewriteOptions(facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field3 = facetSettings.field) === null || _facetSettings$field3 === void 0 ? void 0 : _facetSettings$field3.value, choices),\n      isMulti: isMulti,\n      value: value,\n      isEditMode: isEditMode,\n      onChange: (id, value) => {\n        !isEditMode && setFacets(_objectSpread(_objectSpread({}, facets), {}, {\n          [id]: value\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    })) : '';\n  }));\n};\n\nexport default Facets;","map":{"version":3,"names":["React","resolveExtension","config","hasNonValueOperation","hasDateOperation","showFacet","index","values","operations","Object","keys","length","Facets","props","querystring","data","facets","setFacets","facetWrapper","isEditMode","search","blocks","blocksConfig","FacetWrapper","query_to_values","assign","query","map","i","v","filter","facetSettings","hidden","field","value","indexes","choices","name","label","title","includes","sort","a","b","localeCompare","sensitivity","isMulti","multiple","selectedValue","view","FacetWidget","stateToValue","extensions","facetWidgets","types","rewriteOptions","options","id"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/Facets.jsx"],"sourcesContent":["import React from 'react';\nimport { resolveExtension } from '@plone/volto/helpers/Extensions/withBlockExtensions';\nimport config from '@plone/volto/registry';\nimport { hasNonValueOperation, hasDateOperation } from '../utils';\n\nconst showFacet = (index) => {\n  const { values } = index;\n  return index\n    ? hasNonValueOperation(index.operations || []) ||\n      hasDateOperation(index.operations || [])\n      ? true\n      : values && Object.keys(values).length > 0\n    : values && Object.keys(values).length > 0;\n};\n\nconst Facets = (props) => {\n  const {\n    querystring,\n    data = {},\n    facets,\n    setFacets,\n    facetWrapper,\n    isEditMode,\n  } = props;\n  const { search } = config.blocks.blocksConfig;\n\n  const FacetWrapper = facetWrapper;\n  const query_to_values = Object.assign(\n    {},\n    ...(data?.query?.query?.map(({ i, v }) => ({ [i]: v })) || []),\n  );\n\n  return (\n    <>\n      {data?.facets\n        ?.filter((facetSettings) => !facetSettings.hidden)\n        .map((facetSettings) => {\n          const field = facetSettings?.field?.value;\n          const index = querystring.indexes[field] || {};\n          const { values = {} } = index;\n\n          let choices = Object.keys(values)\n            .map((name) => ({\n              value: name,\n              label: values[name].title,\n            }))\n            // filter the available values based on the allowed values in the\n            // base query\n            .filter(({ value }) =>\n              query_to_values[field]\n                ? query_to_values[field].includes(value)\n                : true,\n            );\n\n          choices = choices.sort((a, b) =>\n            a.label.localeCompare(b.label, 'en', { sensitivity: 'base' }),\n          );\n\n          const isMulti = facetSettings.multiple;\n          const selectedValue = facets[facetSettings?.field?.value];\n\n          // TODO :handle changing the type of facet (multi/nonmulti)\n\n          const { view: FacetWidget, stateToValue } = resolveExtension(\n            'type',\n            search.extensions.facetWidgets.types,\n            facetSettings,\n          );\n\n          let value = stateToValue({ facetSettings, index, selectedValue });\n\n          const {\n            rewriteOptions = (name, options) => options,\n          } = search.extensions.facetWidgets;\n\n          return FacetWrapper && (isEditMode || showFacet(index)) ? (\n            <FacetWrapper key={facetSettings['@id']}>\n              <FacetWidget\n                facet={facetSettings}\n                choices={rewriteOptions(facetSettings?.field?.value, choices)}\n                isMulti={isMulti}\n                value={value}\n                isEditMode={isEditMode}\n                onChange={(id, value) => {\n                  !isEditMode && setFacets({ ...facets, [id]: value });\n                }}\n              />\n            </FacetWrapper>\n          ) : (\n            ''\n          );\n        })}\n    </>\n  );\n};\n\nexport default Facets;\n"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,qDAAjC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,UAAvD;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAC3B,MAAM;IAAEC;EAAF,IAAaD,KAAnB;EACA,OAAOA,KAAK,GACRH,oBAAoB,CAACG,KAAK,CAACE,UAAN,IAAoB,EAArB,CAApB,IACAJ,gBAAgB,CAACE,KAAK,CAACE,UAAN,IAAoB,EAArB,CADhB,GAEE,IAFF,GAGED,MAAM,IAAIE,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,GAA6B,CAJjC,GAKRJ,MAAM,IAAIE,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,GAA6B,CAL3C;AAMD,CARD;;AAUA,MAAMC,MAAM,GAAIC,KAAD,IAAW;EAAA;;EACxB,MAAM;IACJC,WADI;IAEJC,IAAI,GAAG,EAFH;IAGJC,MAHI;IAIJC,SAJI;IAKJC,YALI;IAMJC;EANI,IAOFN,KAPJ;EAQA,MAAM;IAAEO;EAAF,IAAalB,MAAM,CAACmB,MAAP,CAAcC,YAAjC;EAEA,MAAMC,YAAY,GAAGL,YAArB;EACA,MAAMM,eAAe,GAAGf,MAAM,CAACgB,MAAP,CACtB,EADsB,EAEtB,IAAI,CAAAV,IAAI,SAAJ,IAAAA,IAAI,WAAJ,2BAAAA,IAAI,CAAEW,KAAN,iFAAaA,KAAb,wEAAoBC,GAApB,CAAwB,CAAC;IAAEC,CAAF;IAAKC;EAAL,CAAD,MAAe;IAAE,CAACD,CAAD,GAAKC;EAAP,CAAf,CAAxB,MAAuD,EAA3D,CAFsB,CAAxB;EAKA,OACE,4BACGd,IADH,aACGA,IADH,uCACGA,IAAI,CAAEC,MADT,iDACG,aACGc,MADH,CACWC,aAAD,IAAmB,CAACA,aAAa,CAACC,MAD5C,EAEEL,GAFF,CAEOI,aAAD,IAAmB;IAAA;;IACtB,MAAME,KAAK,GAAGF,aAAH,aAAGA,aAAH,+CAAGA,aAAa,CAAEE,KAAlB,yDAAG,qBAAsBC,KAApC;IACA,MAAM5B,KAAK,GAAGQ,WAAW,CAACqB,OAAZ,CAAoBF,KAApB,KAA8B,EAA5C;IACA,MAAM;MAAE1B,MAAM,GAAG;IAAX,IAAkBD,KAAxB;IAEA,IAAI8B,OAAO,GAAG3B,MAAM,CAACC,IAAP,CAAYH,MAAZ,EACXoB,GADW,CACNU,IAAD,KAAW;MACdH,KAAK,EAAEG,IADO;MAEdC,KAAK,EAAE/B,MAAM,CAAC8B,IAAD,CAAN,CAAaE;IAFN,CAAX,CADO,EAKZ;IACA;IANY,CAOXT,MAPW,CAOJ,CAAC;MAAEI;IAAF,CAAD,KACNV,eAAe,CAACS,KAAD,CAAf,GACIT,eAAe,CAACS,KAAD,CAAf,CAAuBO,QAAvB,CAAgCN,KAAhC,CADJ,GAEI,IAVM,CAAd;IAaAE,OAAO,GAAGA,OAAO,CAACK,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KACrBD,CAAC,CAACJ,KAAF,CAAQM,aAAR,CAAsBD,CAAC,CAACL,KAAxB,EAA+B,IAA/B,EAAqC;MAAEO,WAAW,EAAE;IAAf,CAArC,CADQ,CAAV;IAIA,MAAMC,OAAO,GAAGf,aAAa,CAACgB,QAA9B;IACA,MAAMC,aAAa,GAAGhC,MAAM,CAACe,aAAD,aAACA,aAAD,gDAACA,aAAa,CAAEE,KAAhB,0DAAC,sBAAsBC,KAAvB,CAA5B,CAvBsB,CAyBtB;;IAEA,MAAM;MAAEe,IAAI,EAAEC,WAAR;MAAqBC;IAArB,IAAsClD,gBAAgB,CAC1D,MAD0D,EAE1DmB,MAAM,CAACgC,UAAP,CAAkBC,YAAlB,CAA+BC,KAF2B,EAG1DvB,aAH0D,CAA5D;IAMA,IAAIG,KAAK,GAAGiB,YAAY,CAAC;MAAEpB,aAAF;MAAiBzB,KAAjB;MAAwB0C;IAAxB,CAAD,CAAxB;IAEA,MAAM;MACJO,cAAc,GAAG,CAAClB,IAAD,EAAOmB,OAAP,KAAmBA;IADhC,IAEFpC,MAAM,CAACgC,UAAP,CAAkBC,YAFtB;IAIA,OAAO9B,YAAY,KAAKJ,UAAU,IAAId,SAAS,CAACC,KAAD,CAA5B,CAAZ,GACL,MAAC,YAAD;MAAc,GAAG,EAAEyB,aAAa,CAAC,KAAD,CAAhC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,WAAD;MACE,KAAK,EAAEA,aADT;MAEE,OAAO,EAAEwB,cAAc,CAACxB,aAAD,aAACA,aAAD,gDAACA,aAAa,CAAEE,KAAhB,0DAAC,sBAAsBC,KAAvB,EAA8BE,OAA9B,CAFzB;MAGE,OAAO,EAAEU,OAHX;MAIE,KAAK,EAAEZ,KAJT;MAKE,UAAU,EAAEf,UALd;MAME,QAAQ,EAAE,CAACsC,EAAD,EAAKvB,KAAL,KAAe;QACvB,CAACf,UAAD,IAAeF,SAAS,iCAAMD,MAAN;UAAc,CAACyC,EAAD,GAAMvB;QAApB,GAAxB;MACD,CARH;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADK,GAcL,EAdF;EAgBD,CAzDF,CADH,CADF;AA8DD,CA/ED;;AAiFA,eAAetB,MAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}