{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/Table/TableButton.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { ToolbarButton } from '@plone/volto-slate/editor/ui';\nimport tableSVG from '@plone/volto/icons/table.svg';\nimport TableContainer from './TableContainer';\nimport './less/table.less';\nimport { Editor, Transforms } from 'slate';\n\nconst TableButton = _ref => {\n  let props = Object.assign({}, _ref);\n  const editor = useSlate();\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n  const [activeRow, setActiveRow] = React.useState(1);\n  const [activeColumn, setActiveColumn] = React.useState(1);\n  const defaultRowCount = 5;\n  const defaultColumnCount = 5;\n  const [rowCount, setRowCount] = React.useState(defaultRowCount);\n  const [columnCount, setColumnCount] = React.useState(defaultColumnCount);\n  const resetState = React.useCallback(() => {\n    setRowCount(defaultRowCount);\n    setColumnCount(defaultColumnCount);\n    setActiveRow(1);\n    setActiveColumn(1);\n  }, []);\n  const createEmptyCell = React.useCallback((formatAsColumnHeaders = false) => {\n    return {\n      type: formatAsColumnHeaders ? 'th' : 'td',\n      children: [{\n        type: 'p',\n        children: [{\n          text: ''\n        }]\n      }]\n    };\n  }, []);\n  const createEmptyRow = React.useCallback((cellCount, formatAsColumnHeaders = false) => {\n    // should contain at least one <td> or it is not valid that children is empty\n    const row = {\n      type: 'tr',\n      children: []\n    };\n\n    for (let i = 0; i < cellCount; ++i) {\n      row.children.push(createEmptyCell(formatAsColumnHeaders));\n    }\n\n    return row;\n  }, [createEmptyCell]);\n  /**\n   * @param {number} row Number of rows for the new empty table.\n   * @param {number} column Number of columns for the new empty table.\n   */\n\n  const insertEmptyTable = React.useCallback(({\n    row,\n    column\n  }) => {\n    const rows = [createEmptyRow(column, true)];\n\n    for (let i = 0; i < row - 1; ++i) {\n      rows.push(createEmptyRow(column));\n    }\n\n    const table = {\n      type: 'table',\n      children: [{\n        type: 'tbody',\n        children: rows\n      }]\n    };\n    Transforms.insertNodes(editor, [table], {\n      at: Editor.end(editor, [])\n    });\n  }, [createEmptyRow, editor]);\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    open: dropdownOpen,\n    onClose: () => {\n      resetState();\n      setDropdownOpen(false);\n    },\n    trigger: __jsx(ToolbarButton, _extends({}, props, {\n      className: \"slate-table-dropdown-button\",\n      onClick: () => {\n        if (dropdownOpen) {\n          resetState();\n        }\n\n        setDropdownOpen(!dropdownOpen);\n      },\n      icon: tableSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(Dropdown.Menu, {\n    className: \"slate-table-dropdown-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(TableContainer, {\n    rowCount: rowCount,\n    columnCount: columnCount,\n    activeColumn: activeColumn,\n    activeRow: activeRow,\n    onCellMouseEnter: ({\n      row,\n      column\n    }) => {\n      if (row > rowCount - 1) {\n        setRowCount(row + 1);\n      } else if (row < rowCount - 1) {\n        setRowCount(defaultRowCount);\n      }\n\n      if (column > columnCount - 1) {\n        setColumnCount(column + 1);\n      } else if (column < columnCount - 1) {\n        setColumnCount(defaultColumnCount);\n      }\n\n      if (row !== activeRow) {\n        setActiveRow(row);\n      }\n\n      if (column !== activeColumn) {\n        setActiveColumn(column);\n      }\n    },\n    onCellMouseLeave: ({\n      row,\n      column\n    }) => {} // `row` and `column` below are 1-based indices\n    ,\n    onCellClick: ({\n      row,\n      column\n    }) => {\n      insertEmptyTable({\n        row,\n        column\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default TableButton;","map":{"version":3,"names":["React","useSlate","Dropdown","ToolbarButton","tableSVG","TableContainer","Editor","Transforms","TableButton","props","editor","dropdownOpen","setDropdownOpen","useState","activeRow","setActiveRow","activeColumn","setActiveColumn","defaultRowCount","defaultColumnCount","rowCount","setRowCount","columnCount","setColumnCount","resetState","useCallback","createEmptyCell","formatAsColumnHeaders","type","children","text","createEmptyRow","cellCount","row","i","push","insertEmptyTable","column","rows","table","insertNodes","at","end"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/Table/TableButton.jsx"],"sourcesContent":["import React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { ToolbarButton } from '@plone/volto-slate/editor/ui';\n\nimport tableSVG from '@plone/volto/icons/table.svg';\nimport TableContainer from './TableContainer';\nimport './less/table.less';\nimport { Editor, Transforms } from 'slate';\n\nconst TableButton = ({ ...props }) => {\n  const editor = useSlate();\n\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  const [activeRow, setActiveRow] = React.useState(1);\n  const [activeColumn, setActiveColumn] = React.useState(1);\n\n  const defaultRowCount = 5;\n  const defaultColumnCount = 5;\n\n  const [rowCount, setRowCount] = React.useState(defaultRowCount);\n  const [columnCount, setColumnCount] = React.useState(defaultColumnCount);\n\n  const resetState = React.useCallback(() => {\n    setRowCount(defaultRowCount);\n    setColumnCount(defaultColumnCount);\n    setActiveRow(1);\n    setActiveColumn(1);\n  }, []);\n\n  const createEmptyCell = React.useCallback((formatAsColumnHeaders = false) => {\n    return {\n      type: formatAsColumnHeaders ? 'th' : 'td',\n      children: [{ type: 'p', children: [{ text: '' }] }],\n    };\n  }, []);\n\n  const createEmptyRow = React.useCallback(\n    (cellCount, formatAsColumnHeaders = false) => {\n      // should contain at least one <td> or it is not valid that children is empty\n      const row = { type: 'tr', children: [] };\n\n      for (let i = 0; i < cellCount; ++i) {\n        row.children.push(createEmptyCell(formatAsColumnHeaders));\n      }\n\n      return row;\n    },\n    [createEmptyCell],\n  );\n\n  /**\n   * @param {number} row Number of rows for the new empty table.\n   * @param {number} column Number of columns for the new empty table.\n   */\n  const insertEmptyTable = React.useCallback(\n    ({ row, column }) => {\n      const rows = [createEmptyRow(column, true)];\n      for (let i = 0; i < row - 1; ++i) {\n        rows.push(createEmptyRow(column));\n      }\n\n      const table = {\n        type: 'table',\n        children: [\n          {\n            type: 'tbody',\n            children: rows,\n          },\n        ],\n      };\n\n      Transforms.insertNodes(editor, [table], {\n        at: Editor.end(editor, []),\n      });\n    },\n    [createEmptyRow, editor],\n  );\n\n  return (\n    <>\n      <Dropdown\n        open={dropdownOpen}\n        onClose={() => {\n          resetState();\n          setDropdownOpen(false);\n        }}\n        trigger={\n          <ToolbarButton\n            {...props}\n            className=\"slate-table-dropdown-button\"\n            onClick={() => {\n              if (dropdownOpen) {\n                resetState();\n              }\n\n              setDropdownOpen(!dropdownOpen);\n            }}\n            icon={tableSVG}\n          ></ToolbarButton>\n        }\n      >\n        <Dropdown.Menu className=\"slate-table-dropdown-menu\">\n          <TableContainer\n            rowCount={rowCount}\n            columnCount={columnCount}\n            activeColumn={activeColumn}\n            activeRow={activeRow}\n            onCellMouseEnter={({ row, column }) => {\n              if (row > rowCount - 1) {\n                setRowCount(row + 1);\n              } else if (row < rowCount - 1) {\n                setRowCount(defaultRowCount);\n              }\n\n              if (column > columnCount - 1) {\n                setColumnCount(column + 1);\n              } else if (column < columnCount - 1) {\n                setColumnCount(defaultColumnCount);\n              }\n\n              if (row !== activeRow) {\n                setActiveRow(row);\n              }\n              if (column !== activeColumn) {\n                setActiveColumn(column);\n              }\n            }}\n            onCellMouseLeave={({ row, column }) => {}}\n            // `row` and `column` below are 1-based indices\n            onCellClick={({ row, column }) => {\n              insertEmptyTable({ row, column });\n            }}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nexport default TableButton;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}