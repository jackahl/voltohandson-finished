{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\nconst Editor = loadable({\n  resolved: {},\n\n  chunkName() {\n    return \"react-simple-code-editor\";\n  },\n\n  isReady(props) {\n    const key = this.resolve(props);\n\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n\n    return false;\n  },\n\n  importAsync: () => import(\n  /* webpackChunkName: \"react-simple-code-editor\" */\n  'react-simple-code-editor'),\n\n  requireAsync(props) {\n    const key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(resolved => {\n      this.resolved[key] = true;\n      return resolved;\n    });\n  },\n\n  requireSync(props) {\n    const id = this.resolve(props);\n\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n\n    return eval('module.require')(id);\n  },\n\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-simple-code-editor\");\n    }\n\n    return eval('require.resolve')(\"react-simple-code-editor\");\n  }\n\n});\n_c = Editor;\nconst messages = defineMessages({\n  source: {\n    \"id\": \"Source\",\n    \"defaultMessage\": \"Source\"\n  },\n  preview: {\n    \"id\": \"Preview\",\n    \"defaultMessage\": \"Preview\"\n  },\n  placeholder: {\n    \"id\": \"<p>Add some HTML here</p>\",\n    \"defaultMessage\": \"<p>Add some HTML here</p>\"\n  },\n  prettier: {\n    \"id\": \"Prettify your code\",\n    \"defaultMessage\": \"Prettify your code\"\n  },\n  clear: {\n    \"id\": \"Clear\",\n    \"defaultMessage\": \"Clear\"\n  },\n  code: {\n    \"id\": \"Code\",\n    \"defaultMessage\": \"Code\"\n  }\n});\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\n\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"codeEditorRef\", /*#__PURE__*/React.createRef());\n\n    _defineProperty(this, \"savedSelection\", {});\n\n    _defineProperty(this, \"onPrettify\", () => {\n      try {\n        const code = this.props.prettierStandalone.format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml]\n        }).trim();\n        this.onChangeCode(code);\n      } catch (ex) {// error while parsing the user-typed HTML\n        // TODO: show a toast notification or something similar to the user\n      }\n    });\n\n    _defineProperty(this, \"getSelection\", editor => {\n      if (!editor || !editor._input) {\n        return {};\n      }\n\n      const o = {};\n\n      if (editor._input.selectionStart) {\n        o.selectionStart = editor._input.selectionStart;\n      }\n\n      if (editor._input.selectionEnd) {\n        o.selectionEnd = editor._input.selectionEnd;\n      }\n\n      return o;\n    });\n\n    _defineProperty(this, \"restoreSelectionAndFocus\", editor => {\n      var _this$savedSelection, _this$savedSelection2;\n\n      // Don't restore selection when the block is not selected.\n      if (this.props.selected && editor._input && typeof ((_this$savedSelection = this.savedSelection) === null || _this$savedSelection === void 0 ? void 0 : _this$savedSelection.selectionStart) === 'number' && typeof ((_this$savedSelection2 = this.savedSelection) === null || _this$savedSelection2 === void 0 ? void 0 : _this$savedSelection2.selectionEnd) === 'number') {\n        var _this$savedSelection3, _this$savedSelection4;\n\n        editor._input.selectionStart = (_this$savedSelection3 = this.savedSelection) === null || _this$savedSelection3 === void 0 ? void 0 : _this$savedSelection3.selectionStart;\n        editor._input.selectionEnd = (_this$savedSelection4 = this.savedSelection) === null || _this$savedSelection4 === void 0 ? void 0 : _this$savedSelection4.selectionEnd;\n\n        editor._input.focus();\n      }\n    });\n\n    this.state = {\n      isPreview: false\n    };\n    this.onChangeCode = this.onChangeCode.bind(this);\n    this.onPreview = this.onPreview.bind(this);\n    this.onCodeEditor = this.onCodeEditor.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // The selection is saved in the snapshot.\n    this.savedSelection = snapshot;\n    this.restoreSelectionAndFocus(this.codeEditorRef.current);\n  }\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n\n\n  shouldComponentUpdate(nextProps) {\n    // Always rerender when the DOM node is not created for the Editor (the\n    // first call to shouldComponentUpdate).\n    if (!this._input) {\n      return true;\n    } // Rerender the entire component when the Editor in it changes its selection\n    // because this way we get a call to getSnapshotBeforeUpdate where we can\n    // save the selection.\n\n\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data) || this._input.selectionStart !== this.savedSelection.selectionStart || this._input.selectionEnd !== this.savedSelection.selectionEnd;\n  }\n  /**\n   * Change html handler\n   * @method onChangeCode\n   * @param {string} code New value html\n   * @returns {undefined}\n   */\n\n\n  onChangeCode(code) {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      html: code\n    }));\n  }\n\n  getValue() {\n    return this.props.data.html || '';\n  }\n  /**\n   * Preview mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n\n\n  onPreview() {\n    try {\n      const code = this.props.prettierStandalone.format(this.getValue(), {\n        parser: 'html',\n        plugins: [this.props.prettierParserHtml]\n      }).trim();\n      this.setState({\n        isPreview: !this.state.isPreview\n      }, () => this.onChangeCode(code));\n    } catch (ex) {// error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  }\n  /**\n   * Prettify handler\n   * @method onPrettify\n   * @returns {undefined}\n   */\n\n\n  /**\n   * Code Editor mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onCodeEditor() {\n    this.setState({\n      isPreview: !this.state.isPreview\n    });\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return this.getSelection(this.codeEditorRef.current);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$prismCore, _this$props$prismCore2, _this$props$prismCore3;\n\n    const placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.placeholder);\n    const value = this.getValue();\n    return __jsx(React.Fragment, null, this.props.selected && value && __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, __jsx(Popup, {\n      trigger: __jsx(Button, {\n        icon: true,\n        basic: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.source),\n        active: !this.state.isPreview,\n        onClick: this.onCodeEditor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: codeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 19\n        }\n      })),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.code),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }), __jsx(Popup, {\n      trigger: __jsx(Button, {\n        icon: true,\n        basic: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.preview),\n        active: this.state.isPreview,\n        onClick: this.onPreview,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: showSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 19\n        }\n      })),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.preview),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }\n    }), __jsx(Popup, {\n      trigger: __jsx(Button, {\n        icon: true,\n        basic: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.prettier),\n        onClick: this.onPrettify,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: indentSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 19\n        }\n      })),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.prettier),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      className: \"separator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }\n    }), __jsx(Popup, {\n      trigger: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: () => this.onChangeCode(''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        size: \"24px\",\n        color: \"#e40166\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }\n      }))),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.clear),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    })), this.state.isPreview ? __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: value\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }\n    }) : __jsx(Editor, {\n      value: this.getValue(),\n      readOnly: !this.props.editable,\n      placeholder: placeholder,\n      onValueChange: code => this.onChangeCode(code),\n      highlight: (_this$props$prismCore = this.props.prismCore) !== null && _this$props$prismCore !== void 0 && _this$props$prismCore.highlight && (_this$props$prismCore2 = this.props.prismCore) !== null && _this$props$prismCore2 !== void 0 && (_this$props$prismCore3 = _this$props$prismCore2.languages) !== null && _this$props$prismCore3 !== void 0 && _this$props$prismCore3.html ? code => this.props.prismCore.highlight(code, this.props.prismCore.languages.html, 'html') : () => {},\n      padding: 8,\n      className: \"html-editor\",\n      ref: node => {\n        if (node) {\n          this.codeEditorRef.current = node;\n        }\n      },\n      ignoreTabKey: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n  editable: PropTypes.bool\n});\n\n_defineProperty(Edit, \"defaultProps\", {\n  editable: true\n});\n\nconst withPrismMarkup = WrappedComponent => {\n  var _s = $RefreshSig$();\n\n  return _s(props => {\n    _s();\n\n    const [loaded, setLoaded] = React.useState();\n    const promise = React.useRef(null);\n    const cancelled = React.useRef(false);\n    React.useEffect(() => {\n      promise.current = import('prismjs/components/prism-markup');\n      promise.current.then(() => {\n        if (!cancelled.current) {\n          setLoaded(true);\n        }\n      });\n      return () => {\n        cancelled.current = true;\n      };\n    }, []);\n    return loaded ? __jsx(WrappedComponent, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 19\n      }\n    })) : null;\n  }, \"fRlpqsEqxY9QHNnz9gFOsq6OyFQ=\");\n};\n\nexport default compose(injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']), withPrismMarkup, injectIntl)(Edit);\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["compose","React","Component","PropTypes","Button","Popup","defineMessages","injectIntl","loadable","Icon","injectLazyLibs","showSVG","clearSVG","codeSVG","indentSVG","Editor","messages","source","preview","placeholder","prettier","clear","code","Edit","constructor","props","createRef","prettierStandalone","format","getValue","parser","plugins","prettierParserHtml","trim","onChangeCode","ex","editor","_input","o","selectionStart","selectionEnd","selected","savedSelection","focus","state","isPreview","bind","onPreview","onCodeEditor","componentDidUpdate","prevProps","prevState","snapshot","restoreSelectionAndFocus","codeEditorRef","current","shouldComponentUpdate","nextProps","data","onChangeBlock","block","html","setState","getSnapshotBeforeUpdate","getSelection","render","intl","formatMessage","value","onPrettify","__html","editable","prismCore","highlight","languages","node","bool","isRequired","string","index","number","objectOf","any","func","onSelectBlock","onDeleteBlock","handleKeyDown","withPrismMarkup","WrappedComponent","loaded","setLoaded","useState","promise","useRef","cancelled","useEffect","then"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx"],"sourcesContent":["/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\n\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { isEqual } from 'lodash';\n\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\n\nconst Editor = loadable(() => import('react-simple-code-editor'));\n\nconst messages = defineMessages({\n  source: {\n    id: 'Source',\n    defaultMessage: 'Source',\n  },\n  preview: {\n    id: 'Preview',\n    defaultMessage: 'Preview',\n  },\n  placeholder: {\n    id: '<p>Add some HTML here</p>',\n    defaultMessage: '<p>Add some HTML here</p>',\n  },\n  prettier: {\n    id: 'Prettify your code',\n    defaultMessage: 'Prettify your code',\n  },\n  clear: {\n    id: 'Clear',\n    defaultMessage: 'Clear',\n  },\n  code: {\n    id: 'Code',\n    defaultMessage: 'Code',\n  },\n});\n\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    editable: true,\n  };\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPreview: false,\n    };\n    this.onChangeCode = this.onChangeCode.bind(this);\n    this.onPreview = this.onPreview.bind(this);\n    this.onCodeEditor = this.onCodeEditor.bind(this);\n  }\n\n  codeEditorRef = React.createRef();\n  savedSelection = {};\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // The selection is saved in the snapshot.\n    this.savedSelection = snapshot;\n\n    this.restoreSelectionAndFocus(this.codeEditorRef.current);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    // Always rerender when the DOM node is not created for the Editor (the\n    // first call to shouldComponentUpdate).\n    if (!this._input) {\n      return true;\n    }\n\n    // Rerender the entire component when the Editor in it changes its selection\n    // because this way we get a call to getSnapshotBeforeUpdate where we can\n    // save the selection.\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      this._input.selectionStart !== this.savedSelection.selectionStart ||\n      this._input.selectionEnd !== this.savedSelection.selectionEnd\n    );\n  }\n\n  /**\n   * Change html handler\n   * @method onChangeCode\n   * @param {string} code New value html\n   * @returns {undefined}\n   */\n  onChangeCode(code) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      html: code,\n    });\n  }\n\n  getValue() {\n    return this.props.data.html || '';\n  }\n\n  /**\n   * Preview mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onPreview() {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.setState(\n        {\n          isPreview: !this.state.isPreview,\n        },\n        () => this.onChangeCode(code),\n      );\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  }\n\n  /**\n   * Prettify handler\n   * @method onPrettify\n   * @returns {undefined}\n   */\n  onPrettify = () => {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.onChangeCode(code);\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  };\n\n  /**\n   * Code Editor mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onCodeEditor() {\n    this.setState({ isPreview: !this.state.isPreview });\n  }\n\n  getSelection = (editor) => {\n    if (!editor || !editor._input) {\n      return {};\n    }\n\n    const o = {};\n    if (editor._input.selectionStart) {\n      o.selectionStart = editor._input.selectionStart;\n    }\n    if (editor._input.selectionEnd) {\n      o.selectionEnd = editor._input.selectionEnd;\n    }\n    return o;\n  };\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return this.getSelection(this.codeEditorRef.current);\n  }\n\n  restoreSelectionAndFocus = (editor) => {\n    // Don't restore selection when the block is not selected.\n    if (\n      this.props.selected &&\n      editor._input &&\n      typeof this.savedSelection?.selectionStart === 'number' &&\n      typeof this.savedSelection?.selectionEnd === 'number'\n    ) {\n      editor._input.selectionStart = this.savedSelection?.selectionStart;\n      editor._input.selectionEnd = this.savedSelection?.selectionEnd;\n      editor._input.focus();\n    }\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n    const value = this.getValue();\n    return (\n      <>\n        {this.props.selected && value && (\n          <div className=\"toolbar\">\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.source)}\n                  active={!this.state.isPreview}\n                  onClick={this.onCodeEditor}\n                >\n                  <Icon name={codeSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.code)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.preview)}\n                  active={this.state.isPreview}\n                  onClick={this.onPreview}\n                >\n                  <Icon name={showSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.preview)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.prettier)}\n                  onClick={this.onPrettify}\n                >\n                  <Icon name={indentSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.prettier)}\n              size=\"mini\"\n            />\n            <div className=\"separator\" />\n            <Popup\n              trigger={\n                <Button.Group>\n                  <Button icon basic onClick={() => this.onChangeCode('')}>\n                    <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n                  </Button>\n                </Button.Group>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.clear)}\n              size=\"mini\"\n            />\n          </div>\n        )}\n        {this.state.isPreview ? (\n          <div dangerouslySetInnerHTML={{ __html: value }} />\n        ) : (\n          <Editor\n            value={this.getValue()}\n            readOnly={!this.props.editable}\n            placeholder={placeholder}\n            onValueChange={(code) => this.onChangeCode(code)}\n            highlight={\n              this.props.prismCore?.highlight &&\n              this.props.prismCore?.languages?.html\n                ? (code) =>\n                    this.props.prismCore.highlight(\n                      code,\n                      this.props.prismCore.languages.html,\n                      'html',\n                    )\n                : () => {}\n            }\n            padding={8}\n            className=\"html-editor\"\n            ref={(node) => {\n              if (node) {\n                this.codeEditorRef.current = node;\n              }\n            }}\n            ignoreTabKey={true}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconst withPrismMarkup = (WrappedComponent) => (props) => {\n  const [loaded, setLoaded] = React.useState();\n  const promise = React.useRef(null);\n  const cancelled = React.useRef(false);\n\n  React.useEffect(() => {\n    promise.current = import('prismjs/components/prism-markup');\n    promise.current.then(() => {\n      if (!cancelled.current) {\n        setLoaded(true);\n      }\n    });\n    return () => {\n      cancelled.current = true;\n    };\n  }, []);\n\n  return loaded ? <WrappedComponent {...props} /> : null;\n};\n\nexport default compose(\n  injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']),\n  withPrismMarkup,\n  injectIntl,\n)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Source","defaultMessage":"Source"},{"id":"Preview","defaultMessage":"Preview"},{"id":"<p>Add some HTML here</p>","defaultMessage":"<p>Add some HTML here</p>"},{"id":"Prettify your code","defaultMessage":"Prettify your code"},{"id":"Clear","defaultMessage":"Clear"},{"id":"Code","defaultMessage":"Code"}]}},"sourceType":"module"}