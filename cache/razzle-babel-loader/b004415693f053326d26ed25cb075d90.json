{"ast":null,"code":"import _toNumber from \"lodash/toNumber\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Users/UserGroupMembershipControlPanel.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * User Control Panel [user group membership management]\n * TODO Enrich with features of user control panel. Then replace user control panel.\n */\nimport React, { useEffect } from 'react';\nimport { Portal } from 'react-portal';\nimport { useHistory } from 'react-router';\nimport { Link, useLocation } from 'react-router-dom';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Segment } from 'semantic-ui-react';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport { getControlpanel, getSystemInformation, listActions } from '@plone/volto/actions';\nimport { Icon, Toolbar, Unauthorized } from '@plone/volto/components';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport UserGroupMembershipMatrix from '@plone/volto/components/manage/Controlpanels/Users/UserGroupMembershipMatrix';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport settingsSVG from '@plone/volto/icons/settings.svg';\n\nconst UserGroupMembershipPanel = () => {\n  const intl = useIntl();\n  const history = useHistory();\n  const pathname = useLocation().pathname;\n  const dispatch = useDispatch();\n  const many_users = useSelector(state => {\n    var _state$controlpanels$, _state$controlpanels$2;\n\n    return (_state$controlpanels$ = state.controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users;\n  });\n  const many_groups = useSelector(state => {\n    var _state$controlpanels$3, _state$controlpanels$4;\n\n    return (_state$controlpanels$3 = state.controlpanels.controlpanel) === null || _state$controlpanels$3 === void 0 ? void 0 : (_state$controlpanels$4 = _state$controlpanels$3.data) === null || _state$controlpanels$4 === void 0 ? void 0 : _state$controlpanels$4.many_groups;\n  });\n  const systeminformation = useSelector(state => state.controlpanels.systeminformation);\n  const can_use_group_membership_panel = systeminformation ? _toNumber(systeminformation === null || systeminformation === void 0 ? void 0 : systeminformation.plone_restapi_version.slice(0, 4)) >= 8.24 : false;\n  const actions = useSelector(state => {\n    var _state$actions$action, _state$actions;\n\n    return (_state$actions$action = (_state$actions = state.actions) === null || _state$actions === void 0 ? void 0 : _state$actions.actions) !== null && _state$actions$action !== void 0 ? _state$actions$action : {};\n  });\n\n  const ploneSetupAction = _find(actions.user, {\n    id: 'plone_setup'\n  });\n\n  useEffect(() => {\n    dispatch(listActions('/'));\n  }, [dispatch]);\n  useEffect(() => {\n    dispatch(getControlpanel('usergroup'));\n  }, [dispatch]);\n  useEffect(() => {\n    dispatch(getSystemInformation());\n  }, [dispatch]);\n\n  if (__CLIENT__ && !ploneSetupAction) {\n    return __jsx(Unauthorized, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Container, {\n    className: \"users-control-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.usergroupmemberbership),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(Segment, {\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, intl.formatMessage(messages.usergroupmemberbership)), can_use_group_membership_panel && many_users !== undefined && many_groups !== undefined ? many_users || many_groups ? __jsx(React.Fragment, null, __jsx(Segment, {\n    secondary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"InfoUserGroupSettings\",\n    defaultMessage: \"You have selected the option 'many users' or 'many groups'. Thus this control panel asks for input to show users and groups. If you want to see users and groups instantaneous, head over to user group settings. See the button on the left.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 19\n    }\n  })), __jsx(Segment, {\n    className: \"usergroupmembership\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, __jsx(UserGroupMembershipMatrix, {\n    many_users: many_users,\n    many_groups: many_groups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }))) : __jsx(Segment, {\n    className: \"usergroupmembership\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, __jsx(UserGroupMembershipMatrix, {\n    many_users: many_users,\n    many_groups: many_groups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  })) : __jsx(Segment, {\n    secondary: true,\n    className: \"usergroupmembership upgrade-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Please upgrade to plone.restapi >= 8.24.0.\",\n    defaultMessage: \"Please upgrade to plone.restapi >= 8.24.0.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }))))), __CLIENT__ && __jsx(Portal, {\n    node: document.getElementById('toolbar'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, __jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(React.Fragment, null, __jsx(Link, {\n      className: \"item\",\n      to: \"#\",\n      onClick: () => {\n        history.push(getParentUrl(pathname));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    })), __jsx(Link, {\n      to: \"/controlpanel/usergroup\",\n      className: \"usergroup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: settingsSVG,\n      className: \"circled\",\n      \"aria-label\": intl.formatMessage(messages.usergroup),\n      size: \"30px\",\n      title: intl.formatMessage(messages.usergroup),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 19\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default UserGroupMembershipPanel;","map":{"version":3,"names":["React","useEffect","Portal","useHistory","Link","useLocation","FormattedMessage","useIntl","useDispatch","useSelector","Container","Segment","Helmet","messages","getControlpanel","getSystemInformation","listActions","Icon","Toolbar","Unauthorized","getParentUrl","UserGroupMembershipMatrix","backSVG","settingsSVG","UserGroupMembershipPanel","intl","history","pathname","dispatch","many_users","state","controlpanels","controlpanel","data","many_groups","systeminformation","can_use_group_membership_panel","plone_restapi_version","slice","actions","ploneSetupAction","user","id","__CLIENT__","formatMessage","usergroupmemberbership","undefined","document","getElementById","push","usergroup"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Users/UserGroupMembershipControlPanel.jsx"],"sourcesContent":["/**\n * User Control Panel [user group membership management]\n * TODO Enrich with features of user control panel. Then replace user control panel.\n */\nimport React, { useEffect } from 'react';\nimport { find, toNumber } from 'lodash';\nimport { Portal } from 'react-portal';\nimport { useHistory } from 'react-router';\nimport { Link, useLocation } from 'react-router-dom';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Segment } from 'semantic-ui-react';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport {\n  getControlpanel,\n  getSystemInformation,\n  listActions,\n} from '@plone/volto/actions';\nimport { Icon, Toolbar, Unauthorized } from '@plone/volto/components';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport UserGroupMembershipMatrix from '@plone/volto/components/manage/Controlpanels/Users/UserGroupMembershipMatrix';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport settingsSVG from '@plone/volto/icons/settings.svg';\n\nconst UserGroupMembershipPanel = () => {\n  const intl = useIntl();\n  const history = useHistory();\n  const pathname = useLocation().pathname;\n  const dispatch = useDispatch();\n\n  const many_users = useSelector(\n    (state) => state.controlpanels.controlpanel?.data?.many_users,\n  );\n  const many_groups = useSelector(\n    (state) => state.controlpanels.controlpanel?.data?.many_groups,\n  );\n  const systeminformation = useSelector(\n    (state) => state.controlpanels.systeminformation,\n  );\n  const can_use_group_membership_panel = systeminformation\n    ? toNumber(systeminformation?.plone_restapi_version.slice(0, 4)) >= 8.24\n    : false;\n  const actions = useSelector((state) => state.actions?.actions ?? {});\n  const ploneSetupAction = find(actions.user, {\n    id: 'plone_setup',\n  });\n\n  useEffect(() => {\n    dispatch(listActions('/'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(getControlpanel('usergroup'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(getSystemInformation());\n  }, [dispatch]);\n\n  if (__CLIENT__ && !ploneSetupAction) {\n    return <Unauthorized />;\n  }\n\n  return (\n    <>\n      <Container className=\"users-control-panel\">\n        <Helmet title={intl.formatMessage(messages.usergroupmemberbership)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            {intl.formatMessage(messages.usergroupmemberbership)}\n          </Segment>\n          {can_use_group_membership_panel &&\n          many_users !== undefined &&\n          many_groups !== undefined ? (\n            many_users || many_groups ? (\n              <>\n                <Segment secondary>\n                  <FormattedMessage\n                    id=\"InfoUserGroupSettings\"\n                    defaultMessage=\"You have selected the option 'many users' or 'many groups'. Thus this control panel asks for input to show users and groups. If you want to see users and groups instantaneous, head over to user group settings. See the button on the left.\"\n                  />\n                </Segment>\n                <Segment className=\"usergroupmembership\">\n                  <UserGroupMembershipMatrix\n                    many_users={many_users}\n                    many_groups={many_groups}\n                  />\n                </Segment>\n              </>\n            ) : (\n              <Segment className=\"usergroupmembership\">\n                <UserGroupMembershipMatrix\n                  many_users={many_users}\n                  many_groups={many_groups}\n                />\n              </Segment>\n            )\n          ) : (\n            <Segment secondary className=\"usergroupmembership upgrade-info\">\n              <div>\n                <FormattedMessage\n                  id=\"Please upgrade to plone.restapi >= 8.24.0.\"\n                  defaultMessage=\"Please upgrade to plone.restapi >= 8.24.0.\"\n                />\n              </div>\n            </Segment>\n          )}\n        </Segment.Group>\n      </Container>\n\n      {__CLIENT__ && (\n        <Portal node={document.getElementById('toolbar')}>\n          <Toolbar\n            pathname={pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <Link\n                  className=\"item\"\n                  to=\"#\"\n                  onClick={() => {\n                    history.push(getParentUrl(pathname));\n                  }}\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                  />\n                </Link>\n                <Link to=\"/controlpanel/usergroup\" className=\"usergroup\">\n                  <Icon\n                    name={settingsSVG}\n                    className=\"circled\"\n                    aria-label={intl.formatMessage(messages.usergroup)}\n                    size=\"30px\"\n                    title={intl.formatMessage(messages.usergroup)}\n                  />\n                </Link>\n              </>\n            }\n          />\n        </Portal>\n      )}\n    </>\n  );\n};\n\nexport default UserGroupMembershipPanel;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"InfoUserGroupSettings","defaultMessage":"You have selected the option 'many users' or 'many groups'. Thus this control panel asks for input to show users and groups. If you want to see users and groups instantaneous, head over to user group settings. See the button on the left."},{"id":"Please upgrade to plone.restapi >= 8.24.0.","defaultMessage":"Please upgrade to plone.restapi >= 8.24.0."}]}},"sourceType":"module"}