{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_QUERYSTRING_RESULTS } from '@plone/volto/constants/ActionTypes';\nimport config from '@plone/volto/registry';\n/**\n * Get querystring results.\n * @function getQueryStringResults\n * @param {Object} data Data.\n * @returns {Object} Get querystringsearch results action.\n */\n\nexport function getQueryStringResults(path, data, subrequest, page) {\n  const {\n    settings\n  } = config; // fixes https://github.com/plone/volto/issues/1059\n\n  let requestData = JSON.parse(JSON.stringify(data));\n\n  if ((data === null || data === void 0 ? void 0 : data.depth) != null) {\n    delete requestData.depth;\n    requestData.query.forEach(q => {\n      if (q.i === 'path') {\n        q.v += '::' + data.depth;\n      }\n    });\n  } // fixes https://github.com/plone/volto/issues/2397\n\n\n  if ((requestData === null || requestData === void 0 ? void 0 : requestData.sort_order) !== null) {\n    if (typeof requestData.sort_order === 'boolean') {\n      requestData.sort_order = requestData.sort_order ? 'descending' : 'ascending';\n    }\n  }\n\n  return {\n    type: GET_QUERYSTRING_RESULTS,\n    subrequest,\n    request: {\n      op: 'post',\n      path: `${path}/@querystring-search`,\n      data: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, requestData), !requestData.b_size && {\n        b_size: settings.defaultPageSize\n      }), page && {\n        b_start: requestData.b_size ? data.b_size * (page - 1) : settings.defaultPageSize * (page - 1)\n      }), {}, {\n        query: requestData === null || requestData === void 0 ? void 0 : requestData.query\n      })\n    }\n  };\n}","map":{"version":3,"names":["GET_QUERYSTRING_RESULTS","config","getQueryStringResults","path","data","subrequest","page","settings","requestData","JSON","parse","stringify","depth","query","forEach","q","i","v","sort_order","type","request","op","b_size","defaultPageSize","b_start"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/actions/querystringsearch/querystringsearch.js"],"sourcesContent":["import { GET_QUERYSTRING_RESULTS } from '@plone/volto/constants/ActionTypes';\nimport config from '@plone/volto/registry';\n\n/**\n * Get querystring results.\n * @function getQueryStringResults\n * @param {Object} data Data.\n * @returns {Object} Get querystringsearch results action.\n */\nexport function getQueryStringResults(path, data, subrequest, page) {\n  const { settings } = config;\n\n  // fixes https://github.com/plone/volto/issues/1059\n  let requestData = JSON.parse(JSON.stringify(data));\n\n  if (data?.depth != null) {\n    delete requestData.depth;\n    requestData.query.forEach((q) => {\n      if (q.i === 'path') {\n        q.v += '::' + data.depth;\n      }\n    });\n  }\n\n  // fixes https://github.com/plone/volto/issues/2397\n  if (requestData?.sort_order !== null) {\n    if (typeof requestData.sort_order === 'boolean') {\n      requestData.sort_order = requestData.sort_order\n        ? 'descending'\n        : 'ascending';\n    }\n  }\n\n  return {\n    type: GET_QUERYSTRING_RESULTS,\n    subrequest,\n    request: {\n      op: 'post',\n      path: `${path}/@querystring-search`,\n      data: {\n        ...requestData,\n        ...(!requestData.b_size && {\n          b_size: settings.defaultPageSize,\n        }),\n        ...(page && {\n          b_start: requestData.b_size\n            ? data.b_size * (page - 1)\n            : settings.defaultPageSize * (page - 1),\n        }),\n        query: requestData?.query,\n      },\n    },\n  };\n}\n"],"mappings":";;;;;;AAAA,SAASA,uBAAT,QAAwC,oCAAxC;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,IAArC,EAA2CC,UAA3C,EAAuDC,IAAvD,EAA6D;EAClE,MAAM;IAAEC;EAAF,IAAeN,MAArB,CADkE,CAGlE;;EACA,IAAIO,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,IAAf,CAAX,CAAlB;;EAEA,IAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEQ,KAAN,KAAe,IAAnB,EAAyB;IACvB,OAAOJ,WAAW,CAACI,KAAnB;IACAJ,WAAW,CAACK,KAAZ,CAAkBC,OAAlB,CAA2BC,CAAD,IAAO;MAC/B,IAAIA,CAAC,CAACC,CAAF,KAAQ,MAAZ,EAAoB;QAClBD,CAAC,CAACE,CAAF,IAAO,OAAOb,IAAI,CAACQ,KAAnB;MACD;IACF,CAJD;EAKD,CAbiE,CAelE;;;EACA,IAAI,CAAAJ,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEU,UAAb,MAA4B,IAAhC,EAAsC;IACpC,IAAI,OAAOV,WAAW,CAACU,UAAnB,KAAkC,SAAtC,EAAiD;MAC/CV,WAAW,CAACU,UAAZ,GAAyBV,WAAW,CAACU,UAAZ,GACrB,YADqB,GAErB,WAFJ;IAGD;EACF;;EAED,OAAO;IACLC,IAAI,EAAEnB,uBADD;IAELK,UAFK;IAGLe,OAAO,EAAE;MACPC,EAAE,EAAE,MADG;MAEPlB,IAAI,EAAG,GAAEA,IAAK,sBAFP;MAGPC,IAAI,8DACCI,WADD,GAEE,CAACA,WAAW,CAACc,MAAb,IAAuB;QACzBA,MAAM,EAAEf,QAAQ,CAACgB;MADQ,CAFzB,GAKEjB,IAAI,IAAI;QACVkB,OAAO,EAAEhB,WAAW,CAACc,MAAZ,GACLlB,IAAI,CAACkB,MAAL,IAAehB,IAAI,GAAG,CAAtB,CADK,GAELC,QAAQ,CAACgB,eAAT,IAA4BjB,IAAI,GAAG,CAAnC;MAHM,CALV;QAUFO,KAAK,EAAEL,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEK;MAVlB;IAHG;EAHJ,CAAP;AAoBD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}