{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport config from '@plone/volto/registry';\n\nconst TextBlockView = props => {\n  const {\n    id,\n    data,\n    styling = {}\n  } = props;\n  const {\n    value,\n    override_toc\n  } = data;\n  const metadata = props.metadata || props.properties;\n  return serializeNodes(value, (node, path) => {\n    const res = _objectSpread({}, styling);\n\n    if (node.type) {\n      if (config.settings.slate.topLevelTargetElements.includes(node.type) || override_toc) {\n        res.id = id;\n      }\n    }\n\n    return res;\n  }, {\n    metadata: metadata\n  });\n};\n\nexport default TextBlockView;","map":{"version":3,"names":["serializeNodes","config","TextBlockView","props","id","data","styling","value","override_toc","metadata","properties","node","path","res","type","settings","slate","topLevelTargetElements","includes"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/TextBlockView.jsx"],"sourcesContent":["import { serializeNodes } from '@plone/volto-slate/editor/render';\nimport config from '@plone/volto/registry';\n\nconst TextBlockView = (props) => {\n  const { id, data, styling = {} } = props;\n  const { value, override_toc } = data;\n  const metadata = props.metadata || props.properties;\n  return serializeNodes(\n    value,\n    (node, path) => {\n      const res = { ...styling };\n      if (node.type) {\n        if (\n          config.settings.slate.topLevelTargetElements.includes(node.type) ||\n          override_toc\n        ) {\n          res.id = id;\n        }\n      }\n      return res;\n    },\n    { metadata: metadata },\n  );\n};\n\nexport default TextBlockView;\n"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,kCAA/B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;EAC/B,MAAM;IAAEC,EAAF;IAAMC,IAAN;IAAYC,OAAO,GAAG;EAAtB,IAA6BH,KAAnC;EACA,MAAM;IAAEI,KAAF;IAASC;EAAT,IAA0BH,IAAhC;EACA,MAAMI,QAAQ,GAAGN,KAAK,CAACM,QAAN,IAAkBN,KAAK,CAACO,UAAzC;EACA,OAAOV,cAAc,CACnBO,KADmB,EAEnB,CAACI,IAAD,EAAOC,IAAP,KAAgB;IACd,MAAMC,GAAG,qBAAQP,OAAR,CAAT;;IACA,IAAIK,IAAI,CAACG,IAAT,EAAe;MACb,IACEb,MAAM,CAACc,QAAP,CAAgBC,KAAhB,CAAsBC,sBAAtB,CAA6CC,QAA7C,CAAsDP,IAAI,CAACG,IAA3D,KACAN,YAFF,EAGE;QACAK,GAAG,CAACT,EAAJ,GAASA,EAAT;MACD;IACF;;IACD,OAAOS,GAAP;EACD,CAbkB,EAcnB;IAAEJ,QAAQ,EAAEA;EAAZ,CAdmB,CAArB;AAgBD,CApBD;;AAsBA,eAAeP,aAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}