{"ast":null,"code":"/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport { Editor, Transforms } from 'slate';\nimport { isBlockActive } from '@plone/volto-slate/utils';\nimport config from '@plone/volto/registry';\n/**\n * Toggles a style (e.g. in the StyleMenu plugin).\n * @param {Editor} editor\n * @param {object} options\n * @param {boolean} options.isRequested Whether the given style is requested by\n * the user. The style is only applied if it is requested and only removed if it\n * is not requested.\n */\n\nexport const toggleStyle = (editor, {\n  cssClass,\n  isBlock,\n  isRequested\n}) => {\n  if (isBlock) {\n    toggleBlockStyle(editor, cssClass);\n  } else {\n    toggleInlineStyle(editor, cssClass);\n  }\n};\nexport const toggleBlockStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const {\n    slate\n  } = config.settings;\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleBlockStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {// switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {// changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleBlockStyle(editor, style);\n  } else {\n    console.warn('toggleBlockStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem\n    });\n  }\n};\nexport const toggleInlineStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const {\n    slate\n  } = config.settings;\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isInlineStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleInlineStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {// switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {// changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleInlineStyle(editor, style);\n  } else {\n    console.warn('toggleInlineStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem\n    });\n  }\n};\nexport const isBlockStyleActive = (editor, style) => {\n  const sn = Array.from(Editor.nodes(editor, {\n    match: n => !Editor.isEditor(n) && typeof n.styleName === 'string',\n    mode: 'highest'\n  }));\n\n  for (const [n] of sn) {\n    if (n.styleName.split(' ').filter(x => x === style).length > 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport const isInlineStyleActive = (editor, style) => {\n  const m = Editor.marks(editor);\n  const keyName = `style-${style}`;\n\n  if (m && m[keyName]) {\n    return true;\n  }\n\n  return false;\n};\nexport const internalToggleBlockStyle = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\nexport const internalToggleInlineStyle = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n/*\n * Applies a block format unto a list item. Will split the list and deconstruct the\n * block\n */\n\nexport const toggleBlockStyleAsListItem = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n/*\n * Applies an inline style unto a list item.\n */\n\nexport const toggleInlineStyleAsListItem = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\nfunction toggleInlineStyleInSelection(editor, style) {\n  const m = Editor.marks(editor);\n  const keyName = 'style-' + style;\n\n  if (m && m[keyName]) {\n    Editor.removeMark(editor, keyName);\n  } else {\n    Editor.addMark(editor, keyName, true);\n  }\n}\n\nfunction toggleBlockStyleInSelection(editor, style) {\n  const sn = Array.from(Editor.nodes(editor, {\n    mode: 'highest',\n    match: n => {\n      return !Editor.isEditor(n);\n    }\n  }));\n\n  for (const [n, p] of sn) {\n    let cn = n.styleName;\n\n    if (typeof n.styleName !== 'string') {\n      cn = style;\n    } else if (n.styleName.split(' ').filter(x => x === style).length > 0) {\n      cn = cn.split(' ').filter(x => x !== style).join(' ');\n    } else {\n      // the style is not set but other styles are set\n      cn = cn.split(' ').concat(style).join(' ');\n    }\n\n    Transforms.setNodes(editor, {\n      styleName: cn\n    }, {\n      at: p\n    });\n  }\n}","map":{"version":3,"names":["Editor","Transforms","isBlockActive","config","toggleStyle","editor","cssClass","isBlock","isRequested","toggleBlockStyle","toggleInlineStyle","style","slate","settings","isListItem","listItemType","isActive","isBlockStyleActive","wantsList","toggleBlockStyleAsListItem","internalToggleBlockStyle","console","warn","isInlineStyleActive","toggleInlineStyleAsListItem","internalToggleInlineStyle","sn","Array","from","nodes","match","n","isEditor","styleName","mode","split","filter","x","length","m","marks","keyName","toggleBlockStyleInSelection","toggleInlineStyleInSelection","removeMark","addMark","p","cn","join","concat","setNodes","at"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/StyleMenu/utils.js"],"sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport { Editor, Transforms } from 'slate';\nimport { isBlockActive } from '@plone/volto-slate/utils';\nimport config from '@plone/volto/registry';\n\n/**\n * Toggles a style (e.g. in the StyleMenu plugin).\n * @param {Editor} editor\n * @param {object} options\n * @param {boolean} options.isRequested Whether the given style is requested by\n * the user. The style is only applied if it is requested and only removed if it\n * is not requested.\n */\nexport const toggleStyle = (editor, { cssClass, isBlock, isRequested }) => {\n  if (isBlock) {\n    toggleBlockStyle(editor, cssClass);\n  } else {\n    toggleInlineStyle(editor, cssClass);\n  }\n};\n\nexport const toggleBlockStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleBlockStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleBlockStyle(editor, style);\n  } else {\n    console.warn('toggleBlockStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\nexport const toggleInlineStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isInlineStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleInlineStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleInlineStyle(editor, style);\n  } else {\n    console.warn('toggleInlineStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\nexport const isBlockStyleActive = (editor, style) => {\n  const sn = Array.from(\n    Editor.nodes(editor, {\n      match: (n) => !Editor.isEditor(n) && typeof n.styleName === 'string',\n      mode: 'highest',\n    }),\n  );\n\n  for (const [n] of sn) {\n    if (n.styleName.split(' ').filter((x) => x === style).length > 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const isInlineStyleActive = (editor, style) => {\n  const m = Editor.marks(editor);\n  const keyName = `style-${style}`;\n  if (m && m[keyName]) {\n    return true;\n  }\n  return false;\n};\n\nexport const internalToggleBlockStyle = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\nexport const internalToggleInlineStyle = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\n/*\n * Applies a block format unto a list item. Will split the list and deconstruct the\n * block\n */\nexport const toggleBlockStyleAsListItem = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\n/*\n * Applies an inline style unto a list item.\n */\nexport const toggleInlineStyleAsListItem = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\nfunction toggleInlineStyleInSelection(editor, style) {\n  const m = Editor.marks(editor);\n  const keyName = 'style-' + style;\n\n  if (m && m[keyName]) {\n    Editor.removeMark(editor, keyName);\n  } else {\n    Editor.addMark(editor, keyName, true);\n  }\n}\n\nfunction toggleBlockStyleInSelection(editor, style) {\n  const sn = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      match: (n) => {\n        return !Editor.isEditor(n);\n      },\n    }),\n  );\n\n  for (const [n, p] of sn) {\n    let cn = n.styleName;\n    if (typeof n.styleName !== 'string') {\n      cn = style;\n    } else if (n.styleName.split(' ').filter((x) => x === style).length > 0) {\n      cn = cn\n        .split(' ')\n        .filter((x) => x !== style)\n        .join(' ');\n    } else {\n      // the style is not set but other styles are set\n      cn = cn.split(' ').concat(style).join(' ');\n    }\n    Transforms.setNodes(editor, { styleName: cn }, { at: p });\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}