{"ast":null,"code":"import { SIMPLELINK } from '@plone/volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nimport { deserialize } from '@plone/volto-slate/editor/deserialize';\nexport const withSimpleLink = editor => {\n  // const { insertData, insertText, isInline } = editor;\n  const {\n    isInline\n  } = editor;\n\n  editor.isInline = element => {\n    return element && element.type === SIMPLELINK ? true : isInline(element);\n  }; // editor.insertText = (text) => {\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertText(text);\n  //   }\n  // };\n  //\n  // editor.insertData = (data) => {\n  //   const text = data.getData('text/plain');\n  //\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertData(data);\n  //   }\n  // };\n\n\n  return editor;\n};\nexport const simpleLinkDeserializer = (editor, el) => {\n  let parent = el;\n  let children = Array.from(parent.childNodes).map(el => deserialize(editor, el)).flat();\n  if (!children.length) children = [{\n    text: ''\n  }];\n  const attrs = {\n    type: SIMPLELINK,\n    data: {\n      url: el.getAttribute('href')\n    }\n  };\n  return jsx('element', attrs, children);\n};\nsimpleLinkDeserializer.id = 'simpleLinkDeserializer';","map":{"version":3,"names":["SIMPLELINK","jsx","deserialize","withSimpleLink","editor","isInline","element","type","simpleLinkDeserializer","el","parent","children","Array","from","childNodes","map","flat","length","text","attrs","data","url","getAttribute","id"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/Link/extensions.js"],"sourcesContent":["import { SIMPLELINK } from '@plone/volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nimport { deserialize } from '@plone/volto-slate/editor/deserialize';\n\nexport const withSimpleLink = (editor) => {\n  // const { insertData, insertText, isInline } = editor;\n\n  const { isInline } = editor;\n\n  editor.isInline = (element) => {\n    return element && element.type === SIMPLELINK ? true : isInline(element);\n  };\n\n  // editor.insertText = (text) => {\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertText(text);\n  //   }\n  // };\n  //\n  // editor.insertData = (data) => {\n  //   const text = data.getData('text/plain');\n  //\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertData(data);\n  //   }\n  // };\n  return editor;\n};\n\nexport const simpleLinkDeserializer = (editor, el) => {\n  let parent = el;\n\n  let children = Array.from(parent.childNodes)\n    .map((el) => deserialize(editor, el))\n    .flat();\n\n  if (!children.length) children = [{ text: '' }];\n\n  const attrs = {\n    type: SIMPLELINK,\n    data: {\n      url: el.getAttribute('href'),\n    },\n  };\n\n  return jsx('element', attrs, children);\n};\n\nsimpleLinkDeserializer.id = 'simpleLinkDeserializer';\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,8BAA3B;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,WAAT,QAA4B,uCAA5B;AAEA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;EACxC;EAEA,MAAM;IAAEC;EAAF,IAAeD,MAArB;;EAEAA,MAAM,CAACC,QAAP,GAAmBC,OAAD,IAAa;IAC7B,OAAOA,OAAO,IAAIA,OAAO,CAACC,IAAR,KAAiBP,UAA5B,GAAyC,IAAzC,GAAgDK,QAAQ,CAACC,OAAD,CAA/D;EACD,CAFD,CALwC,CASxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,OAAOF,MAAP;AACD,CA3BM;AA6BP,OAAO,MAAMI,sBAAsB,GAAG,CAACJ,MAAD,EAASK,EAAT,KAAgB;EACpD,IAAIC,MAAM,GAAGD,EAAb;EAEA,IAAIE,QAAQ,GAAGC,KAAK,CAACC,IAAN,CAAWH,MAAM,CAACI,UAAlB,EACZC,GADY,CACPN,EAAD,IAAQP,WAAW,CAACE,MAAD,EAASK,EAAT,CADX,EAEZO,IAFY,EAAf;EAIA,IAAI,CAACL,QAAQ,CAACM,MAAd,EAAsBN,QAAQ,GAAG,CAAC;IAAEO,IAAI,EAAE;EAAR,CAAD,CAAX;EAEtB,MAAMC,KAAK,GAAG;IACZZ,IAAI,EAAEP,UADM;IAEZoB,IAAI,EAAE;MACJC,GAAG,EAAEZ,EAAE,CAACa,YAAH,CAAgB,MAAhB;IADD;EAFM,CAAd;EAOA,OAAOrB,GAAG,CAAC,SAAD,EAAYkB,KAAZ,EAAmBR,QAAnB,CAAV;AACD,CAjBM;AAmBPH,sBAAsB,CAACe,EAAvB,GAA4B,wBAA5B"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}