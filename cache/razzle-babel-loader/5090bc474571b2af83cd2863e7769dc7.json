{"ast":null,"code":"import _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\nconst messages = defineMessages({\n  cut: {\n    \"id\": \"Cut\",\n    \"defaultMessage\": \"Cut\"\n  },\n  copy: {\n    \"id\": \"Copy\",\n    \"defaultMessage\": \"Copy\"\n  },\n  paste: {\n    \"id\": \"Paste\",\n    \"defaultMessage\": \"Paste\"\n  },\n  rename: {\n    \"id\": \"Rename\",\n    \"defaultMessage\": \"Rename\"\n  },\n  messageCopied: {\n    \"id\": \"{title} copied.\",\n    \"defaultMessage\": \"{title} copied.\"\n  },\n  messageCut: {\n    \"id\": \"{title} cut.\",\n    \"defaultMessage\": \"{title} cut.\"\n  },\n  messageDeleted: {\n    \"id\": \"{title} has been deleted.\",\n    \"defaultMessage\": \"{title} has been deleted.\"\n  },\n  messagePasted: {\n    \"id\": \"Item(s) pasted.\",\n    \"defaultMessage\": \"Item(s) pasted.\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\n\nclass Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false\n    };\n  }\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n\n\n  onRenameOk() {\n    this.setState({\n      showRename: false\n    });\n  }\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n\n\n  onRenameCancel() {\n    this.setState({\n      showRename: false\n    });\n  }\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n\n\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.messageCut, {\n        title: this.props.title\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }));\n  }\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n\n\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.messageCopied, {\n        title: this.props.title\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }));\n  }\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n\n\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(this.props.source, getBaseUrl(this.props.pathname));\n    }\n\n    if (this.props.action === 'cut') {\n      this.props.moveContent(this.props.source, getBaseUrl(this.props.pathname));\n    }\n\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.messagePasted),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }));\n  }\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n\n\n  rename() {\n    this.setState({\n      showRename: true\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return __jsx(Dropdown, {\n      item: true,\n      id: \"toolbar-actions\",\n      trigger: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }\n      }, __jsx(Icon, {\n        name: \"lightning\",\n        size: \"big\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }\n      }), ' ', __jsx(FormattedMessage, {\n        id: \"Actions\",\n        defaultMessage: \"Actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }\n    }, __jsx(Dropdown.Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, this.props.actions.object_buttons && this.props.actions.object_buttons.map(item => {\n      switch (item.id) {\n        case 'cut':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"cut\",\n            text: item.title,\n            onClick: this.cut,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 21\n            }\n          });\n\n        case 'copy':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"copy\",\n            text: item.title,\n            onClick: this.copy,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 21\n            }\n          });\n\n        case 'paste':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"paste\",\n            text: item.title,\n            onClick: this.paste,\n            disabled: this.props.action === null,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 21\n            }\n          });\n\n        case 'delete':\n          return __jsx(Link, {\n            key: item.id,\n            to: `${this.props.pathname}/delete`,\n            className: \"item\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 21\n            }\n          }, __jsx(Icon, {\n            name: \"trash\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 23\n            }\n          }), item.title);\n\n        case 'rename':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"text cursor\",\n            text: item.title,\n            onClick: this.rename,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 21\n            }\n          });\n\n        default:\n          return null;\n      }\n    }), __jsx(ContentsRenameModal, {\n      open: this.state.showRename,\n      onCancel: this.onRenameCancel,\n      onOk: this.onRenameOk,\n      items: [{\n        url: this.props.pathname,\n        title: this.props.title,\n        id: this.props.id\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(Actions, \"propTypes\", {\n  actions: PropTypes.shape({\n    object: PropTypes.arrayOf(PropTypes.object),\n    object_buttons: PropTypes.arrayOf(PropTypes.object),\n    user: PropTypes.arrayOf(PropTypes.object)\n  }),\n  pathname: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  action: PropTypes.string,\n  source: PropTypes.arrayOf(PropTypes.string),\n  cut: PropTypes.func.isRequired,\n  copy: PropTypes.func.isRequired,\n  copyContent: PropTypes.func.isRequired,\n  moveContent: PropTypes.func.isRequired\n});\n\n_defineProperty(Actions, \"defaultProps\", {\n  action: null,\n  actions: null,\n  source: null\n});\n\nexport default compose(injectIntl, connect(state => ({\n  actions: state.actions.actions,\n  action: state.clipboard.action,\n  source: state.clipboard.source,\n  id: state.content.data ? state.content.data.id : '',\n  title: state.content.data ? state.content.data.title : ''\n}), {\n  cut,\n  copy,\n  copyContent,\n  moveContent\n}))(Actions);","map":{"version":3,"names":["React","Component","PropTypes","compose","connect","Link","Dropdown","Icon","toast","FormattedMessage","defineMessages","injectIntl","cut","copy","copyContent","moveContent","getBaseUrl","ContentsRenameModal","Toast","messages","paste","rename","messageCopied","messageCut","messageDeleted","messagePasted","success","Actions","constructor","props","bind","onRenameOk","onRenameCancel","state","showRename","setState","pathname","intl","formatMessage","title","action","source","render","actions","object_buttons","map","item","id","url","shape","object","arrayOf","user","string","isRequired","func","clipboard","content","data"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx"],"sourcesContent":["/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  messageCopied: {\n    id: '{title} copied.',\n    defaultMessage: '{title} copied.',\n  },\n  messageCut: {\n    id: '{title} cut.',\n    defaultMessage: '{title} cut.',\n  },\n  messageDeleted: {\n    id: '{title} has been deleted.',\n    defaultMessage: '{title} has been deleted.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nclass Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    action: null,\n    actions: null,\n    source: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false,\n    };\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCut, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCopied, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messagePasted)}\n      />,\n    );\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Dropdown\n        item\n        id=\"toolbar-actions\"\n        trigger={\n          <span>\n            <Icon name=\"lightning\" size=\"big\" />{' '}\n            <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.actions.object_buttons &&\n            this.props.actions.object_buttons.map((item) => {\n              switch (item.id) {\n                case 'cut':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"cut\"\n                      text={item.title}\n                      onClick={this.cut}\n                    />\n                  );\n                case 'copy':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"copy\"\n                      text={item.title}\n                      onClick={this.copy}\n                    />\n                  );\n                case 'paste':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"paste\"\n                      text={item.title}\n                      onClick={this.paste}\n                      disabled={this.props.action === null}\n                    />\n                  );\n                case 'delete':\n                  return (\n                    <Link\n                      key={item.id}\n                      to={`${this.props.pathname}/delete`}\n                      className=\"item\"\n                    >\n                      <Icon name=\"trash\" />\n                      {item.title}\n                    </Link>\n                  );\n                case 'rename':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"text cursor\"\n                      text={item.title}\n                      onClick={this.rename}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })}\n\n          <ContentsRenameModal\n            open={this.state.showRename}\n            onCancel={this.onRenameCancel}\n            onOk={this.onRenameOk}\n            items={[\n              {\n                url: this.props.pathname,\n                title: this.props.title,\n                id: this.props.id,\n              },\n            ]}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      actions: state.actions.actions,\n      action: state.clipboard.action,\n      source: state.clipboard.source,\n      id: state.content.data ? state.content.data.id : '',\n      title: state.content.data ? state.content.data.title : '',\n    }),\n    {\n      cut,\n      copy,\n      copyContent,\n      moveContent,\n    },\n  ),\n)(Actions);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Cut","defaultMessage":"Cut"},{"id":"Copy","defaultMessage":"Copy"},{"id":"Paste","defaultMessage":"Paste"},{"id":"Rename","defaultMessage":"Rename"},{"id":"{title} copied.","defaultMessage":"{title} copied."},{"id":"{title} cut.","defaultMessage":"{title} cut."},{"id":"{title} has been deleted.","defaultMessage":"{title} has been deleted."},{"id":"Item(s) pasted.","defaultMessage":"Item(s) pasted."},{"id":"Success","defaultMessage":"Success"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module"}