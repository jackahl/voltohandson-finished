{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/config/RichTextEditor/ToHTML.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nconst styles = {\n  code: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  },\n  codeBlock: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20\n  }\n};\n\nconst addBreaklinesInline = children => {\n  if (typeof children[0] == 'string') {\n    const s = children[0];\n\n    if (s.split('\\n').length > 1) {\n      return s.split('\\n').map((child, index) => __jsx(React.Fragment, {\n        key: child + index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, child, (child === null || child === void 0 ? void 0 : child.length) > 0 && __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 33\n        }\n      })));\n    }\n  }\n\n  return children;\n}; // Inline (not block) styles\n\n\nconst inline = {\n  BOLD: (children, {\n    key\n  }) => __jsx(\"strong\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, addBreaklinesInline(children)),\n  ITALIC: (children, {\n    key\n  }) => __jsx(\"em\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, addBreaklinesInline(children)),\n  UNDERLINE: (children, {\n    key\n  }) => __jsx(\"u\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, addBreaklinesInline(children)),\n  CODE: (children, {\n    key\n  }) => __jsx(\"span\", {\n    key: key,\n    style: styles.code,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children)\n};\n\nconst addBreaklines = children => children.map(child => {\n  return child[1].map(child => [__jsx(React.Fragment, {\n    key: child,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, child, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }))]);\n});\n\nconst splitBySoftLines = children => children.map(child => {\n  return child.map(item => {\n    if (Array.isArray(item)) {\n      return item[0].split('\\n');\n    }\n\n    return item;\n  });\n}); // splitSoftLines for <li> tag\n\n\nconst splitSoftLinesOfLists = children => children.map((child, index) => {\n  return __jsx(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, child.map(subchild => {\n    if (Array.isArray(subchild)) {\n      return subchild.map(subchildren => {\n        if (typeof subchildren === 'string') {\n          const last = subchildren.split('\\n').length - 1;\n          return subchildren.split('\\n').map((item, index) => __jsx(React.Fragment, {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }\n          }, item, index !== last && __jsx(\"br\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 40\n            }\n          })));\n        } else {\n          return subchildren;\n        }\n      });\n    } else {\n      return subchild;\n    }\n  }));\n}); // Returns how the default lists should be rendered\n\n\nconst getList = ordered => (children, {\n  depth,\n  keys\n}) => ordered ? __jsx(\"ol\", {\n  key: keys[0],\n  keys: keys,\n  depth: depth,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }\n}, splitSoftLinesOfLists(children)) : __jsx(\"ul\", {\n  key: keys[0],\n  keys: keys,\n  depth: depth,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }\n}, splitSoftLinesOfLists(children)); // Special function to deal with list clones\n\n/*const getSpecialList = type => (children, { depth, keys }) => (\n  <ul key={keys[0]} keys={keys} depth={depth} className={type}>\n    {children.map((child, i) => (\n      <li key={keys[i]} className={`${type}-item`}>\n        {child}\n      </li>\n    ))}\n  </ul>\n);\n*/\n// Original recommended way to deal with atomics, this does not work with IMAGE\n// const getAtomic = (children, { data, keys }) =>\n//   data.map((item, i) => <div key={keys[i]} {...data[i]} />);\n\n\nconst processChildren = (children, keys) => {\n  const processedChildren = children.map(chunks => chunks.map((child, index) => {\n    if (Array.isArray(child)) {\n      // If it's empty is a blank paragraph, we want to add a <br /> in it\n      if (_isEmpty(child)) {\n        return __jsx(\"br\", {\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 18\n          }\n        });\n      }\n\n      return child.map((subchild, index) => {\n        if (typeof subchild === 'string') {\n          const last = subchild.split('\\n').length - 1;\n          return subchild.split('\\n').map((item, index) => __jsx(React.Fragment, {\n            key: index,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }\n          }, item, index !== last && __jsx(\"br\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 36\n            }\n          })));\n        } else {\n          return subchild;\n        }\n      });\n    } else {\n      return child;\n    }\n  }));\n  return processedChildren.map((chunk, index) => chunk && __jsx(\"p\", {\n    key: keys[index],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 32\n    }\n  }, chunk));\n};\n/**\n * Note that children can be maped to render a list or do other cool stuff\n */\n\n\nconst blocks = {\n  unstyled: (children, {\n    keys\n  }) => {\n    return processChildren(children, keys);\n  },\n  atomic: children => children[0],\n  blockquote: (children, {\n    keys\n  }) => __jsx(\"blockquote\", {\n    key: keys[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, addBreaklines(splitBySoftLines(children))),\n  'header-one': (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"h1\", {\n    key: keys[i],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 32\n    }\n  }, child)),\n  'header-two': (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"h2\", {\n    id: keys[i],\n    key: keys[i],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }, child)),\n  'header-three': (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"h3\", {\n    id: keys[i],\n    key: keys[i],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, child)),\n  'header-four': (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"h4\", {\n    id: keys[i],\n    key: keys[i],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, child)),\n  'header-five': (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"h5\", {\n    id: keys[i],\n    key: keys[i],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, child)),\n  'header-six': (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"h6\", {\n    id: keys[i],\n    key: keys[i],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, child)),\n  'code-block': (children, {\n    keys\n  }) => __jsx(\"pre\", {\n    key: keys[0],\n    style: styles.codeBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }\n  }, addBreaklines(children)),\n  'unordered-list-item': getList(),\n  'ordered-list-item': getList(true),\n  callout: (children, {\n    keys\n  }) => children.map((child, i) => __jsx(\"p\", {\n    key: keys[i],\n    className: \"callout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }\n  }, child))\n};\nconst LinkEntity = connect(state => ({\n  token: state.userSession.token\n}))(({\n  token,\n  key,\n  url,\n  target,\n  targetUrl,\n  download,\n  children\n}) => {\n  const to = token ? url : targetUrl || url;\n  return __jsx(UniversalLink, {\n    href: to,\n    openLinkInNewTab: target === '_blank' || undefined,\n    download: download,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }\n  }, children);\n});\nconst entities = {\n  LINK: (children, props, {\n    key\n  }) => __jsx(LinkEntity, _extends({\n    key: key\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 5\n    }\n  }), children),\n  IMAGE: (children, entity, {\n    key\n  }) => __jsx(\"img\", {\n    key: key,\n    src: entity.src,\n    alt: entity.alt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 5\n    }\n  })\n};\nexport const options = {\n  cleanup: false // joinOutput: true,\n\n};\nconst renderers = {\n  inline,\n  blocks,\n  entities\n};\nexport default renderers;","map":{"version":3,"names":["React","connect","UniversalLink","styles","code","backgroundColor","fontFamily","fontSize","padding","codeBlock","addBreaklinesInline","children","s","split","length","map","child","index","inline","BOLD","key","ITALIC","UNDERLINE","CODE","addBreaklines","splitBySoftLines","item","Array","isArray","splitSoftLinesOfLists","subchild","subchildren","last","getList","ordered","depth","keys","processChildren","processedChildren","chunks","chunk","blocks","unstyled","atomic","blockquote","i","callout","LinkEntity","state","token","userSession","url","target","targetUrl","download","to","undefined","entities","LINK","props","IMAGE","entity","src","alt","options","cleanup","renderers"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/config/RichTextEditor/ToHTML.jsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\n\nconst styles = {\n  code: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n  codeBlock: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20,\n  },\n};\n\nconst addBreaklinesInline = (children) => {\n  if (typeof children[0] == 'string') {\n    const s = children[0];\n\n    if (s.split('\\n').length > 1) {\n      return s.split('\\n').map((child, index) => (\n        <React.Fragment key={child + index}>\n          {child}\n          {child?.length > 0 && <br />}\n        </React.Fragment>\n      ));\n    }\n  }\n  return children;\n};\n\n// Inline (not block) styles\nconst inline = {\n  BOLD: (children, { key }) => (\n    <strong key={key}>{addBreaklinesInline(children)}</strong>\n  ),\n  ITALIC: (children, { key }) => (\n    <em key={key}>{addBreaklinesInline(children)}</em>\n  ),\n  UNDERLINE: (children, { key }) => (\n    <u key={key}>{addBreaklinesInline(children)}</u>\n  ),\n  CODE: (children, { key }) => (\n    <span key={key} style={styles.code}>\n      {children}\n    </span>\n  ),\n};\n\nconst addBreaklines = (children) =>\n  children.map((child) => {\n    return child[1].map((child) => [\n      <React.Fragment key={child}>\n        {child}\n        <br />\n      </React.Fragment>,\n    ]);\n  });\n\nconst splitBySoftLines = (children) =>\n  children.map((child) => {\n    return child.map((item) => {\n      if (Array.isArray(item)) {\n        return item[0].split('\\n');\n      }\n      return item;\n    });\n  });\n\n// splitSoftLines for <li> tag\nconst splitSoftLinesOfLists = (children) =>\n  children.map((child, index) => {\n    return (\n      <li key={index}>\n        {child.map((subchild) => {\n          if (Array.isArray(subchild)) {\n            return subchild.map((subchildren) => {\n              if (typeof subchildren === 'string') {\n                const last = subchildren.split('\\n').length - 1;\n                return subchildren.split('\\n').map((item, index) => (\n                  <React.Fragment key={index}>\n                    {item}\n                    {index !== last && <br />}\n                  </React.Fragment>\n                ));\n              } else {\n                return subchildren;\n              }\n            });\n          } else {\n            return subchild;\n          }\n        })}\n      </li>\n    );\n  });\n\n// Returns how the default lists should be rendered\nconst getList = (ordered) => (children, { depth, keys }) =>\n  ordered ? (\n    <ol key={keys[0]} keys={keys} depth={depth}>\n      {splitSoftLinesOfLists(children)}\n    </ol>\n  ) : (\n    <ul key={keys[0]} keys={keys} depth={depth}>\n      {splitSoftLinesOfLists(children)}\n    </ul>\n  );\n\n// Special function to deal with list clones\n/*const getSpecialList = type => (children, { depth, keys }) => (\n  <ul key={keys[0]} keys={keys} depth={depth} className={type}>\n    {children.map((child, i) => (\n      <li key={keys[i]} className={`${type}-item`}>\n        {child}\n      </li>\n    ))}\n  </ul>\n);\n*/\n\n// Original recommended way to deal with atomics, this does not work with IMAGE\n// const getAtomic = (children, { data, keys }) =>\n//   data.map((item, i) => <div key={keys[i]} {...data[i]} />);\n\nconst processChildren = (children, keys) => {\n  const processedChildren = children.map((chunks) =>\n    chunks.map((child, index) => {\n      if (Array.isArray(child)) {\n        // If it's empty is a blank paragraph, we want to add a <br /> in it\n        if (isEmpty(child)) {\n          return <br key={index} />;\n        }\n        return child.map((subchild, index) => {\n          if (typeof subchild === 'string') {\n            const last = subchild.split('\\n').length - 1;\n            return subchild.split('\\n').map((item, index) => (\n              <React.Fragment key={index}>\n                {item}\n                {index !== last && <br />}\n              </React.Fragment>\n            ));\n          } else {\n            return subchild;\n          }\n        });\n      } else {\n        return child;\n      }\n    }),\n  );\n  return processedChildren.map(\n    (chunk, index) => chunk && <p key={keys[index]}>{chunk}</p>,\n  );\n};\n/**\n * Note that children can be maped to render a list or do other cool stuff\n */\nconst blocks = {\n  unstyled: (children, { keys }) => {\n    return processChildren(children, keys);\n  },\n  atomic: (children) => children[0],\n  blockquote: (children, { keys }) => (\n    <blockquote key={keys[0]}>\n      {addBreaklines(splitBySoftLines(children))}\n    </blockquote>\n  ),\n  'header-one': (children, { keys }) =>\n    children.map((child, i) => <h1 key={keys[i]}>{child}</h1>),\n  'header-two': (children, { keys }) =>\n    children.map((child, i) => (\n      <h2 id={keys[i]} key={keys[i]}>\n        {child}\n      </h2>\n    )),\n  'header-three': (children, { keys }) =>\n    children.map((child, i) => (\n      <h3 id={keys[i]} key={keys[i]}>\n        {child}\n      </h3>\n    )),\n  'header-four': (children, { keys }) =>\n    children.map((child, i) => (\n      <h4 id={keys[i]} key={keys[i]}>\n        {child}\n      </h4>\n    )),\n  'header-five': (children, { keys }) =>\n    children.map((child, i) => (\n      <h5 id={keys[i]} key={keys[i]}>\n        {child}\n      </h5>\n    )),\n  'header-six': (children, { keys }) =>\n    children.map((child, i) => (\n      <h6 id={keys[i]} key={keys[i]}>\n        {child}\n      </h6>\n    )),\n  'code-block': (children, { keys }) => (\n    <pre key={keys[0]} style={styles.codeBlock}>\n      {addBreaklines(children)}\n    </pre>\n  ),\n  'unordered-list-item': getList(),\n  'ordered-list-item': getList(true),\n  callout: (children, { keys }) =>\n    children.map((child, i) => (\n      <p key={keys[i]} className=\"callout\">\n        {child}\n      </p>\n    )),\n};\n\nconst LinkEntity = connect((state) => ({\n  token: state.userSession.token,\n}))(({ token, key, url, target, targetUrl, download, children }) => {\n  const to = token ? url : targetUrl || url;\n\n  return (\n    <UniversalLink\n      href={to}\n      openLinkInNewTab={target === '_blank' || undefined}\n      download={download}\n    >\n      {children}\n    </UniversalLink>\n  );\n});\n\nconst entities = {\n  LINK: (children, props, { key }) => (\n    <LinkEntity key={key} {...props}>\n      {children}\n    </LinkEntity>\n  ),\n\n  IMAGE: (children, entity, { key }) => (\n    <img key={key} src={entity.src} alt={entity.alt} />\n  ),\n};\n\nexport const options = {\n  cleanup: false,\n  // joinOutput: true,\n};\n\nconst renderers = {\n  inline,\n  blocks,\n  entities,\n};\n\nexport default renderers;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}