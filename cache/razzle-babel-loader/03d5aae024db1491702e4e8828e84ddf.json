{"ast":null,"code":"import _join from \"lodash/join\";\nimport _nth from \"lodash/nth\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl, hasBlocksData, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { Error, Form, Icon, Toolbar, Sidebar, Toast } from '@plone/volto/components';\nimport { getSchema, updateSchema, getControlpanel, updateControlpanel } from '@plone/volto/actions';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  enable: {\n    \"id\": \"Enable editable Blocks\",\n    \"defaultMessage\": \"Enable editable Blocks\"\n  }\n});\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\n\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onEnableBlocks = this.onEnableBlocks.bind(this);\n    this.onDisableBlocksBehavior = this.onDisableBlocksBehavior.bind(this);\n    this.form = /*#__PURE__*/React.createRef();\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.props.getControlpanel(_join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (this.props.cpanelRequest.get.loading && nextProps.cpanelRequest.get.error) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error\n      });\n    } // Schema GET\n\n\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      var _nextProps$schema;\n\n      const properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n      const content = {};\n\n      for (const key in properties) {\n        const value = properties[key].default;\n\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      if (hasBlocksData(properties)) {\n        var _properties$blocksFie, _properties$blocksLay, _properties$blocksFie2;\n\n        this.setState({\n          visual: true\n        });\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = ((_properties$blocksFie = properties[blocksFieldName]) === null || _properties$blocksFie === void 0 ? void 0 : _properties$blocksFie.default) || {};\n        content[blocksLayoutFieldname] = ((_properties$blocksLay = properties[blocksLayoutFieldname]) === null || _properties$blocksLay === void 0 ? void 0 : _properties$blocksLay.default) || {\n          items: []\n        };\n        const blocksBehavior = ((_properties$blocksFie2 = properties[blocksFieldName]) === null || _properties$blocksFie2 === void 0 ? void 0 : _properties$blocksFie2.behavior) || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated') ? blocksBehavior : ''\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: ''\n        });\n      }\n\n      this.setState({\n        content: content\n      });\n    } // Schema updated\n\n\n    if (this.props.schemaRequest.update.loading && nextProps.schemaRequest.update.loaded) {\n      this.props.getSchema(this.props.id);\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }));\n    } // Blocks behavior disabled\n\n\n    if (this.props.cpanelRequest.update.loading && nextProps.cpanelRequest.update.loaded) {\n      this.onEnableBlocks();\n    }\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    const schema = {\n      properties: {}\n    };\n    Object.keys(data).filter(k => data[k]).forEach(k => schema.properties[k] = {\n      default: data[k]\n    });\n    this.props.updateSchema(this.props.id, schema);\n  }\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    const url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n\n\n  onEnableBlocks() {\n    var _properties$blocksFie3, _properties$blocksLay2;\n\n    const {\n      properties = {}\n    } = this.props.schema;\n    const blocksFieldName = getBlocksFieldname(properties);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n    const schema = {\n      fieldsets: [{\n        id: 'layout',\n        title: 'Layout',\n        fields: ['blocks', 'blocks_layout']\n      }],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: ((_properties$blocksFie3 = properties[blocksFieldName]) === null || _properties$blocksFie3 === void 0 ? void 0 : _properties$blocksFie3.default) || {}\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: ((_properties$blocksLay2 = properties[blocksLayoutFieldname]) === null || _properties$blocksLay2 === void 0 ? void 0 : _properties$blocksLay2.default) || {\n            items: []\n          }\n        }\n      }\n    };\n    this.props.updateSchema(this.props.id, schema);\n  }\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n\n\n  onDisableBlocksBehavior() {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$schema, _this$props$schema2;\n\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 14\n        }\n      });\n    }\n\n    if (!this.state.visual) {\n      var _this$props, _this$props$controlpa;\n\n      // Still loading\n      if (!this.state.content) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 16\n          }\n        });\n      } // Blocks are not enabled\n\n\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        placeholder: true,\n        id: \"page-controlpanel-layout\",\n        className: \"ui container center aligned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n        defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n        values: {\n          strong: (...chunks) => __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 42\n            }\n          }, chunks),\n          type: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$controlpa = _this$props.controlpanel) === null || _this$props$controlpa === void 0 ? void 0 : _this$props$controlpa.title) || this.props.id\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"ui divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        primary: true,\n        onClick: this.onEnableBlocks,\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }\n      })), __jsx(Portal, {\n        node: this.state.isClient && document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          className: \"item\",\n          to: \"#\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          size: \"30px\",\n          className: \"contents circled\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 21\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    if (this.state.readOnlyBehavior) {\n      var _this$props2, _this$props2$controlp;\n\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        placeholder: true,\n        id: \"page-controlpanel-layout\",\n        className: \"ui container center aligned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n        defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n        values: {\n          strong: (...chunks) => __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 42\n            }\n          }, chunks),\n          type: ((_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$controlp = _this$props2.controlpanel) === null || _this$props2$controlp === void 0 ? void 0 : _this$props2$controlp.title) || this.props.id\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"ui divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        primary: true,\n        onClick: this.onDisableBlocksBehavior,\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }\n      })), __jsx(Portal, {\n        node: this.state.isClient && document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          className: \"item\",\n          to: \"#\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          size: \"30px\",\n          className: \"contents circled\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 21\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }\n      })));\n    } // Render layout editor\n\n\n    const blocksFieldName = getBlocksFieldname(((_this$props$schema = this.props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.properties) || {});\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(((_this$props$schema2 = this.props.schema) === null || _this$props$schema2 === void 0 ? void 0 : _this$props$schema2.properties) || {});\n    return __jsx(\"div\", {\n      id: \"page-controlpanel-layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 7\n      }\n    }, __jsx(Form, {\n      isAdminForm: true,\n      ref: this.form,\n      schema: {\n        fieldsets: [{\n          id: 'layout',\n          title: 'Layout',\n          fields: [blocksFieldName, blocksLayoutFieldname]\n        }],\n        properties: _objectSpread(_objectSpread({}, this.props.schema.properties[blocksFieldName]), this.props.schema.properties[blocksLayoutFieldname]),\n        required: []\n      },\n      formData: this.state.content,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      pathname: this.props.pathname,\n      visual: this.state.visual,\n      hideActions: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }\n    }), __jsx(Portal, {\n      node: this.state.isClient && document.getElementById('sidebar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }\n    }, __jsx(Sidebar, {\n      settingsTab: true,\n      documentTab: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }\n    })), __jsx(Portal, {\n      node: this.state.isClient && document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: () => this.form.current.onSubmit(),\n        disabled: this.props.schemaRequest.update.loading,\n        loading: this.props.schemaRequest.update.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 19\n        }\n      })), __jsx(Button, {\n        className: \"cancel\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        onClick: () => this.onCancel(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 19\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(ContentTypeLayout, \"propTypes\", {\n  updateControlpanel: PropTypes.func.isRequired,\n  getControlpanel: PropTypes.func.isRequired,\n  getSchema: PropTypes.func.isRequired,\n  updateSchema: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  parent: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.objectOf(PropTypes.any),\n  controlpanel: PropTypes.shape({\n    '@id': PropTypes.string,\n    data: PropTypes.object,\n    schema: PropTypes.object,\n    title: PropTypes.string\n  })\n});\n\n_defineProperty(ContentTypeLayout, \"defaultProps\", {\n  schema: {},\n  controlpanel: null\n});\n\nexport default compose(injectIntl, connect((state, props) => ({\n  schema: state.schema.schema,\n  schemaRequest: state.schema,\n  cpanelRequest: state.controlpanels,\n  controlpanel: state.controlpanels.controlpanel,\n  pathname: props.location.pathname,\n  id: _nth(props.location.pathname.split('/'), -2),\n  parent: _nth(props.location.pathname.split('/'), -3)\n}), {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel\n}))(ContentTypeLayout);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","getParentUrl","hasBlocksData","getBlocksFieldname","getBlocksLayoutFieldname","Portal","Button","Segment","toast","defineMessages","injectIntl","FormattedMessage","Error","Form","Icon","Toolbar","Sidebar","Toast","getSchema","updateSchema","getControlpanel","updateControlpanel","saveSVG","clearSVG","backSVG","messages","changesSaved","back","save","cancel","info","enable","ContentTypeLayout","constructor","props","state","visual","content","readOnlyBehavior","error","isClient","onCancel","bind","onSubmit","onEnableBlocks","onDisableBlocksBehavior","form","createRef","componentDidMount","parent","id","setState","UNSAFE_componentWillReceiveProps","nextProps","cpanelRequest","get","loading","schemaRequest","loaded","properties","schema","key","value","default","blocksFieldName","blocksLayoutFieldname","items","blocksBehavior","behavior","includes","update","intl","formatMessage","data","Object","keys","filter","k","forEach","url","pathname","history","push","fieldsets","title","fields","blocks","type","widget","factory","blocks_layout","controlpanel","render","strong","chunks","document","getElementById","required","current","func","isRequired","string","objectOf","any","shape","object","controlpanels","location","split"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx"],"sourcesContent":["/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport {\n  getParentUrl,\n  hasBlocksData,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { nth, join } from 'lodash';\nimport {\n  Error,\n  Form,\n  Icon,\n  Toolbar,\n  Sidebar,\n  Toast,\n} from '@plone/volto/components';\nimport {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel,\n} from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  enable: {\n    id: 'Enable editable Blocks',\n    defaultMessage: 'Enable editable Blocks',\n  },\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateSchema: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    parent: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: {},\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onEnableBlocks = this.onEnableBlocks.bind(this);\n    this.onDisableBlocksBehavior = this.onDisableBlocksBehavior.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      const properties = nextProps.schema?.properties || {};\n      const content = {};\n      for (const key in properties) {\n        const value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      if (hasBlocksData(properties)) {\n        this.setState({\n          visual: true,\n        });\n\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = properties[blocksFieldName]?.default || {};\n        content[blocksLayoutFieldname] = properties[blocksLayoutFieldname]\n          ?.default || { items: [] };\n\n        const blocksBehavior = properties[blocksFieldName]?.behavior || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated')\n            ? blocksBehavior\n            : '',\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: '',\n        });\n      }\n\n      this.setState({\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.update.loading &&\n      nextProps.schemaRequest.update.loaded\n    ) {\n      this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Blocks behavior disabled\n    if (\n      this.props.cpanelRequest.update.loading &&\n      nextProps.cpanelRequest.update.loaded\n    ) {\n      this.onEnableBlocks();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    const schema = { properties: {} };\n    Object.keys(data)\n      .filter((k) => data[k])\n      .forEach((k) => (schema.properties[k] = { default: data[k] }));\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    const url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n  onEnableBlocks() {\n    const { properties = {} } = this.props.schema;\n    const blocksFieldName = getBlocksFieldname(properties);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n    const schema = {\n      fieldsets: [\n        {\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout'],\n        },\n      ],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksFieldName]?.default || {},\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksLayoutFieldname]?.default || { items: [] },\n        },\n      },\n    };\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n  onDisableBlocksBehavior() {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (!this.state.visual) {\n      // Still loading\n      if (!this.state.content) {\n        return <div />;\n      }\n\n      // Blocks are not enabled\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onEnableBlocks}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    if (this.state.readOnlyBehavior) {\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onDisableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(\n      this.props.schema?.properties || {},\n    );\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(\n      this.props.schema?.properties || {},\n    );\n    return (\n      <div id=\"page-controlpanel-layout\">\n        <Form\n          isAdminForm\n          ref={this.form}\n          schema={{\n            fieldsets: [\n              {\n                id: 'layout',\n                title: 'Layout',\n                fields: [blocksFieldName, blocksLayoutFieldname],\n              },\n            ],\n            properties: {\n              ...this.props.schema.properties[blocksFieldName],\n              ...this.props.schema.properties[blocksLayoutFieldname],\n            },\n            required: [],\n          }}\n          formData={this.state.content}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          pathname={this.props.pathname}\n          visual={this.state.visual}\n          hideActions\n        />\n        <Portal\n          node={this.state.isClient && document.getElementById('sidebar')}\n        >\n          <Sidebar settingsTab={true} documentTab={false} />\n        </Portal>\n        <Portal\n          node={this.state.isClient && document.getElementById('toolbar')}\n        >\n          <Toolbar\n            pathname={this.props.pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <Button\n                  id=\"toolbar-save\"\n                  className=\"save\"\n                  aria-label={this.props.intl.formatMessage(messages.save)}\n                  onClick={() => this.form.current.onSubmit()}\n                  disabled={this.props.schemaRequest.update.loading}\n                  loading={this.props.schemaRequest.update.loading}\n                >\n                  <Icon\n                    name={saveSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.save)}\n                  />\n                </Button>\n                <Button\n                  className=\"cancel\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  onClick={() => this.onCancel()}\n                >\n                  <Icon\n                    name={clearSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                  />\n                </Button>\n              </>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      cpanelRequest: state.controlpanels,\n      controlpanel: state.controlpanels.controlpanel,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n      parent: nth(props.location.pathname.split('/'), -3),\n    }),\n    { getSchema, updateSchema, getControlpanel, updateControlpanel },\n  ),\n)(ContentTypeLayout);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Changes saved.","defaultMessage":"Changes saved."},{"id":"Back","defaultMessage":"Back"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Info","defaultMessage":"Info"},{"id":"Enable editable Blocks","defaultMessage":"Enable editable Blocks"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>"}]}},"sourceType":"module"}