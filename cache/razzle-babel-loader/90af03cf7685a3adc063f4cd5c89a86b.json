{"ast":null,"code":"import _omit from \"lodash/omit\";\nimport _isEqual from \"lodash/isEqual\";\nimport _isEmpty from \"lodash/isEmpty\";\nconst _excluded = [\"element\", \"attributes\", \"extras\"],\n      _excluded2 = [\"children\"];\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/render.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { Node, Text } from 'slate';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\nconst OMITTED = ['editor', 'path']; // TODO: read, see if relevant\n// https://reactjs.org/docs/higher-order-components.html#dont-use-hocs-inside-the-render-method\n\nexport const Element = _ref => {\n  let {\n    element,\n    attributes = {},\n    extras\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  const {\n    slate\n  } = config.settings;\n  const {\n    elements\n  } = slate;\n  const El = elements[element.type] || elements['default'];\n  const out = Object.assign(element.styleName ? {\n    className: element.styleName\n  } : {}, ...Object.keys(attributes || {}).map(k => !_isEmpty(attributes[k]) ? {\n    [k]: attributes[k]\n  } : {}));\n  return __jsx(El, _extends({\n    element: element\n  }, _omit(rest, OMITTED), {\n    attributes: out,\n    extras: extras,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }));\n};\nexport const Leaf = _ref2 => {\n  let {\n    children\n  } = _ref2,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  // console.log('rest', rest, children);\n  const {\n    attributes,\n    leaf,\n    mode\n  } = rest;\n  let {\n    leafs\n  } = config.settings.slate;\n  children = Object.keys(leafs).reduce((acc, name) => {\n    return Object.keys(leaf).includes(name) ? leafs[name]({\n      children: acc\n    }) : acc;\n  }, children);\n  const classNames = {\n    [`highlight-${leaf.highlightType}`]: mode !== 'view' && leaf.highlight,\n    'highlight-selection': mode !== 'view' && leaf.isSelection\n  }; // stylemenu support\n\n  for (const prop in leaf) {\n    if (prop.startsWith('style-')) {\n      classNames[prop.substring(6)] = true;\n    }\n  }\n\n  const klass = cx(classNames);\n  return mode === 'view' ? typeof children === 'string' ? children.split('\\n').map((t, i) => {\n    // Softbreak support. Should do a plugin?\n    return __jsx(React.Fragment, {\n      key: `${i}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, children.indexOf('\\n') > -1 && children.split('\\n').length - 1 > i ? __jsx(React.Fragment, null, klass ? __jsx(\"span\", {\n      className: klass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 26\n      }\n    }, t) : t, __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    })) : klass ? __jsx(\"span\", {\n      className: klass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, t) : t);\n  }) : __jsx(\"span\", {\n    className: klass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, children) : __jsx(\"span\", _extends({}, attributes, {\n    className: klass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nconst serializeData = node => {\n  return JSON.stringify({\n    type: node.type,\n    data: node.data\n  });\n};\n\nexport const serializeNodes = (nodes, getAttributes, extras = {}) => {\n  const editor = {\n    children: nodes || []\n  };\n\n  const _serializeNodes = nodes => {\n    return (nodes || []).map(([node, path], i) => {\n      return Text.isText(node) ? __jsx(Leaf, {\n        path: path,\n        leaf: node,\n        text: node,\n        mode: \"view\",\n        key: path,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, node.text) : __jsx(Element, {\n        path: path,\n        element: node,\n        mode: \"view\",\n        key: path,\n        \"data-slate-data\": node.data ? serializeData(node) : null,\n        attributes: _isEqual(path, [0]) ? getAttributes ? getAttributes(node, path) : null : null,\n        extras: extras,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, _serializeNodes(Array.from(Node.children(editor, path))));\n    });\n  };\n\n  return _serializeNodes(Array.from(Node.children(editor, [])));\n};\n/**\n * Get the concatenated text string of a node's content.\n *\n * Note that this WILL include spaces between block node leafs in contrary to\n * the original slate method. This function joins text of nodes with\n * separating spaces to produce a string for indexing purposes.\n *\n */\n\nconst ConcatenatedString = node => {\n  if (Text.isText(node)) {\n    return node.text.trim();\n  } else {\n    return node.children.map(ConcatenatedString).join(' ');\n  }\n};\n/**\n * @function serializeNodesToText\n *\n * @param {Array[Node]} nodes\n *\n * @returns {string}\n */\n\n\nexport const serializeNodesToText = nodes => {\n  return nodes.map(ConcatenatedString).join('\\n');\n};\nexport const serializeNodesToHtml = nodes => renderToStaticMarkup(serializeNodes(nodes));","map":{"version":3,"names":["React","renderToStaticMarkup","Node","Text","cx","config","OMITTED","Element","element","attributes","extras","rest","slate","settings","elements","El","type","out","Object","assign","styleName","className","keys","map","k","Leaf","children","leaf","mode","leafs","reduce","acc","name","includes","classNames","highlightType","highlight","isSelection","prop","startsWith","substring","klass","split","t","i","indexOf","length","serializeData","node","JSON","stringify","data","serializeNodes","nodes","getAttributes","editor","_serializeNodes","path","isText","text","Array","from","ConcatenatedString","trim","join","serializeNodesToText","serializeNodesToHtml"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/render.jsx"],"sourcesContent":["import React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport { Node, Text } from 'slate';\nimport cx from 'classnames';\nimport { isEmpty, isEqual, omit } from 'lodash';\nimport config from '@plone/volto/registry';\n\nconst OMITTED = ['editor', 'path'];\n\n// TODO: read, see if relevant\n// https://reactjs.org/docs/higher-order-components.html#dont-use-hocs-inside-the-render-method\nexport const Element = ({ element, attributes = {}, extras, ...rest }) => {\n  const { slate } = config.settings;\n  const { elements } = slate;\n  const El = elements[element.type] || elements['default'];\n\n  const out = Object.assign(\n    element.styleName ? { className: element.styleName } : {},\n    ...Object.keys(attributes || {}).map((k) =>\n      !isEmpty(attributes[k]) ? { [k]: attributes[k] } : {},\n    ),\n  );\n\n  return (\n    <El\n      element={element}\n      {...omit(rest, OMITTED)}\n      attributes={out}\n      extras={extras}\n    />\n  );\n};\n\nexport const Leaf = ({ children, ...rest }) => {\n  // console.log('rest', rest, children);\n  const { attributes, leaf, mode } = rest;\n  let { leafs } = config.settings.slate;\n\n  children = Object.keys(leafs).reduce((acc, name) => {\n    return Object.keys(leaf).includes(name)\n      ? leafs[name]({ children: acc })\n      : acc;\n  }, children);\n\n  const classNames = {\n    [`highlight-${leaf.highlightType}`]: mode !== 'view' && leaf.highlight,\n    'highlight-selection': mode !== 'view' && leaf.isSelection,\n  };\n\n  // stylemenu support\n  for (const prop in leaf) {\n    if (prop.startsWith('style-')) {\n      classNames[prop.substring(6)] = true;\n    }\n  }\n\n  const klass = cx(classNames);\n\n  return mode === 'view' ? (\n    typeof children === 'string' ? (\n      children.split('\\n').map((t, i) => {\n        // Softbreak support. Should do a plugin?\n        return (\n          <React.Fragment key={`${i}`}>\n            {children.indexOf('\\n') > -1 &&\n            children.split('\\n').length - 1 > i ? (\n              <>\n                {klass ? <span className={klass}>{t}</span> : t}\n                <br />\n              </>\n            ) : klass ? (\n              <span className={klass}>{t}</span>\n            ) : (\n              t\n            )}\n          </React.Fragment>\n        );\n      })\n    ) : (\n      <span className={klass}>{children}</span>\n    )\n  ) : (\n    <span {...attributes} className={klass}>\n      {children}\n    </span>\n  );\n};\n\nconst serializeData = (node) => {\n  return JSON.stringify({ type: node.type, data: node.data });\n};\n\nexport const serializeNodes = (nodes, getAttributes, extras = {}) => {\n  const editor = { children: nodes || [] };\n\n  const _serializeNodes = (nodes) => {\n    return (nodes || []).map(([node, path], i) => {\n      return Text.isText(node) ? (\n        <Leaf path={path} leaf={node} text={node} mode=\"view\" key={path}>\n          {node.text}\n        </Leaf>\n      ) : (\n        <Element\n          path={path}\n          element={node}\n          mode=\"view\"\n          key={path}\n          data-slate-data={node.data ? serializeData(node) : null}\n          attributes={\n            isEqual(path, [0])\n              ? getAttributes\n                ? getAttributes(node, path)\n                : null\n              : null\n          }\n          extras={extras}\n        >\n          {_serializeNodes(Array.from(Node.children(editor, path)))}\n        </Element>\n      );\n    });\n  };\n\n  return _serializeNodes(Array.from(Node.children(editor, [])));\n};\n\n/**\n * Get the concatenated text string of a node's content.\n *\n * Note that this WILL include spaces between block node leafs in contrary to\n * the original slate method. This function joins text of nodes with\n * separating spaces to produce a string for indexing purposes.\n *\n */\nconst ConcatenatedString = (node) => {\n  if (Text.isText(node)) {\n    return node.text.trim();\n  } else {\n    return node.children.map(ConcatenatedString).join(' ');\n  }\n};\n\n/**\n * @function serializeNodesToText\n *\n * @param {Array[Node]} nodes\n *\n * @returns {string}\n */\nexport const serializeNodesToText = (nodes) => {\n  return nodes.map(ConcatenatedString).join('\\n');\n};\n\nexport const serializeNodesToHtml = (nodes) =>\n  renderToStaticMarkup(serializeNodes(nodes));\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}