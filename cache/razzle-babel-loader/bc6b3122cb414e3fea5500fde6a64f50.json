{"ast":null,"code":"import { Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport { isCursorInList, isCursorAtListBlockStart, deconstructToVoltoBlocks } from '@plone/volto-slate/utils';\n/**\n * Handle the new Volto blocks created by `deconstructToVoltoBlocks`.\n * @param {Editor} editor The Slate editor object\n * @param {string[]} newIds The IDs of the newly created Volto blocks.\n */\n\nconst handleNewVoltoBlocks = (editor, newIds) => {\n  const props = editor.getBlockProps();\n  props.onSelectBlock(newIds[0]);\n};\n/**\n * Handles the Backspace key press event in the given `editor`.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\n\n\nexport function backspaceInList({\n  editor,\n  event\n}) {\n  // If the cursor is not in a list, nothing special.\n  if (!isCursorInList(editor)) return false;\n\n  if (isCursorAtListBlockStart(editor)) {\n    const {\n      slate\n    } = config.settings;\n    const blockProps = editor.getBlockProps();\n    const {\n      data\n    } = blockProps; // Can't split if block is required\n\n    if (data !== null && data !== void 0 && data.required) return; // Raise all LI-s as direct children of the editor.\n    // TODO: add check for path depth\n    // Error: Cannot lift node at a path [0] because it has a depth of less\n    // than `2`.\n\n    Transforms.liftNodes(editor, {\n      match: (n, path) => {\n        // console.log('lift', n, path);\n        return path.length > 1 && n.type === slate.listItemType;\n      }\n    }); // Convert all the selection to be of type `slate.defaultBlockType` (by\n    // default 'p' or paragraph).\n\n    Transforms.setNodes(editor, {\n      type: slate.defaultBlockType\n    });\n    deconstructToVoltoBlocks(editor).then(newIds => {\n      handleNewVoltoBlocks(editor, newIds);\n    });\n    return true;\n  }\n}","map":{"version":3,"names":["Transforms","config","isCursorInList","isCursorAtListBlockStart","deconstructToVoltoBlocks","handleNewVoltoBlocks","editor","newIds","props","getBlockProps","onSelectBlock","backspaceInList","event","slate","settings","blockProps","data","required","liftNodes","match","n","path","length","type","listItemType","setNodes","defaultBlockType","then"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/keyboard/backspaceInList.js"],"sourcesContent":["import { Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport {\n  isCursorInList,\n  isCursorAtListBlockStart,\n  deconstructToVoltoBlocks,\n} from '@plone/volto-slate/utils';\n\n/**\n * Handle the new Volto blocks created by `deconstructToVoltoBlocks`.\n * @param {Editor} editor The Slate editor object\n * @param {string[]} newIds The IDs of the newly created Volto blocks.\n */\nconst handleNewVoltoBlocks = (editor, newIds) => {\n  const props = editor.getBlockProps();\n  props.onSelectBlock(newIds[0]);\n};\n\n/**\n * Handles the Backspace key press event in the given `editor`.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function backspaceInList({ editor, event }) {\n  // If the cursor is not in a list, nothing special.\n  if (!isCursorInList(editor)) return false;\n\n  if (isCursorAtListBlockStart(editor)) {\n    const { slate } = config.settings;\n    const blockProps = editor.getBlockProps();\n    const { data } = blockProps;\n\n    // Can't split if block is required\n    if (data?.required) return;\n\n    // Raise all LI-s as direct children of the editor.\n    // TODO: add check for path depth\n    // Error: Cannot lift node at a path [0] because it has a depth of less\n    // than `2`.\n    Transforms.liftNodes(editor, {\n      match: (n, path) => {\n        // console.log('lift', n, path);\n        return path.length > 1 && n.type === slate.listItemType;\n      },\n    });\n\n    // Convert all the selection to be of type `slate.defaultBlockType` (by\n    // default 'p' or paragraph).\n    Transforms.setNodes(editor, { type: slate.defaultBlockType });\n\n    deconstructToVoltoBlocks(editor).then((newIds) => {\n      handleNewVoltoBlocks(editor, newIds);\n    });\n\n    return true;\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SACEC,cADF,EAEEC,wBAFF,EAGEC,wBAHF,QAIO,0BAJP;AAMA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;EAC/C,MAAMC,KAAK,GAAGF,MAAM,CAACG,aAAP,EAAd;EACAD,KAAK,CAACE,aAAN,CAAoBH,MAAM,CAAC,CAAD,CAA1B;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASI,eAAT,CAAyB;EAAEL,MAAF;EAAUM;AAAV,CAAzB,EAA4C;EACjD;EACA,IAAI,CAACV,cAAc,CAACI,MAAD,CAAnB,EAA6B,OAAO,KAAP;;EAE7B,IAAIH,wBAAwB,CAACG,MAAD,CAA5B,EAAsC;IACpC,MAAM;MAAEO;IAAF,IAAYZ,MAAM,CAACa,QAAzB;IACA,MAAMC,UAAU,GAAGT,MAAM,CAACG,aAAP,EAAnB;IACA,MAAM;MAAEO;IAAF,IAAWD,UAAjB,CAHoC,CAKpC;;IACA,IAAIC,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEC,QAAV,EAAoB,OANgB,CAQpC;IACA;IACA;IACA;;IACAjB,UAAU,CAACkB,SAAX,CAAqBZ,MAArB,EAA6B;MAC3Ba,KAAK,EAAE,CAACC,CAAD,EAAIC,IAAJ,KAAa;QAClB;QACA,OAAOA,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBF,CAAC,CAACG,IAAF,KAAWV,KAAK,CAACW,YAA3C;MACD;IAJ0B,CAA7B,EAZoC,CAmBpC;IACA;;IACAxB,UAAU,CAACyB,QAAX,CAAoBnB,MAApB,EAA4B;MAAEiB,IAAI,EAAEV,KAAK,CAACa;IAAd,CAA5B;IAEAtB,wBAAwB,CAACE,MAAD,CAAxB,CAAiCqB,IAAjC,CAAuCpB,MAAD,IAAY;MAChDF,oBAAoB,CAACC,MAAD,EAASC,MAAT,CAApB;IACD,CAFD;IAIA,OAAO,IAAP;EACD;AACF"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}