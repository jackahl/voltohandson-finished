{"ast":null,"code":"import _without from \"lodash/without\";\nimport _slice from \"lodash/slice\";\nimport _omit from \"lodash/omit\";\nimport _map from \"lodash/map\";\nimport _isString from \"lodash/isString\";\nimport _findIndex from \"lodash/findIndex\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\nimport { Field, ModalForm, SchemaWidgetFieldset } from '@plone/volto/components';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add\",\n    \"defaultMessage\": \"Add\"\n  },\n  addField: {\n    \"id\": \"Add field\",\n    \"defaultMessage\": \"Add field\"\n  },\n  addFieldset: {\n    \"id\": \"Add fieldset\",\n    \"defaultMessage\": \"Add fieldset\"\n  },\n  parentFieldSet: {\n    \"id\": \"Parent fieldset\",\n    \"defaultMessage\": \"Parent fieldset\"\n  },\n  editField: {\n    \"id\": \"Edit field\",\n    \"defaultMessage\": \"Edit field\"\n  },\n  editFieldset: {\n    \"id\": \"Edit fieldset\",\n    \"defaultMessage\": \"Edit fieldset\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  choices: {\n    \"id\": \"Possible values\",\n    \"defaultMessage\": \"Possible values (Enter allowed choices one per line).\"\n  },\n  string: {\n    \"id\": \"String\",\n    \"defaultMessage\": \"String\"\n  },\n  text: {\n    \"id\": \"Text\",\n    \"defaultMessage\": \"Text\"\n  },\n  richtext: {\n    \"id\": \"Richtext\",\n    \"defaultMessage\": \"Richtext\"\n  },\n  checkbox: {\n    \"id\": \"Checkbox\",\n    \"defaultMessage\": \"Checkbox\"\n  },\n  selection: {\n    \"id\": \"Selection\",\n    \"defaultMessage\": \"Selection\"\n  },\n  type: {\n    \"id\": \"Type\",\n    \"defaultMessage\": \"Type\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  minLength: {\n    \"id\": \"minLength\",\n    \"defaultMessage\": \"Minimum Length\"\n  },\n  maxLength: {\n    \"id\": \"maxLength\",\n    \"defaultMessage\": \"Maximum Length\"\n  },\n  minimum: {\n    \"id\": \"minimum\",\n    \"defaultMessage\": \"Start of the range\"\n  },\n  maximum: {\n    \"id\": \"maximum\",\n    \"defaultMessage\": \"End of the range (including the value itself)\"\n  },\n  deleteFieldset: {\n    \"id\": \"Are you sure you want to delete this fieldset including all fields?\",\n    \"defaultMessage\": \"Are you sure you want to delete this fieldset including all fields?\"\n  },\n  deleteField: {\n    \"id\": \"Are you sure you want to delete this field?\",\n    \"defaultMessage\": \"Are you sure you want to delete this field?\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  }\n});\n/**\n * Makes a list of fieldset types formatted for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\n\nconst makeFieldsetList = (listOfFieldsets, intl) => {\n  const result = listOfFieldsets.map(type => [type.id, type.title]);\n  return result;\n};\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\n\n\nconst schemaField = (factory, intl, fieldsets) => ({\n  fieldsets: [{\n    id: 'default',\n    title: 'default',\n    fields: [...['title', 'description', 'parentFieldSet'], ...(factory => {\n      switch (factory) {\n        case 'Rich Text':\n          return ['maxLength'];\n\n        case 'URL':\n        case 'Password':\n        case 'label_password_field':\n        case 'Email':\n        case 'label_email':\n          return ['minLength', 'maxLength'];\n\n        case 'Integer':\n        case 'label_integer_field':\n          return ['minimum', 'maximum'];\n\n        case 'Floating-point number':\n        case 'label_float_field':\n        case 'Date/Time':\n        case 'label_datetime_field':\n        case 'Date':\n        case 'label_date_field':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'label_boolean_field':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return [];\n\n        case 'Multiple Choice':\n        case 'label_multi_choice_field':\n        case 'Choice':\n        case 'label_choice_field':\n          return ['values'];\n\n        default:\n          return ['minLength', 'maxLength'];\n      }\n    })(factory), ...['required']]\n  }],\n  properties: _objectSpread({\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title)\n    },\n    description: {\n      type: 'string',\n      widget: 'textarea',\n      title: intl.formatMessage(messages.description)\n    },\n    parentFieldSet: {\n      type: 'string',\n      title: intl.formatMessage(messages.parentFieldSet),\n      choices: makeFieldsetList(fieldsets)\n    },\n    required: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.required)\n    }\n  }, (factory => {\n    switch (factory) {\n      case 'Rich Text':\n        return {\n          maxLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maxLength)\n          }\n        };\n\n      case 'URL':\n      case 'Password':\n      case 'label_password_field':\n      case 'Email':\n      case 'label_email':\n        return {\n          minLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.minLength)\n          },\n          maxLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maxLength)\n          }\n        };\n\n      case 'Integer':\n      case 'label_integer_field':\n        return {\n          minimum: {\n            type: 'integer',\n            title: intl.formatMessage(messages.minimum)\n          },\n          maximum: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maximum)\n          }\n        };\n\n      case 'Floating-point number':\n      case 'label_float_field':\n      case 'Date/Time':\n      case 'label_datetime_field':\n      case 'Date':\n      case 'label_date_field':\n      case 'File':\n      case 'File Upload':\n      case 'Image':\n      case 'Yes/No':\n      case 'label_boolean_field':\n      case 'JSONField':\n      case 'Relation Choice':\n      case 'Relation List':\n        return {};\n\n      case 'Multiple Choice':\n      case 'label_multi_choice_field':\n      case 'Choice':\n      case 'label_choice_field':\n        return {\n          values: {\n            type: 'string',\n            title: intl.formatMessage(messages.choices),\n            widget: 'textarea'\n          }\n        };\n\n      default:\n        return {\n          minLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.minLength)\n          },\n          maxLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maxLength)\n          }\n        };\n    }\n  })(factory)),\n  required: ['type', 'title']\n});\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\n\n\nconst fieldsetSchema = intl => ({\n  fieldsets: [{\n    id: 'default',\n    title: intl.formatMessage(messages.default),\n    fields: ['title', 'id']\n  }],\n  properties: {\n    id: {\n      type: 'string',\n      title: intl.formatMessage(messages.idTitle),\n      description: intl.formatMessage(messages.idDescription)\n    },\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title)\n    }\n  },\n  required: ['id', 'title']\n});\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\n\n\nconst isEditable = field => !field.behavior || field.behavior.includes('generated');\n\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  // change background colour if dragging\n  background: isDragging ? 'white' : 'transparent'\n}, draggableStyle);\n\nconst getTabStyle = isDraggingOver => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap'\n});\n\nconst getFieldStyle = isDraggingOver => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent'\n});\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\n\n\nconst formatTextareaToArray = textarea => {\n  const values = textarea && textarea ? textarea.split(/(\\r\\n|\\n|\\r)/gm).map(elem => elem.trim()).filter(elem => elem !== '') : null;\n  return values ? {\n    values\n  } : {};\n};\n\nconst formatArrayToTextarea = props => {\n  var _props$items;\n\n  if (props !== null && props !== void 0 && props.values) {\n    return props.values.join('\\n');\n  }\n\n  if (props !== null && props !== void 0 && props.choices) {\n    return props.choices.map(elem => elem[0]).join('\\n');\n  }\n\n  if (props !== null && props !== void 0 && (_props$items = props.items) !== null && _props$items !== void 0 && _props$items.choices) {\n    return props.items.choices.map(elem => elem[0]).join('\\n');\n  }\n\n  return '';\n};\n\nconst formatTextareaToChoices = (textarea, multiple) => {\n  const choices = textarea && textarea ? textarea.split(/(\\r\\n|\\n|\\r)/gm).map(elem => elem.trim()).filter(elem => elem !== '').map(elem => [elem, elem]) : null;\n\n  if (!multiple) {\n    return choices ? {\n      choices\n    } : {};\n  }\n\n  const items = choices ? {\n    choices: choices\n  } : {};\n  return items ? {\n    items\n  } : {};\n};\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\n\n\nclass SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeDefaultValue = this.onChangeDefaultValue.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0\n    };\n  }\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n\n\n  onAddField(values) {\n    const fieldId = slugify(values.title);\n    const currentFieldsetFields = this.props.value.fieldsets[this.state.currentFieldset].fields;\n    const hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n    const newFieldsetFields = hasChangeNote ? [...currentFieldsetFields.slice(0, currentFieldsetFields.length - 1), fieldId, currentFieldsetFields[currentFieldsetFields.length - 1]] : [...currentFieldsetFields, fieldId];\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.currentFieldset), _objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n        fields: newFieldsetFields\n      }), ..._slice(this.props.value.fieldsets, this.state.currentFieldset + 1)],\n      properties: _objectSpread(_objectSpread({}, this.props.value.properties), {}, {\n        [fieldId]: _objectSpread({\n          title: values.title,\n          description: values.description,\n          id: fieldId\n        }, (factory => {\n          switch (factory) {\n            case 'Date/Time':\n            case 'label_datetime_field':\n              return {\n                type: 'string',\n                widget: 'datetime',\n                factory\n              };\n\n            case 'Date':\n            case 'label_date_field':\n              return {\n                type: 'string',\n                widget: 'date',\n                factory\n              };\n\n            case 'Email':\n            case 'label_email':\n              return {\n                type: 'string',\n                widget: 'email',\n                factory\n              };\n\n            case 'File':\n            case 'File Upload':\n              return {\n                type: 'object',\n                factory\n              };\n\n            case 'Floating-point number':\n            case 'label_float_field':\n              return {\n                type: 'number',\n                factory\n              };\n\n            case 'Integer':\n            case 'label_integer_field':\n              return {\n                type: 'integer',\n                factory\n              };\n\n            case 'Image':\n              return {\n                type: 'object',\n                factory\n              };\n\n            case 'JSONField':\n              return {\n                type: 'dict',\n                widget: 'json',\n                factory\n              };\n\n            case 'Multiple Choice':\n            case 'label_multi_choice_field':\n              return {\n                type: 'array',\n                factory\n              };\n\n            case 'Relation List':\n              return {\n                type: 'array',\n                factory\n              };\n\n            case 'Choice':\n            case 'label_choice_field':\n              return {\n                type: 'string',\n                choices: [],\n                factory\n              };\n\n            case 'Relation Choice':\n              return {\n                type: 'string',\n                factory\n              };\n\n            case 'Password':\n            case 'label_password_field':\n              return {\n                type: 'string',\n                widget: 'password',\n                factory\n              };\n\n            case 'Rich Text':\n              return {\n                type: 'string',\n                widget: 'richtext',\n                factory\n              };\n\n            case 'URL':\n              return {\n                type: 'string',\n                widget: 'url',\n                factory\n              };\n\n            case 'Yes/No':\n            case 'label_boolean_field':\n              return {\n                type: 'boolean',\n                factory\n              };\n\n            default:\n              return {\n                type: 'string',\n                factory\n              };\n          }\n        })(values.factory))\n      }),\n      required: values.required ? [...this.props.value.required, fieldId] : this.props.value.required\n    }));\n    this.onCancel();\n  }\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n\n\n  onAddFieldset(values) {\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [...this.props.value.fieldsets, _objectSpread(_objectSpread({}, values), {}, {\n        fields: []\n      })]\n    }));\n    this.onCancel();\n  }\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n\n\n  onEditFieldset(values) {\n    var _this$props$value$fie;\n\n    values.fields = values.fields || ((_this$props$value$fie = this.props.value.fieldsets[this.state.editFieldset]) === null || _this$props$value$fie === void 0 ? void 0 : _this$props$value$fie.fields) || [];\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.editFieldset), values, ..._slice(this.props.value.fieldsets, this.state.editFieldset + 1)]\n    }));\n    this.onCancel();\n  }\n  /**\n   * Recreates the fieldset structure\n   * will move change name of the field if needed and\n   * change fieldset if changed\n   * @param {Object[]} fieldsets\n   * @param {string} parentFieldSet - id\n   * @param {number} currentFieldset - index\n   * @param {Object} oldfieldId\n   * @param {Object} newfieldId\n   * @returns {Object[]} fieldsets\n   */\n\n\n  editFieldset(fieldsets, parentFieldSet, currentFieldset, oldfieldId, newfieldId) {\n    const moveToFieldsetWithNewName = () => {\n      const newParentFieldsetIndex = fieldsets.findIndex(field => field.id === parentFieldSet);\n      const indexOfChangeNote = fieldsets[newParentFieldsetIndex].fields.indexOf('changeNote'); // remove from current fieldset\n\n      const fieldsetsWithoutField = [..._slice(fieldsets, 0, currentFieldset), _objectSpread(_objectSpread({}, fieldsets[currentFieldset]), {}, {\n        fields: fieldsets[currentFieldset].fields.filter(fieldId => fieldId !== oldfieldId)\n      }), ..._slice(fieldsets, currentFieldset + 1)];\n      const fieldsOfNewFieldset = indexOfChangeNote > -1 ? [...fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(0, indexOfChangeNote + 1), oldfieldId, fieldsetsWithoutField[newParentFieldsetIndex].fields[indexOfChangeNote]] : [...fieldsetsWithoutField[newParentFieldsetIndex].fields, oldfieldId]; // add to new fieldset\n\n      const fieldsetsWithField = [..._slice(fieldsetsWithoutField, 0, newParentFieldsetIndex), _objectSpread(_objectSpread({}, fieldsetsWithoutField[newParentFieldsetIndex]), {}, {\n        fields: fieldsOfNewFieldset\n      }), ..._slice(fieldsetsWithoutField, newParentFieldsetIndex + 1)];\n      return fieldsetsWithField;\n    };\n\n    const changeNameInFieldset = () => {\n      return [..._slice(fieldsets, 0, currentFieldset), _objectSpread(_objectSpread({}, fieldsets[currentFieldset]), {}, {\n        fields: _map(fieldsets[currentFieldset].fields, field => field === oldfieldId ? newfieldId : field)\n      }), ..._slice(fieldsets, currentFieldset + 1)];\n    };\n\n    const result = parentFieldSet !== fieldsets[currentFieldset].id ? moveToFieldsetWithNewName() : changeNameInFieldset();\n    return result;\n  }\n  /**\n   * Edit field handler\n   * recreates the schema based on field changes (properties, name, fieldset)\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n\n\n  onEditField(values) {\n    var _this$props$value$pro, _this$props$value$pro2;\n\n    let formattedValues = _objectSpread({}, values);\n\n    const listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n    listOfProp.forEach(prop => {\n      formattedValues = _objectSpread(_objectSpread({}, formattedValues), {\n        [prop]: values[prop] ? parseFloat(values[prop]) : null\n      });\n    });\n    const multiple = ((_this$props$value$pro = this.props.value.properties[this.state.editField.id]) === null || _this$props$value$pro === void 0 ? void 0 : _this$props$value$pro.factory) === 'Multiple Choice' || ((_this$props$value$pro2 = this.props.value.properties[this.state.editField.id]) === null || _this$props$value$pro2 === void 0 ? void 0 : _this$props$value$pro2.factory) === 'label_multi_choice_field';\n\n    const result = _objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: formattedValues.parentFieldSet ? this.editFieldset(this.props.value.fieldsets, formattedValues.parentFieldSet, this.state.currentFieldset, this.state.editField.id, formattedValues.id) : this.props.value.fieldsets,\n      properties: _objectSpread(_objectSpread({}, _omit(this.props.value.properties, [this.state.editField.id])), {}, {\n        [formattedValues.id]: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.props.value.properties[this.state.editField.id]), _omit(formattedValues, ['id', 'parentFieldSet'])), formatTextareaToArray(formattedValues.values)), formatTextareaToChoices(formattedValues.values, multiple))\n      }),\n      required: formattedValues.required ? _concat(_without(this.props.value.required, this.state.editField.id), [formattedValues.id]) : _without(this.props.value.required, this.state.editField.id)\n    });\n\n    this.onChange(result);\n    this.onCancel();\n  }\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n\n\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1\n      });\n    }\n\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.deleteFieldset), ..._slice(this.props.value.fieldsets, this.state.deleteFieldset + 1)],\n      properties: _omit(this.props.value.properties, this.props.value.fieldsets[this.state.deleteFieldset].fields)\n    }));\n    this.onCancel();\n  }\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n\n\n  onDeleteField() {\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.currentFieldset), _objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n        fields: _without(this.props.value.fieldsets[this.state.currentFieldset].fields, this.state.deleteField)\n      }), ..._slice(this.props.value.fieldsets, this.state.currentFieldset + 1)],\n      properties: _omit(this.props.value.properties, [this.state.deleteField])\n    }));\n    this.onCancel();\n  }\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n\n\n  onChange(value) {\n    this.props.onChange(this.props.id, value);\n  }\n  /**\n   * Change default value handler\n   * @method onChangeDefaultValue\n   * @param {string} fieldId\n   * @param {string} fieldValue\n   */\n\n\n  onChangeDefaultValue(fieldId, fieldValue) {\n    // Default values can have irreversible consequence, thus skip it for now.\n    // const value = { default: fieldValue }\n    const value = {};\n\n    const fieldMerge = _objectSpread(_objectSpread({}, this.props.value.properties[fieldId]), value);\n\n    const propsMerge = _objectSpread(_objectSpread({}, this.props.value.properties), {\n      [fieldId]: fieldMerge\n    });\n\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      properties: propsMerge\n    }));\n  }\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null\n    });\n  }\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n\n\n  onShowAddField(event) {\n    this.setState({\n      addField: true\n    });\n    event.preventDefault();\n  }\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n\n\n  onShowAddFieldset(event) {\n    this.setState({\n      addFieldset: true\n    });\n    event.preventDefault();\n  }\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n\n\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index\n    });\n  }\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n\n\n  onShowEditField(id, schema) {\n    return this.setState({\n      editField: {\n        id\n      }\n    });\n  }\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n\n\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index\n    });\n  }\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n\n\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field\n    });\n  }\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n\n\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index\n    });\n  }\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n\n\n  onOrderField(index, delta) {\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.currentFieldset), _objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n        fields: move(this.props.value.fieldsets[this.state.currentFieldset].fields, index, delta)\n      }), ..._slice(this.props.value.fieldsets, this.state.currentFieldset + 1)]\n    }));\n  }\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n\n\n  onOrderFieldset(index, delta) {\n    const schema = _objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: move(this.props.value.fieldsets, index, delta)\n    });\n\n    this.setState({\n      currentFieldset: _findIndex(schema.fieldsets, {\n        id: schema.fieldsets[this.state.currentFieldset].id\n      })\n    });\n    this.onChange(schema);\n  }\n  /**\n   * Set current fieldset handler\n   * @method onDragEnd\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n\n\n  onDragEnd(result) {\n    if (result.destination && result.destination.droppableId === 'fields-schema-edit') {\n      this.onOrderField(result.source.index, result.destination.index);\n    }\n\n    if (result.destination && result.destination.droppableId === 'tabs-schema-edit') {\n      this.onOrderFieldset(result.source.index, result.destination.index);\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    const {\n      error,\n      reactBeautifulDnd\n    } = this.props;\n    const {\n      Draggable,\n      DragDropContext,\n      Droppable\n    } = reactBeautifulDnd;\n\n    if (!this.props.value) {\n      return '';\n    }\n\n    const nonUserCreatedFields = this.props.value.fieldsets[this.state.currentFieldset].fields.filter(fieldId => !isEditable(this.props.value.properties[fieldId]) && fieldId !== 'changeNote');\n    const hasChangeNote = this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf('changeNote') > -1;\n    const userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n    const lastUserCreatedFieldsIndex = hasChangeNote ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1 : this.props.value.fieldsets[this.state.currentFieldset].fields.length; // fields that were not created by the user, but are part of a behavior\n\n    const makeNonUserFields = () => _map(this.props.value.fieldsets[this.state.currentFieldset].fields.slice(0, userCreatedFieldsStartingIndex), (field, index) => __jsx(\"div\", {\n      style: {\n        background: '#c7d5d859'\n      },\n      key: `${field}-${this.state.currentFieldset}-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 11\n      }\n    }, __jsx(Field, _extends({}, this.props.value.properties[field], {\n      id: field,\n      required: this.props.value.required.indexOf(field) !== -1,\n      onEdit: this.onShowEditField,\n      draggable: false,\n      isDisabled: true,\n      order: index,\n      onDelete: this.onShowDeleteField,\n      onChange: this.onChangeDefaultValue,\n      value: this.props.value.properties[field].default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 13\n      }\n    })))); // fields created by the user\n\n\n    const makeUserFields = () => _map(this.props.value.fieldsets[this.state.currentFieldset].fields.slice(userCreatedFieldsStartingIndex, lastUserCreatedFieldsIndex), (field, index) => __jsx(Draggable, {\n      draggableId: field,\n      index: userCreatedFieldsStartingIndex + index,\n      key: `${field}-${this.state.currentFieldset}-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 11\n      }\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 15\n      }\n    }), __jsx(Field, _extends({}, this.props.value.properties[field], {\n      id: field,\n      required: this.props.value.required.indexOf(field) !== -1,\n      onEdit: this.onShowEditField,\n      draggable: true,\n      isDisabled: false,\n      order: index,\n      onDelete: this.onShowDeleteField,\n      onChange: this.onChangeDefaultValue,\n      key: `${field}-${this.state.currentFieldset}-${index}`,\n      value: this.props.value.properties[field].default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 17\n      }\n    })))));\n\n    const canAddFields = this.state.currentFieldset === 0 || !this.props.value.fieldsets[this.state.currentFieldset].behavior || this.props.value.fieldsets[this.state.currentFieldset].behavior.includes('generated');\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 7\n      }\n    }, __jsx(Segment.Group, {\n      style: {\n        margin: '-1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 9\n      }\n    }, error.length > 0 && _map(error, (err, index) => __jsx(Message, {\n      icon: \"warning\",\n      key: `${err}-${index}`,\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: err,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187,\n        columnNumber: 15\n      }\n    })), __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 11\n      }\n    }, __jsx(Droppable, {\n      droppableId: \"tabs-schema-edit\",\n      direction: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 13\n      }\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      role: \"tablist\",\n      className: \"ui pointing secondary attached tabular menu\",\n      ref: provided.innerRef\n    }, provided.draggableProps, {\n      style: getTabStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199,\n        columnNumber: 17\n      }\n    }), _map(this.props.value.fieldsets, (fieldset, index) => __jsx(SchemaWidgetFieldset, {\n      key: `${fieldset.id}-${this.state.currentFieldset}-${index}`,\n      title: fieldset.title,\n      order: index,\n      active: index === this.state.currentFieldset,\n      onClick: this.onSetCurrentFieldset,\n      onShowEditFieldset: this.onShowEditFieldset,\n      onShowDeleteFieldset: this.onShowDeleteFieldset,\n      onOrderFieldset: this.onOrderFieldset,\n      getItemStyle: getItemStyle,\n      isDraggable: true,\n      isDisabled: fieldset.behavior ? !fieldset.behavior.includes('generated') : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"item item-add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 19\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": this.props.intl.formatMessage(messages.add),\n      className: \"item ui noborder button\",\n      onClick: this.onShowAddFieldset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: \"plus\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231,\n        columnNumber: 23\n      }\n    }))), provided.placeholder)), makeNonUserFields(), __jsx(Droppable, {\n      droppableId: \"fields-schema-edit\",\n      direction: \"vertical\",\n      type: \"fixed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242,\n        columnNumber: 13\n      }\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, {\n      style: getFieldStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248,\n        columnNumber: 17\n      }\n    }), makeUserFields(), provided.placeholder))), hasChangeNote ? __jsx(\"div\", {\n      style: {\n        background: '#c7d5d859'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262,\n        columnNumber: 13\n      }\n    }, __jsx(Field, _extends({}, this.props.value.properties.changeNote, {\n      id: 'changeNote',\n      required: this.props.value.required.indexOf('changeNote') !== -1,\n      onEdit: this.onShowEditField,\n      draggable: false,\n      isDisabled: true,\n      order: this.props.value.fieldsets[this.state.currentFieldset].length - 1,\n      onDelete: this.onShowDeleteField,\n      onChange: this.onChangeDefaultValue,\n      key: 'changeNote',\n      value: this.props.value.properties.changeNote.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1263,\n        columnNumber: 15\n      }\n    }))) : null, canAddFields && __jsx(Form.Field, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286,\n        columnNumber: 15\n      }\n    }, __jsx(Grid.Row, {\n      stretched: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287,\n        columnNumber: 17\n      }\n    }, __jsx(Grid.Column, {\n      width: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"addfield\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 23\n      }\n    }, this.props.intl.formatMessage(messages.addField))), __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 21\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": this.props.intl.formatMessage(messages.add),\n      id: \"addfield\",\n      className: \"item ui noborder button\",\n      onClick: this.onShowAddField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: \"plus\",\n      color: \"blue\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 25\n      }\n    })))))))), this.state.addField !== null && __jsx(ModalForm, {\n      onSubmit: this.onAddField,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.addField),\n      formData: {\n        type: '',\n        id: '',\n        title: ''\n      },\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['factory', 'title', 'description', 'required']\n        }],\n        properties: {\n          factory: {\n            type: 'string',\n            factory: 'Choice',\n            title: this.props.intl.formatMessage(messages.type),\n            vocabulary: {\n              '@id': `Fields`\n            }\n          },\n          title: {\n            type: 'string',\n            title: this.props.intl.formatMessage(messages.title)\n          },\n          description: {\n            type: 'string',\n            widget: 'textarea',\n            title: this.props.intl.formatMessage(messages.description)\n          },\n          required: {\n            type: 'boolean',\n            title: this.props.intl.formatMessage(messages.required)\n          }\n        },\n        required: ['type', 'title']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311,\n        columnNumber: 11\n      }\n    }), this.state.editField !== null && __jsx(ModalForm, {\n      onSubmit: this.onEditField,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.editField),\n      formData: _objectSpread(_objectSpread({}, this.props.value.properties[this.state.editField.id]), {}, {\n        id: this.state.editField.id,\n        required: this.props.value.required.indexOf(this.state.editField.id) !== -1,\n        parentFieldSet: this.props.value.fieldsets[this.state.currentFieldset].id,\n        values: formatArrayToTextarea(this.props.value.properties[this.state.editField.id])\n      }),\n      schema: schemaField(this.props.value.properties[this.state.editField.id].factory, this.props.intl, this.props.value.fieldsets.filter(fieldset => !fieldset.behavior || fieldset.id === 'default' || fieldset.behavior.includes('generated'))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 11\n      }\n    }), this.state.addFieldset !== null && __jsx(ModalForm, {\n      onSubmit: this.onAddFieldset,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.addFieldset),\n      formData: {\n        id: '',\n        title: ''\n      },\n      schema: fieldsetSchema(this.props.intl),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 11\n      }\n    }), this.state.editFieldset !== null && __jsx(ModalForm, {\n      onSubmit: this.onEditFieldset,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.editFieldset),\n      formData: {\n        id: this.props.value.fieldsets[this.state.editFieldset].id,\n        title: this.props.value.fieldsets[this.state.editFieldset].title\n      },\n      schema: fieldsetSchema(this.props.intl),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398,\n        columnNumber: 11\n      }\n    }), this.state.deleteFieldset !== null && __jsx(Confirm, {\n      open: true,\n      content: this.props.intl.formatMessage(messages.deleteFieldset),\n      onCancel: this.onCancel,\n      onConfirm: this.onDeleteFieldset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 11\n      }\n    }), this.state.deleteField !== null && __jsx(Confirm, {\n      open: true,\n      content: this.props.intl.formatMessage(messages.deleteField),\n      onCancel: this.onCancel,\n      onConfirm: this.onDeleteField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\n_defineProperty(SchemaWidget, \"propTypes\", {\n  /**\n   * Id of the field\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Title of the field\n   */\n  required: PropTypes.bool,\n\n  /**\n   * Value of the field\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n  /**\n   * List of error messages\n   */\n  error: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * On change handler\n   */\n  onChange: PropTypes.func.isRequired\n  /**\n   * Intl object\n   */\n\n});\n\n_defineProperty(SchemaWidget, \"defaultProps\", {\n  required: false,\n  value: {},\n  error: []\n});\n\nexport default compose(injectIntl, injectLazyLibs(['reactBeautifulDnd']), connect((state, props) => ({\n  value: _isString(props.value) ? JSON.parse(props.value) : props.value\n}), {}))(SchemaWidget);","map":{"version":3,"names":["React","Component","connect","compose","PropTypes","move","Confirm","Form","Grid","Icon","Message","Segment","defineMessages","injectIntl","injectLazyLibs","slugify","Field","ModalForm","SchemaWidgetFieldset","messages","add","addField","addFieldset","parentFieldSet","editField","editFieldset","default","idTitle","idDescription","choices","string","text","richtext","checkbox","selection","type","title","description","required","minLength","maxLength","minimum","maximum","deleteFieldset","deleteField","error","makeFieldsetList","listOfFieldsets","intl","result","map","id","schemaField","factory","fieldsets","fields","properties","formatMessage","widget","values","fieldsetSchema","isEditable","field","behavior","includes","getItemStyle","isDragging","draggableStyle","userSelect","background","getTabStyle","isDraggingOver","display","flexDirection","flexWrap","getFieldStyle","formatTextareaToArray","textarea","split","elem","trim","filter","formatArrayToTextarea","props","join","items","formatTextareaToChoices","multiple","SchemaWidget","constructor","onChange","bind","onChangeDefaultValue","onAddField","onAddFieldset","onEditField","onEditFieldset","onDeleteFieldset","onDeleteField","onShowAddField","onShowAddFieldset","onShowEditFieldset","onShowEditField","onShowDeleteFieldset","onShowDeleteField","onSetCurrentFieldset","onOrderField","onOrderFieldset","onCancel","onDragEnd","state","currentFieldset","fieldId","currentFieldsetFields","value","hasChangeNote","indexOf","newFieldsetFields","slice","length","oldfieldId","newfieldId","moveToFieldsetWithNewName","newParentFieldsetIndex","findIndex","indexOfChangeNote","fieldsetsWithoutField","fieldsOfNewFieldset","fieldsetsWithField","changeNameInFieldset","formattedValues","listOfProp","forEach","prop","parseFloat","setState","fieldValue","fieldMerge","propsMerge","event","preventDefault","index","schema","delta","destination","droppableId","source","render","reactBeautifulDnd","Draggable","DragDropContext","Droppable","nonUserCreatedFields","userCreatedFieldsStartingIndex","lastUserCreatedFieldsIndex","makeNonUserFields","makeUserFields","provided","snapshot","innerRef","draggableProps","dragHandleProps","style","canAddFields","margin","err","fieldset","placeholder","changeNote","vocabulary","isRequired","bool","oneOfType","object","arrayOf","func","JSON","parse"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx"],"sourcesContent":["/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport { concat, findIndex, isString, map, omit, slice, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\n\nimport {\n  Field,\n  ModalForm,\n  SchemaWidgetFieldset,\n} from '@plone/volto/components';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  addField: {\n    id: 'Add field',\n    defaultMessage: 'Add field',\n  },\n  addFieldset: {\n    id: 'Add fieldset',\n    defaultMessage: 'Add fieldset',\n  },\n  parentFieldSet: {\n    id: 'Parent fieldset',\n    defaultMessage: 'Parent fieldset',\n  },\n  editField: {\n    id: 'Edit field',\n    defaultMessage: 'Edit field',\n  },\n  editFieldset: {\n    id: 'Edit fieldset',\n    defaultMessage: 'Edit fieldset',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  choices: {\n    id: 'Possible values',\n    defaultMessage: 'Possible values (Enter allowed choices one per line).',\n  },\n  string: {\n    id: 'String',\n    defaultMessage: 'String',\n  },\n  text: {\n    id: 'Text',\n    defaultMessage: 'Text',\n  },\n  richtext: {\n    id: 'Richtext',\n    defaultMessage: 'Richtext',\n  },\n  checkbox: {\n    id: 'Checkbox',\n    defaultMessage: 'Checkbox',\n  },\n  selection: {\n    id: 'Selection',\n    defaultMessage: 'Selection',\n  },\n  type: {\n    id: 'Type',\n    defaultMessage: 'Type',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  minLength: {\n    id: 'minLength',\n    defaultMessage: 'Minimum Length',\n  },\n  maxLength: {\n    id: 'maxLength',\n    defaultMessage: 'Maximum Length',\n  },\n  minimum: {\n    id: 'minimum',\n    defaultMessage: 'Start of the range',\n  },\n  maximum: {\n    id: 'maximum',\n    defaultMessage: 'End of the range (including the value itself)',\n  },\n  deleteFieldset: {\n    id: 'Are you sure you want to delete this fieldset including all fields?',\n    defaultMessage:\n      'Are you sure you want to delete this fieldset including all fields?',\n  },\n  deleteField: {\n    id: 'Are you sure you want to delete this field?',\n    defaultMessage: 'Are you sure you want to delete this field?',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Makes a list of fieldset types formatted for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\nconst makeFieldsetList = (listOfFieldsets, intl) => {\n  const result = listOfFieldsets.map((type) => [type.id, type.title]);\n  return result;\n};\n\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\nconst schemaField = (factory, intl, fieldsets) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'default',\n      fields: [\n        ...['title', 'description', 'parentFieldSet'],\n        ...((factory) => {\n          switch (factory) {\n            case 'Rich Text':\n              return ['maxLength'];\n            case 'URL':\n            case 'Password':\n            case 'label_password_field':\n            case 'Email':\n            case 'label_email':\n              return ['minLength', 'maxLength'];\n            case 'Integer':\n            case 'label_integer_field':\n              return ['minimum', 'maximum'];\n            case 'Floating-point number':\n            case 'label_float_field':\n            case 'Date/Time':\n            case 'label_datetime_field':\n            case 'Date':\n            case 'label_date_field':\n            case 'File':\n            case 'File Upload':\n            case 'Image':\n            case 'Yes/No':\n            case 'label_boolean_field':\n            case 'JSONField':\n            case 'Relation Choice':\n            case 'Relation List':\n              return [];\n            case 'Multiple Choice':\n            case 'label_multi_choice_field':\n            case 'Choice':\n            case 'label_choice_field':\n              return ['values'];\n            default:\n              return ['minLength', 'maxLength'];\n          }\n        })(factory),\n        ...['required'],\n      ],\n    },\n  ],\n  properties: {\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n    description: {\n      type: 'string',\n      widget: 'textarea',\n      title: intl.formatMessage(messages.description),\n    },\n    parentFieldSet: {\n      type: 'string',\n      title: intl.formatMessage(messages.parentFieldSet),\n      choices: makeFieldsetList(fieldsets),\n    },\n    required: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.required),\n    },\n    ...((factory) => {\n      switch (factory) {\n        case 'Rich Text':\n          return {\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'URL':\n        case 'Password':\n        case 'label_password_field':\n        case 'Email':\n        case 'label_email':\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'Integer':\n        case 'label_integer_field':\n          return {\n            minimum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minimum),\n            },\n            maximum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maximum),\n            },\n          };\n        case 'Floating-point number':\n        case 'label_float_field':\n        case 'Date/Time':\n        case 'label_datetime_field':\n        case 'Date':\n        case 'label_date_field':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'label_boolean_field':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return {};\n        case 'Multiple Choice':\n        case 'label_multi_choice_field':\n        case 'Choice':\n        case 'label_choice_field':\n          return {\n            values: {\n              type: 'string',\n              title: intl.formatMessage(messages.choices),\n              widget: 'textarea',\n            },\n          };\n        default:\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n      }\n    })(factory),\n  },\n  required: ['type', 'title'],\n});\n\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\nconst fieldsetSchema = (intl) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: intl.formatMessage(messages.default),\n      fields: ['title', 'id'],\n    },\n  ],\n  properties: {\n    id: {\n      type: 'string',\n      title: intl.formatMessage(messages.idTitle),\n      description: intl.formatMessage(messages.idDescription),\n    },\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n  },\n  required: ['id', 'title'],\n});\n\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\nconst isEditable = (field) =>\n  !field.behavior || field.behavior.includes('generated');\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n\n  // change background colour if dragging\n  background: isDragging ? 'white' : 'transparent',\n\n  // styles we need to apply on draggable\n  ...draggableStyle,\n});\n\nconst getTabStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n});\n\nconst getFieldStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n});\n\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\nconst formatTextareaToArray = (textarea) => {\n  const values =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n      : null;\n\n  return values ? { values } : {};\n};\n\nconst formatArrayToTextarea = (props) => {\n  if (props?.values) {\n    return props.values.join('\\n');\n  }\n  if (props?.choices) {\n    return props.choices.map((elem) => elem[0]).join('\\n');\n  }\n  if (props?.items?.choices) {\n    return props.items.choices.map((elem) => elem[0]).join('\\n');\n  }\n  return '';\n};\n\nconst formatTextareaToChoices = (textarea, multiple) => {\n  const choices =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n          .map((elem) => [elem, elem])\n      : null;\n\n  if (!multiple) {\n    return choices ? { choices } : {};\n  }\n\n  const items = choices ? { choices: choices } : {};\n  return items ? { items } : {};\n};\n\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nclass SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Intl object\n     */\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    required: false,\n    value: {},\n    error: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeDefaultValue = this.onChangeDefaultValue.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0,\n    };\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddField(values) {\n    const fieldId = slugify(values.title);\n    const currentFieldsetFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields;\n    const hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n    const newFieldsetFields = hasChangeNote\n      ? [\n          ...currentFieldsetFields.slice(0, currentFieldsetFields.length - 1),\n          fieldId,\n          currentFieldsetFields[currentFieldsetFields.length - 1],\n        ]\n      : [...currentFieldsetFields, fieldId];\n\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: newFieldsetFields,\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: {\n        ...this.props.value.properties,\n        [fieldId]: {\n          title: values.title,\n          description: values.description,\n          id: fieldId,\n          ...((factory) => {\n            switch (factory) {\n              case 'Date/Time':\n              case 'label_datetime_field':\n                return {\n                  type: 'string',\n                  widget: 'datetime',\n                  factory,\n                };\n              case 'Date':\n              case 'label_date_field':\n                return {\n                  type: 'string',\n                  widget: 'date',\n                  factory,\n                };\n              case 'Email':\n              case 'label_email':\n                return {\n                  type: 'string',\n                  widget: 'email',\n                  factory,\n                };\n              case 'File':\n              case 'File Upload':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'Floating-point number':\n              case 'label_float_field':\n                return {\n                  type: 'number',\n                  factory,\n                };\n              case 'Integer':\n              case 'label_integer_field':\n                return {\n                  type: 'integer',\n                  factory,\n                };\n              case 'Image':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'JSONField':\n                return {\n                  type: 'dict',\n                  widget: 'json',\n                  factory,\n                };\n              case 'Multiple Choice':\n              case 'label_multi_choice_field':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Relation List':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Choice':\n              case 'label_choice_field':\n                return {\n                  type: 'string',\n                  choices: [],\n                  factory,\n                };\n              case 'Relation Choice':\n                return {\n                  type: 'string',\n                  factory,\n                };\n              case 'Password':\n              case 'label_password_field':\n                return {\n                  type: 'string',\n                  widget: 'password',\n                  factory,\n                };\n              case 'Rich Text':\n                return {\n                  type: 'string',\n                  widget: 'richtext',\n                  factory,\n                };\n              case 'URL':\n                return {\n                  type: 'string',\n                  widget: 'url',\n                  factory,\n                };\n              case 'Yes/No':\n              case 'label_boolean_field':\n                return {\n                  type: 'boolean',\n                  factory,\n                };\n              default:\n                return {\n                  type: 'string',\n                  factory,\n                };\n            }\n          })(values.factory),\n        },\n      },\n      required: values.required\n        ? [...this.props.value.required, fieldId]\n        : this.props.value.required,\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddFieldset(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...this.props.value.fieldsets,\n        {\n          ...values,\n          fields: [],\n        },\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onEditFieldset(values) {\n    values.fields =\n      values.fields ||\n      this.props.value.fieldsets[this.state.editFieldset]?.fields ||\n      [];\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.editFieldset),\n        values,\n        ...slice(this.props.value.fieldsets, this.state.editFieldset + 1),\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Recreates the fieldset structure\n   * will move change name of the field if needed and\n   * change fieldset if changed\n   * @param {Object[]} fieldsets\n   * @param {string} parentFieldSet - id\n   * @param {number} currentFieldset - index\n   * @param {Object} oldfieldId\n   * @param {Object} newfieldId\n   * @returns {Object[]} fieldsets\n   */\n  editFieldset(\n    fieldsets,\n    parentFieldSet,\n    currentFieldset,\n    oldfieldId,\n    newfieldId,\n  ) {\n    const moveToFieldsetWithNewName = () => {\n      const newParentFieldsetIndex = fieldsets.findIndex(\n        (field) => field.id === parentFieldSet,\n      );\n      const indexOfChangeNote = fieldsets[\n        newParentFieldsetIndex\n      ].fields.indexOf('changeNote');\n      // remove from current fieldset\n      const fieldsetsWithoutField = [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: fieldsets[currentFieldset].fields.filter(\n            (fieldId) => fieldId !== oldfieldId,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n\n      const fieldsOfNewFieldset =\n        indexOfChangeNote > -1\n          ? [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(\n                0,\n                indexOfChangeNote + 1,\n              ),\n              oldfieldId,\n              fieldsetsWithoutField[newParentFieldsetIndex].fields[\n                indexOfChangeNote\n              ],\n            ]\n          : [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields,\n              oldfieldId,\n            ];\n\n      // add to new fieldset\n      const fieldsetsWithField = [\n        ...slice(fieldsetsWithoutField, 0, newParentFieldsetIndex),\n        {\n          ...fieldsetsWithoutField[newParentFieldsetIndex],\n          fields: fieldsOfNewFieldset,\n        },\n        ...slice(fieldsetsWithoutField, newParentFieldsetIndex + 1),\n      ];\n      return fieldsetsWithField;\n    };\n\n    const changeNameInFieldset = () => {\n      return [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: map(fieldsets[currentFieldset].fields, (field) =>\n            field === oldfieldId ? newfieldId : field,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n    };\n\n    const result =\n      parentFieldSet !== fieldsets[currentFieldset].id\n        ? moveToFieldsetWithNewName()\n        : changeNameInFieldset();\n    return result;\n  }\n\n  /**\n   * Edit field handler\n   * recreates the schema based on field changes (properties, name, fieldset)\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n  onEditField(values) {\n    let formattedValues = { ...values };\n\n    const listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n    listOfProp.forEach((prop) => {\n      formattedValues = {\n        ...formattedValues,\n        ...{ [prop]: values[prop] ? parseFloat(values[prop]) : null },\n      };\n    });\n\n    const multiple =\n      this.props.value.properties[this.state.editField.id]?.factory ===\n        'Multiple Choice' ||\n      this.props.value.properties[this.state.editField.id]?.factory ===\n        'label_multi_choice_field';\n    const result = {\n      ...this.props.value,\n      fieldsets: formattedValues.parentFieldSet\n        ? this.editFieldset(\n            this.props.value.fieldsets,\n            formattedValues.parentFieldSet,\n            this.state.currentFieldset,\n            this.state.editField.id,\n            formattedValues.id,\n          )\n        : this.props.value.fieldsets,\n      properties: {\n        ...omit(this.props.value.properties, [this.state.editField.id]),\n        [formattedValues.id]: {\n          ...this.props.value.properties[this.state.editField.id],\n          ...omit(formattedValues, ['id', 'parentFieldSet']),\n          ...formatTextareaToArray(formattedValues.values),\n          ...formatTextareaToChoices(formattedValues.values, multiple),\n        },\n      },\n      required: formattedValues.required\n        ? concat(without(this.props.value.required, this.state.editField.id), [\n            formattedValues.id,\n          ])\n        : without(this.props.value.required, this.state.editField.id),\n    };\n\n    this.onChange(result);\n\n    this.onCancel();\n  }\n\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1,\n      });\n    }\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.deleteFieldset),\n        ...slice(this.props.value.fieldsets, this.state.deleteFieldset + 1),\n      ],\n      properties: omit(\n        this.props.value.properties,\n        this.props.value.fieldsets[this.state.deleteFieldset].fields,\n      ),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n  onDeleteField() {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: without(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            this.state.deleteField,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: omit(this.props.value.properties, [this.state.deleteField]),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n  onChange(value) {\n    this.props.onChange(this.props.id, value);\n  }\n\n  /**\n   * Change default value handler\n   * @method onChangeDefaultValue\n   * @param {string} fieldId\n   * @param {string} fieldValue\n   */\n  onChangeDefaultValue(fieldId, fieldValue) {\n    // Default values can have irreversible consequence, thus skip it for now.\n    // const value = { default: fieldValue }\n    const value = {};\n\n    const fieldMerge = {\n      ...this.props.value.properties[fieldId],\n      ...value,\n    };\n    const propsMerge = {\n      ...this.props.value.properties,\n      ...{ [fieldId]: fieldMerge },\n    };\n\n    this.onChange({\n      ...this.props.value,\n      properties: propsMerge,\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n    });\n  }\n\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n  onShowAddField(event) {\n    this.setState({\n      addField: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n  onShowAddFieldset(event) {\n    this.setState({\n      addFieldset: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index,\n    });\n  }\n\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n  onShowEditField(id, schema) {\n    return this.setState({\n      editField: {\n        id,\n      },\n    });\n  }\n\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index,\n    });\n  }\n\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field,\n    });\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index,\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderField(index, delta) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: move(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            index,\n            delta,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderFieldset(index, delta) {\n    const schema = {\n      ...this.props.value,\n      fieldsets: move(this.props.value.fieldsets, index, delta),\n    };\n    this.setState({\n      currentFieldset: findIndex(schema.fieldsets, {\n        id: schema.fieldsets[this.state.currentFieldset].id,\n      }),\n    });\n    this.onChange(schema);\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onDragEnd\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onDragEnd(result) {\n    if (\n      result.destination &&\n      result.destination.droppableId === 'fields-schema-edit'\n    ) {\n      this.onOrderField(result.source.index, result.destination.index);\n    }\n    if (\n      result.destination &&\n      result.destination.droppableId === 'tabs-schema-edit'\n    ) {\n      this.onOrderFieldset(result.source.index, result.destination.index);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { error, reactBeautifulDnd } = this.props;\n    const { Draggable, DragDropContext, Droppable } = reactBeautifulDnd;\n    if (!this.props.value) {\n      return '';\n    }\n    const nonUserCreatedFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields.filter(\n      (fieldId) =>\n        !isEditable(this.props.value.properties[fieldId]) &&\n        fieldId !== 'changeNote',\n    );\n    const hasChangeNote =\n      this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf(\n        'changeNote',\n      ) > -1;\n    const userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n    const lastUserCreatedFieldsIndex = hasChangeNote\n      ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1\n      : this.props.value.fieldsets[this.state.currentFieldset].fields.length;\n    // fields that were not created by the user, but are part of a behavior\n    const makeNonUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          0,\n          userCreatedFieldsStartingIndex,\n        ),\n        (field, index) => (\n          <div\n            style={{ background: '#c7d5d859' }}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            <Field\n              {...this.props.value.properties[field]}\n              id={field}\n              required={this.props.value.required.indexOf(field) !== -1}\n              onEdit={this.onShowEditField}\n              draggable={false}\n              isDisabled={true}\n              order={index}\n              onDelete={this.onShowDeleteField}\n              onChange={this.onChangeDefaultValue}\n              value={this.props.value.properties[field].default}\n            />\n          </div>\n        ),\n      );\n    // fields created by the user\n    const makeUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          userCreatedFieldsStartingIndex,\n          lastUserCreatedFieldsIndex,\n        ),\n        (field, index) => (\n          <Draggable\n            draggableId={field}\n            index={userCreatedFieldsStartingIndex + index}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.draggableProps.style,\n                )}\n              >\n                <Field\n                  {...this.props.value.properties[field]}\n                  id={field}\n                  required={this.props.value.required.indexOf(field) !== -1}\n                  onEdit={this.onShowEditField}\n                  draggable={true}\n                  isDisabled={false}\n                  order={index}\n                  onDelete={this.onShowDeleteField}\n                  onChange={this.onChangeDefaultValue}\n                  key={`${field}-${this.state.currentFieldset}-${index}`}\n                  value={this.props.value.properties[field].default}\n                />\n              </div>\n            )}\n          </Draggable>\n        ),\n      );\n\n    const canAddFields =\n      this.state.currentFieldset === 0 ||\n      !this.props.value.fieldsets[this.state.currentFieldset].behavior ||\n      this.props.value.fieldsets[this.state.currentFieldset].behavior.includes(\n        'generated',\n      );\n\n    return (\n      <div>\n        <Segment.Group\n          style={{\n            margin: '-1rem',\n          }}\n        >\n          {error.length > 0 &&\n            map(error, (err, index) => (\n              <Message\n                icon=\"warning\"\n                key={`${err}-${index}`}\n                negative\n                attached\n                header={this.props.intl.formatMessage(messages.error)}\n                content={err}\n              />\n            ))}\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"tabs-schema-edit\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <div\n                  role=\"tablist\"\n                  className=\"ui pointing secondary attached tabular menu\"\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getTabStyle(snapshot.isDraggingOver)}\n                >\n                  {map(this.props.value.fieldsets, (fieldset, index) => (\n                    <SchemaWidgetFieldset\n                      key={`${fieldset.id}-${this.state.currentFieldset}-${index}`}\n                      title={fieldset.title}\n                      order={index}\n                      active={index === this.state.currentFieldset}\n                      onClick={this.onSetCurrentFieldset}\n                      onShowEditFieldset={this.onShowEditFieldset}\n                      onShowDeleteFieldset={this.onShowDeleteFieldset}\n                      onOrderFieldset={this.onOrderFieldset}\n                      getItemStyle={getItemStyle}\n                      isDraggable={true}\n                      isDisabled={\n                        fieldset.behavior\n                          ? !fieldset.behavior.includes('generated')\n                          : false\n                      }\n                    />\n                  ))}\n                  <div className=\"item item-add\">\n                    <button\n                      aria-label={this.props.intl.formatMessage(messages.add)}\n                      className=\"item ui noborder button\"\n                      onClick={this.onShowAddFieldset}\n                    >\n                      <Icon name=\"plus\" size=\"large\" />\n                    </button>\n                  </div>\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n\n            {makeNonUserFields()}\n\n            <Droppable\n              droppableId=\"fields-schema-edit\"\n              direction=\"vertical\"\n              type=\"fixed\"\n            >\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getFieldStyle(snapshot.isDraggingOver)}\n                >\n                  {makeUserFields()}\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n\n          {hasChangeNote ? (\n            <div style={{ background: '#c7d5d859' }}>\n              <Field\n                {...this.props.value.properties.changeNote}\n                id={'changeNote'}\n                required={\n                  this.props.value.required.indexOf('changeNote') !== -1\n                }\n                onEdit={this.onShowEditField}\n                draggable={false}\n                isDisabled={true}\n                order={\n                  this.props.value.fieldsets[this.state.currentFieldset]\n                    .length - 1\n                }\n                onDelete={this.onShowDeleteField}\n                onChange={this.onChangeDefaultValue}\n                key={'changeNote'}\n                value={this.props.value.properties.changeNote.default}\n              />\n            </div>\n          ) : null}\n\n          {canAddFields && (\n            <Form.Field inline>\n              <Grid>\n                <Grid.Row stretched>\n                  <Grid.Column width=\"12\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"addfield\">\n                        {this.props.intl.formatMessage(messages.addField)}\n                      </label>\n                    </div>\n                    <div className=\"toolbar\">\n                      <button\n                        aria-label={this.props.intl.formatMessage(messages.add)}\n                        id=\"addfield\"\n                        className=\"item ui noborder button\"\n                        onClick={this.onShowAddField}\n                      >\n                        <Icon name=\"plus\" color=\"blue\" size=\"large\" />\n                      </button>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          )}\n        </Segment.Group>\n        {this.state.addField !== null && (\n          <ModalForm\n            onSubmit={this.onAddField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addField)}\n            formData={{\n              type: '',\n              id: '',\n              title: '',\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['factory', 'title', 'description', 'required'],\n                },\n              ],\n              properties: {\n                factory: {\n                  type: 'string',\n                  factory: 'Choice',\n                  title: this.props.intl.formatMessage(messages.type),\n                  vocabulary: {\n                    '@id': `Fields`,\n                  },\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n                description: {\n                  type: 'string',\n                  widget: 'textarea',\n                  title: this.props.intl.formatMessage(messages.description),\n                },\n                required: {\n                  type: 'boolean',\n                  title: this.props.intl.formatMessage(messages.required),\n                },\n              },\n              required: ['type', 'title'],\n            }}\n          />\n        )}\n        {this.state.editField !== null && (\n          <ModalForm\n            onSubmit={this.onEditField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editField)}\n            formData={{\n              ...this.props.value.properties[this.state.editField.id],\n              id: this.state.editField.id,\n              required:\n                this.props.value.required.indexOf(this.state.editField.id) !==\n                -1,\n              parentFieldSet: this.props.value.fieldsets[\n                this.state.currentFieldset\n              ].id,\n              values: formatArrayToTextarea(\n                this.props.value.properties[this.state.editField.id],\n              ),\n            }}\n            schema={schemaField(\n              this.props.value.properties[this.state.editField.id].factory,\n              this.props.intl,\n              this.props.value.fieldsets.filter(\n                (fieldset) =>\n                  !fieldset.behavior ||\n                  fieldset.id === 'default' ||\n                  fieldset.behavior.includes('generated'),\n              ),\n            )}\n          />\n        )}\n        {this.state.addFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onAddFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addFieldset)}\n            formData={{\n              id: '',\n              title: '',\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.editFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onEditFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editFieldset)}\n            formData={{\n              id: this.props.value.fieldsets[this.state.editFieldset].id,\n              title: this.props.value.fieldsets[this.state.editFieldset].title,\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.deleteFieldset !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteFieldset)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteFieldset}\n          />\n        )}\n        {this.state.deleteField !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteField)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteField}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactBeautifulDnd']),\n  connect(\n    (state, props) => ({\n      value: isString(props.value) ? JSON.parse(props.value) : props.value,\n    }),\n    {},\n  ),\n)(SchemaWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add","defaultMessage":"Add"},{"id":"Add field","defaultMessage":"Add field"},{"id":"Add fieldset","defaultMessage":"Add fieldset"},{"id":"Parent fieldset","defaultMessage":"Parent fieldset"},{"id":"Edit field","defaultMessage":"Edit field"},{"id":"Edit fieldset","defaultMessage":"Edit fieldset"},{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Possible values","defaultMessage":"Possible values (Enter allowed choices one per line)."},{"id":"String","defaultMessage":"String"},{"id":"Text","defaultMessage":"Text"},{"id":"Richtext","defaultMessage":"Richtext"},{"id":"Checkbox","defaultMessage":"Checkbox"},{"id":"Selection","defaultMessage":"Selection"},{"id":"Type","defaultMessage":"Type"},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Required","defaultMessage":"Required"},{"id":"minLength","defaultMessage":"Minimum Length"},{"id":"maxLength","defaultMessage":"Maximum Length"},{"id":"minimum","defaultMessage":"Start of the range"},{"id":"maximum","defaultMessage":"End of the range (including the value itself)"},{"id":"Are you sure you want to delete this fieldset including all fields?","defaultMessage":"Are you sure you want to delete this fieldset including all fields?"},{"id":"Are you sure you want to delete this field?","defaultMessage":"Are you sure you want to delete this field?"},{"id":"Error","defaultMessage":"Error"}]}},"sourceType":"module"}