{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Error/Error.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * @module components/theme/Error/Error\n */\nimport React from 'react';\nimport config from '@plone/volto/registry';\n/**\n * Error function.\n * @function Error\n * @returns {string} Markup of the error page.\n */\n\nconst Error = props => {\n  const {\n    views\n  } = config;\n  const {\n    error\n  } = props;\n  let FoundView;\n\n  if (error.status === undefined) {\n    // For some reason, while development and if CORS is in place and the\n    // requested resource is 404, it returns undefined as status, then the\n    // next statement will fail\n    FoundView = views.errorViews.corsError;\n  } else {\n    FoundView = views.errorViews[error.status.toString()];\n  }\n\n  if (!FoundView) {\n    FoundView = views.errorViews['404']; // default to 404\n  }\n\n  return __jsx(\"div\", {\n    id: \"view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(FoundView, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Error;","map":{"version":3,"names":["React","config","Error","props","views","error","FoundView","status","undefined","errorViews","corsError","toString"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Error/Error.jsx"],"sourcesContent":["/**\n * @module components/theme/Error/Error\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\n/**\n * Error function.\n * @function Error\n * @returns {string} Markup of the error page.\n */\nconst Error = (props) => {\n  const { views } = config;\n  const { error } = props;\n  let FoundView;\n  if (error.status === undefined) {\n    // For some reason, while development and if CORS is in place and the\n    // requested resource is 404, it returns undefined as status, then the\n    // next statement will fail\n    FoundView = views.errorViews.corsError;\n  } else {\n    FoundView = views.errorViews[error.status.toString()];\n  }\n  if (!FoundView) {\n    FoundView = views.errorViews['404']; // default to 404\n  }\n  return (\n    <div id=\"view\">\n      <FoundView {...props} />\n    </div>\n  );\n};\n\nexport default Error;\n"],"mappings":";;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,KAAK,GAAIC,KAAD,IAAW;EACvB,MAAM;IAAEC;EAAF,IAAYH,MAAlB;EACA,MAAM;IAAEI;EAAF,IAAYF,KAAlB;EACA,IAAIG,SAAJ;;EACA,IAAID,KAAK,CAACE,MAAN,KAAiBC,SAArB,EAAgC;IAC9B;IACA;IACA;IACAF,SAAS,GAAGF,KAAK,CAACK,UAAN,CAAiBC,SAA7B;EACD,CALD,MAKO;IACLJ,SAAS,GAAGF,KAAK,CAACK,UAAN,CAAiBJ,KAAK,CAACE,MAAN,CAAaI,QAAb,EAAjB,CAAZ;EACD;;EACD,IAAI,CAACL,SAAL,EAAgB;IACdA,SAAS,GAAGF,KAAK,CAACK,UAAN,CAAiB,KAAjB,CAAZ,CADc,CACuB;EACtC;;EACD,OACE;IAAK,EAAE,EAAC,MAAR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,SAAD,eAAeN,KAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GADF,CADF;AAKD,CApBD;;AAsBA,eAAeD,KAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}