{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { blockTagDeserializer } from '@plone/volto-slate/editor/deserialize';\nimport { TABLE, TR, TD, TFOOT, THEAD, TBODY, TH } from '@plone/volto-slate/constants';\nimport { Editor, Point, Range } from 'slate';\nexport const withTable = editor => {\n  const {\n    deleteBackward,\n    deleteForward,\n    insertBreak\n  } = editor; // paste support\n\n  editor.htmlTagsToSlate = _objectSpread(_objectSpread({}, editor.htmlTagsToSlate), {}, {\n    TABLE: blockTagDeserializer(TABLE),\n    THEAD: blockTagDeserializer(THEAD),\n    TFOOT: blockTagDeserializer(TFOOT),\n    TBODY: blockTagDeserializer(TBODY),\n    TR: blockTagDeserializer(TR),\n    TH: blockTagDeserializer(TH),\n    TD: blockTagDeserializer(TD)\n  });\n\n  editor.deleteBackward = unit => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === TD\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = unit => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === TD\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const {\n      selection\n    } = editor;\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, {\n        match: n => n.type === TABLE\n      });\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};","map":{"version":3,"names":["blockTagDeserializer","TABLE","TR","TD","TFOOT","THEAD","TBODY","TH","Editor","Point","Range","withTable","editor","deleteBackward","deleteForward","insertBreak","htmlTagsToSlate","unit","selection","isCollapsed","cell","nodes","match","n","type","cellPath","start","equals","anchor","end","table"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/Table/extensions.js"],"sourcesContent":["import { blockTagDeserializer } from '@plone/volto-slate/editor/deserialize';\nimport {\n  TABLE,\n  TR,\n  TD,\n  TFOOT,\n  THEAD,\n  TBODY,\n  TH,\n} from '@plone/volto-slate/constants';\nimport { Editor, Point, Range } from 'slate';\n\nexport const withTable = (editor) => {\n  const { deleteBackward, deleteForward, insertBreak } = editor;\n\n  // paste support\n  editor.htmlTagsToSlate = {\n    ...editor.htmlTagsToSlate,\n    TABLE: blockTagDeserializer(TABLE),\n    THEAD: blockTagDeserializer(THEAD),\n    TFOOT: blockTagDeserializer(TFOOT),\n    TBODY: blockTagDeserializer(TBODY),\n    TR: blockTagDeserializer(TR),\n    TH: blockTagDeserializer(TH),\n    TD: blockTagDeserializer(TD),\n  };\n\n  editor.deleteBackward = (unit) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: (n) => n.type === TD,\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: (n) => n.type === TD,\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const { selection } = editor;\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, {\n        match: (n) => n.type === TABLE,\n      });\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};\n"],"mappings":";;;;;;AAAA,SAASA,oBAAT,QAAqC,uCAArC;AACA,SACEC,KADF,EAEEC,EAFF,EAGEC,EAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,EAPF,QAQO,8BARP;AASA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,KAAxB,QAAqC,OAArC;AAEA,OAAO,MAAMC,SAAS,GAAIC,MAAD,IAAY;EACnC,MAAM;IAAEC,cAAF;IAAkBC,aAAlB;IAAiCC;EAAjC,IAAiDH,MAAvD,CADmC,CAGnC;;EACAA,MAAM,CAACI,eAAP,mCACKJ,MAAM,CAACI,eADZ;IAEEf,KAAK,EAAED,oBAAoB,CAACC,KAAD,CAF7B;IAGEI,KAAK,EAAEL,oBAAoB,CAACK,KAAD,CAH7B;IAIED,KAAK,EAAEJ,oBAAoB,CAACI,KAAD,CAJ7B;IAKEE,KAAK,EAAEN,oBAAoB,CAACM,KAAD,CAL7B;IAMEJ,EAAE,EAAEF,oBAAoB,CAACE,EAAD,CAN1B;IAOEK,EAAE,EAAEP,oBAAoB,CAACO,EAAD,CAP1B;IAQEJ,EAAE,EAAEH,oBAAoB,CAACG,EAAD;EAR1B;;EAWAS,MAAM,CAACC,cAAP,GAAyBI,IAAD,IAAU;IAChC,MAAM;MAAEC;IAAF,IAAgBN,MAAtB;;IAEA,IAAIM,SAAS,IAAIR,KAAK,CAACS,WAAN,CAAkBD,SAAlB,CAAjB,EAA+C;MAC7C,MAAM,CAACE,IAAD,IAASZ,MAAM,CAACa,KAAP,CAAaT,MAAb,EAAqB;QAClCU,KAAK,EAAGC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWrB;MADS,CAArB,CAAf;;MAIA,IAAIiB,IAAJ,EAAU;QACR,MAAM,GAAGK,QAAH,IAAeL,IAArB;QACA,MAAMM,KAAK,GAAGlB,MAAM,CAACkB,KAAP,CAAad,MAAb,EAAqBa,QAArB,CAAd;;QAEA,IAAIhB,KAAK,CAACkB,MAAN,CAAaT,SAAS,CAACU,MAAvB,EAA+BF,KAA/B,CAAJ,EAA2C;UACzC;QACD;MACF;IACF;;IAEDb,cAAc,CAACI,IAAD,CAAd;EACD,CAnBD;;EAqBAL,MAAM,CAACE,aAAP,GAAwBG,IAAD,IAAU;IAC/B,MAAM;MAAEC;IAAF,IAAgBN,MAAtB;;IAEA,IAAIM,SAAS,IAAIR,KAAK,CAACS,WAAN,CAAkBD,SAAlB,CAAjB,EAA+C;MAC7C,MAAM,CAACE,IAAD,IAASZ,MAAM,CAACa,KAAP,CAAaT,MAAb,EAAqB;QAClCU,KAAK,EAAGC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWrB;MADS,CAArB,CAAf;;MAIA,IAAIiB,IAAJ,EAAU;QACR,MAAM,GAAGK,QAAH,IAAeL,IAArB;QACA,MAAMS,GAAG,GAAGrB,MAAM,CAACqB,GAAP,CAAWjB,MAAX,EAAmBa,QAAnB,CAAZ;;QAEA,IAAIhB,KAAK,CAACkB,MAAN,CAAaT,SAAS,CAACU,MAAvB,EAA+BC,GAA/B,CAAJ,EAAyC;UACvC;QACD;MACF;IACF;;IAEDf,aAAa,CAACG,IAAD,CAAb;EACD,CAnBD;;EAqBAL,MAAM,CAACG,WAAP,GAAqB,MAAM;IACzB,MAAM;MAAEG;IAAF,IAAgBN,MAAtB;;IAEA,IAAIM,SAAJ,EAAe;MACb,MAAM,CAACY,KAAD,IAAUtB,MAAM,CAACa,KAAP,CAAaT,MAAb,EAAqB;QACnCU,KAAK,EAAGC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWvB;MADU,CAArB,CAAhB;;MAIA,IAAI6B,KAAJ,EAAW;QACT;MACD;IACF;;IAEDf,WAAW;EACZ,CAdD;;EAgBA,OAAOH,MAAP;AACD,CA1EM"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}