{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SET_BLOCKS_CLIPBOARD, RESET_BLOCKS_CLIPBOARD } from '@plone/volto/constants/ActionTypes';\nconst initialState = {};\nexport default function blocks(state = initialState, action = {}) {\n  switch (action.type) {\n    case RESET_BLOCKS_CLIPBOARD:\n      return initialState;\n\n    case SET_BLOCKS_CLIPBOARD:\n      return _objectSpread({}, Object.assign({}, action.cut ? {\n        cut: action.cut\n      } : {}, action.copy ? {\n        copy: action.copy\n      } : {}));\n\n    default:\n      break;\n  }\n\n  return state;\n}","map":{"version":3,"names":["SET_BLOCKS_CLIPBOARD","RESET_BLOCKS_CLIPBOARD","initialState","blocks","state","action","type","Object","assign","cut","copy"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/reducers/blocksClipboard/blocksClipboard.js"],"sourcesContent":["import {\n  SET_BLOCKS_CLIPBOARD,\n  RESET_BLOCKS_CLIPBOARD,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {};\n\nexport default function blocks(state = initialState, action = {}) {\n  switch (action.type) {\n    case RESET_BLOCKS_CLIPBOARD:\n      return initialState;\n    case SET_BLOCKS_CLIPBOARD:\n      return {\n        ...Object.assign(\n          {},\n          action.cut ? { cut: action.cut } : {},\n          action.copy ? { copy: action.copy } : {},\n        ),\n      };\n    default:\n      break;\n  }\n  return state;\n}\n"],"mappings":";;;;;;AAAA,SACEA,oBADF,EAEEC,sBAFF,QAGO,oCAHP;AAKA,MAAMC,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAK,GAAGF,YAAxB,EAAsCG,MAAM,GAAG,EAA/C,EAAmD;EAChE,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKL,sBAAL;MACE,OAAOC,YAAP;;IACF,KAAKF,oBAAL;MACE,yBACKO,MAAM,CAACC,MAAP,CACD,EADC,EAEDH,MAAM,CAACI,GAAP,GAAa;QAAEA,GAAG,EAAEJ,MAAM,CAACI;MAAd,CAAb,GAAmC,EAFlC,EAGDJ,MAAM,CAACK,IAAP,GAAc;QAAEA,IAAI,EAAEL,MAAM,CAACK;MAAf,CAAd,GAAsC,EAHrC,CADL;;IAOF;MACE;EAZJ;;EAcA,OAAON,KAAP;AACD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}