{"ast":null,"code":"import _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { messages, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n\n  loadFromStorage() {\n    var _load;\n\n    const clipboard = (_load = load({\n      states: ['blocksClipboard']\n    })) === null || _load === void 0 ? void 0 : _load.blocksClipboard;\n    if (!_isEqual(clipboard, this.props.blocksClipboard)) this.props.setBlocksClipboard(clipboard || {});\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n    const {\n      formData\n    } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData); // Might need ReactDOM.unstable_batchedUpdates()\n\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: _omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: _without(formData[blocksLayoutFieldname].items, ...blockIds)\n      })\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n\n  setBlocksClipboard(actionType) {\n    const {\n      formData\n    } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(blockId => blocks[blockId]);\n    this.props.setBlocksClipboard({\n      [actionType]: blocksData\n    });\n    this.props.onSetSelectedBlocks([]);\n  }\n\n  pasteBlocks(e) {\n    const {\n      formData,\n      blocksClipboard = {},\n      selectedBlock\n    } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData.filter(blockData => !!blockData['@type']).map(blockData => {\n      const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n      return mode === 'copy' ? blockConfig.cloneData ? blockConfig.cloneData(blockData) : [uuid(), blockData] : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n    }).filter(info => !!info); // some blocks may refuse to be copied\n\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex = formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n    const newBlockData = {\n      [blocksFieldname]: _objectSpread(_objectSpread({}, formData[blocksFieldname]), Object.assign({}, ...cloneWithIds.map(([id, data]) => ({\n        [id]: data\n      })))),\n      [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: [...formData[blocksLayoutFieldname].items.slice(0, selectedIndex), ...cloneWithIds.map(([id]) => id), ...formData[blocksLayoutFieldname].items.slice(selectedIndex)]\n      })\n    };\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl\n    } = this.props;\n    return __jsx(React.Fragment, null, selectedBlocks.length > 0 ? __jsx(React.Fragment, null, __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-delete-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.deleteBlocks),\n      onClick: this.deleteBlocks,\n      tabIndex: 0,\n      className: \"deleteBlocks\",\n      id: \"toolbar-delete-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-cut-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.cutBlocks),\n      onClick: this.cutBlocksToClipboard,\n      tabIndex: 0,\n      className: \"cutBlocks\",\n      id: \"toolbar-cut-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: cutSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-copy-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.copyBlocks),\n      onClick: this.copyBlocksToClipboard,\n      tabIndex: 0,\n      className: \"copyBlocks\",\n      id: \"toolbar-copy-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: copySVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    })))) : '', selectedBlock && ((blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.cut) || (blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.copy)) && __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"block-paste-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.pasteBlocks),\n      onClick: this.pasteBlocks,\n      tabIndex: 0,\n      className: \"pasteBlocks\",\n      id: \"toolbar-paste-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"blockCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, (blocksClipboard.cut || blocksClipboard.copy).length), __jsx(Icon, {\n      name: pasteSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\nexport default compose(injectIntl, connect(state => {\n  return {\n    blocksClipboard: (state === null || state === void 0 ? void 0 : state.blocksClipboard) || {}\n  };\n}, {\n  setBlocksClipboard,\n  resetBlocksClipboard\n}))(BlocksToolbarComponent);","map":{"version":3,"names":["React","compose","connect","injectIntl","messages","getBlocksFieldname","getBlocksLayoutFieldname","Icon","Plug","v4","uuid","load","setBlocksClipboard","resetBlocksClipboard","config","copySVG","cutSVG","pasteSVG","trashSVG","BlocksToolbarComponent","Component","constructor","props","copyBlocksToClipboard","bind","cutBlocksToClipboard","deleteBlocks","loadFromStorage","pasteBlocks","clipboard","states","blocksClipboard","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","blockIds","selectedBlocks","formData","blocksFieldname","blocksLayoutFieldname","onSelectBlock","newBlockData","items","onChangeBlocks","actionType","blocks","blocksData","map","blockId","onSetSelectedBlocks","e","selectedBlock","mode","Object","keys","includes","cloneWithIds","filter","blockData","blockConfig","blocksConfig","cloneData","info","selectedIndex","indexOf","assign","id","data","slice","ctrlKey","metaKey","render","intl","length","formatMessage","cutBlocks","copyBlocks","cut","copy","state"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport {\n  messages,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { isEqual, omit, without } from 'lodash';\n\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n\n  loadFromStorage() {\n    const clipboard = load({ states: ['blocksClipboard'] })?.blocksClipboard;\n    if (!isEqual(clipboard, this.props.blocksClipboard))\n      this.props.setBlocksClipboard(clipboard || {});\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: without(formData[blocksLayoutFieldname].items, ...blockIds),\n      },\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n\n  setBlocksClipboard(actionType) {\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(\n      (blockId) => blocks[blockId],\n    );\n    this.props.setBlocksClipboard({ [actionType]: blocksData });\n    this.props.onSetSelectedBlocks([]);\n  }\n\n  pasteBlocks(e) {\n    const { formData, blocksClipboard = {}, selectedBlock } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData\n      .filter((blockData) => !!blockData['@type'])\n      .map((blockData) => {\n        const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n        return mode === 'copy'\n          ? blockConfig.cloneData\n            ? blockConfig.cloneData(blockData)\n            : [uuid(), blockData]\n          : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n      })\n      .filter((info) => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex =\n      formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n\n    const newBlockData = {\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        ...Object.assign(\n          {},\n          ...cloneWithIds.map(([id, data]) => ({ [id]: data })),\n        ),\n      },\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, selectedIndex),\n          ...cloneWithIds.map(([id]) => id),\n          ...formData[blocksLayoutFieldname].items.slice(selectedIndex),\n        ],\n      },\n    };\n\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl,\n    } = this.props;\n    return (\n      <>\n        {selectedBlocks.length > 0 ? (\n          <>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-delete-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.deleteBlocks)}\n                onClick={this.deleteBlocks}\n                tabIndex={0}\n                className=\"deleteBlocks\"\n                id=\"toolbar-delete-blocks\"\n              >\n                <Icon name={trashSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-cut-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.cutBlocks)}\n                onClick={this.cutBlocksToClipboard}\n                tabIndex={0}\n                className=\"cutBlocks\"\n                id=\"toolbar-cut-blocks\"\n              >\n                <Icon name={cutSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-copy-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.copyBlocks)}\n                onClick={this.copyBlocksToClipboard}\n                tabIndex={0}\n                className=\"copyBlocks\"\n                id=\"toolbar-copy-blocks\"\n              >\n                <Icon name={copySVG} size=\"30px\" />\n              </button>\n            </Plug>\n          </>\n        ) : (\n          ''\n        )}\n        {selectedBlock && (blocksClipboard?.cut || blocksClipboard?.copy) && (\n          <Plug pluggable=\"main.toolbar.bottom\" id=\"block-paste-btn\">\n            <button\n              aria-label={intl.formatMessage(messages.pasteBlocks)}\n              onClick={this.pasteBlocks}\n              tabIndex={0}\n              className=\"pasteBlocks\"\n              id=\"toolbar-paste-blocks\"\n            >\n              <span className=\"blockCount\">\n                {(blocksClipboard.cut || blocksClipboard.copy).length}\n              </span>\n              <Icon name={pasteSVG} size=\"30px\" />\n            </button>\n          </Plug>\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => {\n      return {\n        blocksClipboard: state?.blocksClipboard || {},\n      };\n    },\n    { setBlocksClipboard, resetBlocksClipboard },\n  ),\n)(BlocksToolbarComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}