{"ast":null,"code":"/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\n\nexport const generateRobots = req => new Promise(resolve => {\n  var _config$settings$inte;\n\n  //const url = `${req.protocol}://${req.get('Host')}`;\n  const request = superagent.get(`${(_config$settings$inte = config.settings.internalApiPath) !== null && _config$settings$inte !== void 0 ? _config$settings$inte : config.settings.apiPath}/robots.txt`);\n  request.set('Accept', 'text/plain');\n  const authToken = req.universalCookies.get('auth_token');\n\n  if (authToken) {\n    request.set('Authorization', `Bearer ${authToken}`);\n  }\n\n  request.use(addHeadersFactory(req));\n  request.end((error, _ref) => {\n    let {\n      text\n    } = _ref;\n\n    if (error) {\n      resolve(text || error);\n    } else {\n      resolve(text);\n    }\n  });\n});","map":{"version":3,"names":["superagent","config","addHeadersFactory","generateRobots","req","Promise","resolve","request","get","settings","internalApiPath","apiPath","set","authToken","universalCookies","use","end","error","text"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Robots/Robots.js"],"sourcesContent":["/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = (req) =>\n  new Promise((resolve) => {\n    //const url = `${req.protocol}://${req.get('Host')}`;\n    const request = superagent.get(\n      `${\n        config.settings.internalApiPath ?? config.settings.apiPath\n      }/robots.txt`,\n    );\n    request.set('Accept', 'text/plain');\n    const authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.use(addHeadersFactory(req));\n    request.end((error, { text }) => {\n      if (error) {\n        resolve(text || error);\n      } else {\n        resolve(text);\n      }\n    });\n  });\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,GAAD,IAC5B,IAAIC,OAAJ,CAAaC,OAAD,IAAa;EAAA;;EACvB;EACA,MAAMC,OAAO,GAAGP,UAAU,CAACQ,GAAX,CACb,GAAD,yBACEP,MAAM,CAACQ,QAAP,CAAgBC,eADlB,yEACqCT,MAAM,CAACQ,QAAP,CAAgBE,OACpD,aAHa,CAAhB;EAKAJ,OAAO,CAACK,GAAR,CAAY,QAAZ,EAAsB,YAAtB;EACA,MAAMC,SAAS,GAAGT,GAAG,CAACU,gBAAJ,CAAqBN,GAArB,CAAyB,YAAzB,CAAlB;;EACA,IAAIK,SAAJ,EAAe;IACbN,OAAO,CAACK,GAAR,CAAY,eAAZ,EAA8B,UAASC,SAAU,EAAjD;EACD;;EACDN,OAAO,CAACQ,GAAR,CAAYb,iBAAiB,CAACE,GAAD,CAA7B;EACAG,OAAO,CAACS,GAAR,CAAY,CAACC,KAAD,WAAqB;IAAA,IAAb;MAAEC;IAAF,CAAa;;IAC/B,IAAID,KAAJ,EAAW;MACTX,OAAO,CAACY,IAAI,IAAID,KAAT,CAAP;IACD,CAFD,MAEO;MACLX,OAAO,CAACY,IAAD,CAAP;IACD;EACF,CAND;AAOD,CApBD,CADK"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}