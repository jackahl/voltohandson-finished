{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Contents/ContentsBreadcrumbs.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Breadcrumb } from 'semantic-ui-react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  home: {\n    \"id\": \"Home\",\n    \"defaultMessage\": \"Home\"\n  },\n  root: {\n    \"id\": \"Root\",\n    \"defaultMessage\": \"Root\"\n  }\n});\n\nconst ContentsBreadcrumbs = props => {\n  _s();\n\n  var _pathname$split;\n\n  const {\n    settings\n  } = config;\n  const {\n    items\n  } = props;\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = pathname.split('/')[1];\n  return __jsx(Breadcrumb, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, settings.isMultilingual && __jsx(React.Fragment, null, __jsx(Link, {\n    to: \"/contents\",\n    className: \"section\",\n    title: intl.formatMessage(messages.root),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, intl.formatMessage(messages.root)), __jsx(Breadcrumb.Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  })), settings.isMultilingual && (pathname === null || pathname === void 0 ? void 0 : (_pathname$split = pathname.split('/')) === null || _pathname$split === void 0 ? void 0 : _pathname$split.length) > 2 && __jsx(Link, {\n    to: `/${lang}/contents`,\n    className: \"section\",\n    title: intl.formatMessage(messages.home),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, lang), !settings.isMultilingual && __jsx(Link, {\n    to: \"/contents\",\n    className: \"section\",\n    title: intl.formatMessage(messages.home),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.home)), items.map((breadcrumb, index, breadcrumbs) => [__jsx(Breadcrumb.Divider, {\n    key: `divider-${breadcrumb.url}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), index < breadcrumbs.length - 1 ? __jsx(Link, {\n    key: breadcrumb.url,\n    to: `${breadcrumb.url}/contents`,\n    className: \"section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, breadcrumb.nav_title || breadcrumb.title) : __jsx(Breadcrumb.Section, {\n    key: breadcrumb.url,\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, breadcrumb.nav_title || breadcrumb.title)]));\n};\n\n_s(ContentsBreadcrumbs, \"SaR8HvAgA3+jOnwZZruuat4hRr4=\", false, function () {\n  return [useIntl, useLocation];\n});\n\n_c = ContentsBreadcrumbs;\nexport default ContentsBreadcrumbs;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContentsBreadcrumbs\");","map":{"version":3,"names":["React","Breadcrumb","Link","useLocation","defineMessages","useIntl","config","messages","home","root","ContentsBreadcrumbs","props","settings","items","intl","pathname","lang","split","isMultilingual","formatMessage","length","map","breadcrumb","index","breadcrumbs","url","nav_title","title"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Contents/ContentsBreadcrumbs.jsx"],"sourcesContent":["import React from 'react';\nimport { Breadcrumb } from 'semantic-ui-react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  home: {\n    id: 'Home',\n    defaultMessage: 'Home',\n  },\n  root: {\n    id: 'Root',\n    defaultMessage: 'Root',\n  },\n});\n\nconst ContentsBreadcrumbs = (props) => {\n  const { settings } = config;\n  const { items } = props;\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = pathname.split('/')[1];\n\n  return (\n    <Breadcrumb>\n      {settings.isMultilingual && (\n        <>\n          <Link\n            to=\"/contents\"\n            className=\"section\"\n            title={intl.formatMessage(messages.root)}\n          >\n            {intl.formatMessage(messages.root)}\n          </Link>\n          <Breadcrumb.Divider />\n        </>\n      )}\n      {settings.isMultilingual && pathname?.split('/')?.length > 2 && (\n        <Link\n          to={`/${lang}/contents`}\n          className=\"section\"\n          title={intl.formatMessage(messages.home)}\n        >\n          {lang}\n        </Link>\n      )}\n      {!settings.isMultilingual && (\n        <Link\n          to=\"/contents\"\n          className=\"section\"\n          title={intl.formatMessage(messages.home)}\n        >\n          {intl.formatMessage(messages.home)}\n        </Link>\n      )}\n      {items.map((breadcrumb, index, breadcrumbs) => [\n        <Breadcrumb.Divider key={`divider-${breadcrumb.url}`} />,\n        index < breadcrumbs.length - 1 ? (\n          <Link\n            key={breadcrumb.url}\n            to={`${breadcrumb.url}/contents`}\n            className=\"section\"\n          >\n            {breadcrumb.nav_title || breadcrumb.title}\n          </Link>\n        ) : (\n          <Breadcrumb.Section key={breadcrumb.url} active>\n            {breadcrumb.nav_title || breadcrumb.title}\n          </Breadcrumb.Section>\n        ),\n      ])}\n    </Breadcrumb>\n  );\n};\n\nexport default ContentsBreadcrumbs;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Home","defaultMessage":"Home"},{"id":"Root","defaultMessage":"Root"}]}},"sourceType":"module"}