{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Search/SearchTags.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Search tags components.\n * @module components/theme/Search/SearchTags\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getVocabulary } from '@plone/volto/actions';\nconst vocabulary = 'plone.app.vocabularies.Keywords';\n/**\n * Search tags container class.\n * @class SearchTags\n * @extends Component\n */\n\nclass SearchTags extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  componentDidMount() {\n    this.props.getVocabulary({\n      vocabNameOrURL: vocabulary\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return this.props.terms && this.props.terms.length > 0 ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, this.props.terms.map(term => __jsx(Link, {\n      className: \"ui label\",\n      to: `/search?Subject=${term.title}`,\n      key: term.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, term.title))) : __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\n_defineProperty(SearchTags, \"propTypes\", {\n  getVocabulary: PropTypes.func.isRequired,\n  terms: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string\n  })).isRequired\n});\n\nexport default connect(state => ({\n  terms: state.vocabularies[vocabulary] && state.vocabularies[vocabulary].terms ? state.vocabularies[vocabulary].terms : []\n}), {\n  getVocabulary\n})(SearchTags);","map":{"version":3,"names":["React","Component","PropTypes","connect","Link","getVocabulary","vocabulary","SearchTags","componentDidMount","props","vocabNameOrURL","render","terms","length","map","term","title","func","isRequired","arrayOf","shape","string","state","vocabularies"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Search/SearchTags.jsx"],"sourcesContent":["/**\n * Search tags components.\n * @module components/theme/Search/SearchTags\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { getVocabulary } from '@plone/volto/actions';\n\nconst vocabulary = 'plone.app.vocabularies.Keywords';\n\n/**\n * Search tags container class.\n * @class SearchTags\n * @extends Component\n */\nclass SearchTags extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getVocabulary: PropTypes.func.isRequired,\n    terms: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  componentDidMount() {\n    this.props.getVocabulary({ vocabNameOrURL: vocabulary });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.terms && this.props.terms.length > 0 ? (\n      <div>\n        {this.props.terms.map((term) => (\n          <Link\n            className=\"ui label\"\n            to={`/search?Subject=${term.title}`}\n            key={term.title}\n          >\n            {term.title}\n          </Link>\n        ))}\n      </div>\n    ) : (\n      <span />\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    terms:\n      state.vocabularies[vocabulary] && state.vocabularies[vocabulary].terms\n        ? state.vocabularies[vocabulary].terms\n        : [],\n  }),\n  { getVocabulary },\n)(SearchTags);\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,MAAMC,UAAU,GAAG,iCAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyBN,SAAzB,CAAmC;EACjC;AACF;AACA;AACA;AACA;EAUEO,iBAAiB,GAAG;IAClB,KAAKC,KAAL,CAAWJ,aAAX,CAAyB;MAAEK,cAAc,EAAEJ;IAAlB,CAAzB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEK,MAAM,GAAG;IACP,OAAO,KAAKF,KAAL,CAAWG,KAAX,IAAoB,KAAKH,KAAL,CAAWG,KAAX,CAAiBC,MAAjB,GAA0B,CAA9C,GACL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,KAAKJ,KAAL,CAAWG,KAAX,CAAiBE,GAAjB,CAAsBC,IAAD,IACpB,MAAC,IAAD;MACE,SAAS,EAAC,UADZ;MAEE,EAAE,EAAG,mBAAkBA,IAAI,CAACC,KAAM,EAFpC;MAGE,GAAG,EAAED,IAAI,CAACC,KAHZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAKGD,IAAI,CAACC,KALR,CADD,CADH,CADK,GAaL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAbF;EAeD;;AAxCgC;;gBAA7BT,U,eAMe;EACjBF,aAAa,EAAEH,SAAS,CAACe,IAAV,CAAeC,UADb;EAEjBN,KAAK,EAAEV,SAAS,CAACiB,OAAV,CACLjB,SAAS,CAACkB,KAAV,CAAgB;IACdJ,KAAK,EAAEd,SAAS,CAACmB;EADH,CAAhB,CADK,EAILH;AANe,C;;AAqCrB,eAAef,OAAO,CACnBmB,KAAD,KAAY;EACVV,KAAK,EACHU,KAAK,CAACC,YAAN,CAAmBjB,UAAnB,KAAkCgB,KAAK,CAACC,YAAN,CAAmBjB,UAAnB,EAA+BM,KAAjE,GACIU,KAAK,CAACC,YAAN,CAAmBjB,UAAnB,EAA+BM,KADnC,GAEI;AAJI,CAAZ,CADoB,EAOpB;EAAEP;AAAF,CAPoB,CAAP,CAQbE,UARa,CAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}