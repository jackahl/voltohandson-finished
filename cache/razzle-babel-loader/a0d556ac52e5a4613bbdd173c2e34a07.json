{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/Occurences.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * Occurences component.\n * @module components/manage/Widgets/RecurrenceWidget/Occurences\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { List, Button, Header, Label } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\nimport { toISOString } from './Utils';\nconst messages = defineMessages({\n  selected_dates: {\n    \"id\": \"Selected dates\",\n    \"defaultMessage\": \"Selected dates\"\n  },\n  start_of_recurrence: {\n    \"id\": \"Start of the recurrence\",\n    \"defaultMessage\": \"Start of the recurrence\"\n  },\n  additional_date: {\n    \"id\": \"Additional date\",\n    \"defaultMessage\": \"Additional date\"\n  },\n  other_items: {\n    \"id\": \"others\",\n    \"defaultMessage\": \"others\"\n  },\n  no_occurences: {\n    \"id\": \"No occurences set\",\n    \"defaultMessage\": \"No occurences set\"\n  },\n  exclude: {\n    \"id\": \"Exclude this occurence\",\n    \"defaultMessage\": \"Exclude this occurence\"\n  },\n  include: {\n    \"id\": \"Include this occurence\",\n    \"defaultMessage\": \"Include this occurence\"\n  }\n});\n\nconst formatDate = (d, moment) => {\n  const m = moment(d);\n  return m.format('dddd') + ', ' + m.format('LL');\n};\n/**\n * Occurences component class.\n * @function Occurences\n * @returns {string} Markup of the component.\n */\n\n\nconst Occurences_ = _ref => {\n  _s();\n\n  let {\n    rruleSet,\n    exclude,\n    undoExclude,\n    intl,\n    showTitle,\n    editOccurences,\n    moment: momentlib\n  } = _ref;\n  const moment = momentlib.default;\n  const lang = useSelector(state => state.intl.locale);\n  moment.locale(lang);\n  let all = [];\n\n  const isExcluded = date => {\n    var dateISO = toISOString(date);\n    var excluded = false;\n    rruleSet.exdates().forEach(ex => {\n      var exISO = toISOString(ex);\n\n      if (exISO === dateISO) {\n        excluded = true;\n      }\n    });\n    return excluded;\n  };\n\n  const isAdditional = date => {\n    var dateISO = toISOString(date);\n    var additional = false;\n    rruleSet.rdates().forEach(d => {\n      var dd = toISOString(d);\n\n      if (dd === dateISO) {\n        additional = true;\n      }\n    });\n    return additional;\n  };\n\n  if (rruleSet) {\n    all = rruleSet.all();\n    rruleSet.exdates().forEach(date => {\n      if (all.indexOf(date) < 0) {\n        all.push(date);\n      }\n    });\n    all.sort((a, b) => {\n      return a > b ? 1 : -1;\n    });\n  }\n\n  const others = all.splice(100);\n  return __jsx(\"div\", {\n    className: \"occurences\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, all.length === 0 && __jsx(React.Fragment, null, intl.formatMessage(messages.no_occurences)), showTitle && __jsx(Header, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.selected_dates)), __jsx(List, {\n    divided: true,\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, all.map((date, index) => {\n    const excluded = isExcluded(date);\n    return __jsx(List.Item, {\n      key: date.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, editOccurences && __jsx(List.Content, {\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, index > 0 ? __jsx(React.Fragment, null, !excluded && __jsx(Button, {\n      basic: true,\n      icon: true,\n      className: \"exclude-button\",\n      onClick: () => {\n        exclude(date);\n      },\n      \"aria-label\": intl.formatMessage(messages.exclude),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 27\n      }\n    })), excluded && __jsx(Button, {\n      basic: true,\n      icon: true,\n      className: \"include-button\",\n      onClick: () => {\n        undoExclude(date);\n      },\n      \"aria-label\": intl.formatMessage(messages.include),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 27\n      }\n    }))) : intl.formatMessage(messages.start_of_recurrence)), __jsx(List.Content, {\n      className: cx({\n        excluded: excluded\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, formatDate(date, moment), isAdditional(date) && __jsx(Label, {\n      pointing: \"left\",\n      size: \"small\",\n      color: excluded ? 'grey' : 'green',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.additional_date))));\n  }), others.length > 0 && __jsx(List.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, __jsx(List.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, `... ${intl.formatMessage(messages.other_items)} ${others.length}`))));\n};\n\n_s(Occurences_, \"YX9svgYxZ8mkOt/FPg3Kqpt9At4=\", false, function () {\n  return [useSelector];\n});\n\n_c = Occurences_;\nexport const Occurences = injectLazyLibs(['moment'])(Occurences_);\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\nOccurences.propTypes = {\n  rruleSet: PropTypes.any,\n  showTitle: PropTypes.bool,\n  editOccurences: PropTypes.bool\n};\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\n\nOccurences.defaultProps = {\n  rruleSet: null,\n  showTitle: true,\n  editOccurences: true\n};\nexport default _c2 = injectIntl(Occurences);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Occurences_\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","PropTypes","defineMessages","injectIntl","cx","List","Button","Header","Label","Icon","addSVG","trashSVG","injectLazyLibs","useSelector","toISOString","messages","selected_dates","start_of_recurrence","additional_date","other_items","no_occurences","exclude","include","formatDate","d","moment","m","format","Occurences_","rruleSet","undoExclude","intl","showTitle","editOccurences","momentlib","default","lang","state","locale","all","isExcluded","date","dateISO","excluded","exdates","forEach","ex","exISO","isAdditional","additional","rdates","dd","indexOf","push","sort","a","b","others","splice","length","formatMessage","map","index","toString","Occurences","propTypes","any","bool","defaultProps"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/Occurences.jsx"],"sourcesContent":["/**\n * Occurences component.\n * @module components/manage/Widgets/RecurrenceWidget/Occurences\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { List, Button, Header, Label } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport { useSelector } from 'react-redux';\nimport { toISOString } from './Utils';\n\nconst messages = defineMessages({\n  selected_dates: {\n    id: 'Selected dates',\n    defaultMessage: 'Selected dates',\n  },\n  start_of_recurrence: {\n    id: 'Start of the recurrence',\n    defaultMessage: 'Start of the recurrence',\n  },\n  additional_date: {\n    id: 'Additional date',\n    defaultMessage: 'Additional date',\n  },\n  other_items: {\n    id: 'others',\n    defaultMessage: 'others',\n  },\n  no_occurences: {\n    id: 'No occurences set',\n    defaultMessage: 'No occurences set',\n  },\n  exclude: {\n    id: 'Exclude this occurence',\n    defaultMessage: 'Exclude this occurence',\n  },\n  include: {\n    id: 'Include this occurence',\n    defaultMessage: 'Include this occurence',\n  },\n});\n\nconst formatDate = (d, moment) => {\n  const m = moment(d);\n  return m.format('dddd') + ', ' + m.format('LL');\n};\n\n/**\n * Occurences component class.\n * @function Occurences\n * @returns {string} Markup of the component.\n */\nconst Occurences_ = ({\n  rruleSet,\n  exclude,\n  undoExclude,\n  intl,\n  showTitle,\n  editOccurences,\n  moment: momentlib,\n}) => {\n  const moment = momentlib.default;\n  const lang = useSelector((state) => state.intl.locale);\n  moment.locale(lang);\n  let all = [];\n  const isExcluded = (date) => {\n    var dateISO = toISOString(date);\n    var excluded = false;\n    rruleSet.exdates().forEach((ex) => {\n      var exISO = toISOString(ex);\n      if (exISO === dateISO) {\n        excluded = true;\n      }\n    });\n    return excluded;\n  };\n\n  const isAdditional = (date) => {\n    var dateISO = toISOString(date);\n    var additional = false;\n    rruleSet.rdates().forEach((d) => {\n      var dd = toISOString(d);\n      if (dd === dateISO) {\n        additional = true;\n      }\n    });\n    return additional;\n  };\n\n  if (rruleSet) {\n    all = rruleSet.all();\n\n    rruleSet.exdates().forEach((date) => {\n      if (all.indexOf(date) < 0) {\n        all.push(date);\n      }\n    });\n    all.sort((a, b) => {\n      return a > b ? 1 : -1;\n    });\n  }\n\n  const others = all.splice(100);\n\n  return (\n    <div className=\"occurences\">\n      {all.length === 0 && <>{intl.formatMessage(messages.no_occurences)}</>}\n      {showTitle && (\n        <Header as=\"h2\">{intl.formatMessage(messages.selected_dates)}</Header>\n      )}\n\n      <List divided verticalAlign=\"middle\">\n        {all.map((date, index) => {\n          const excluded = isExcluded(date);\n          return (\n            <List.Item key={date.toString()}>\n              {editOccurences && (\n                <List.Content floated=\"right\">\n                  {index > 0 ? (\n                    <>\n                      {!excluded && (\n                        <Button\n                          basic\n                          icon\n                          className=\"exclude-button\"\n                          onClick={() => {\n                            exclude(date);\n                          }}\n                          aria-label={intl.formatMessage(messages.exclude)}\n                        >\n                          <Icon name={trashSVG} size=\"18px\" />\n                        </Button>\n                      )}\n                      {excluded && (\n                        <Button\n                          basic\n                          icon\n                          className=\"include-button\"\n                          onClick={() => {\n                            undoExclude(date);\n                          }}\n                          aria-label={intl.formatMessage(messages.include)}\n                        >\n                          <Icon name={addSVG} size=\"24px\" />\n                        </Button>\n                      )}\n                    </>\n                  ) : (\n                    intl.formatMessage(messages.start_of_recurrence)\n                  )}\n                </List.Content>\n              )}\n              <List.Content className={cx({ excluded: excluded })}>\n                {formatDate(date, moment)}\n                {isAdditional(date) && (\n                  <Label\n                    pointing=\"left\"\n                    size=\"small\"\n                    color={excluded ? 'grey' : 'green'}\n                  >\n                    {intl.formatMessage(messages.additional_date)}\n                  </Label>\n                )}\n              </List.Content>\n            </List.Item>\n          );\n        })}\n        {others.length > 0 && (\n          <List.Item>\n            <List.Content>\n              {`... ${intl.formatMessage(messages.other_items)} ${\n                others.length\n              }`}\n            </List.Content>\n          </List.Item>\n        )}\n      </List>\n    </div>\n  );\n};\n\nexport const Occurences = injectLazyLibs(['moment'])(Occurences_);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nOccurences.propTypes = {\n  rruleSet: PropTypes.any,\n  showTitle: PropTypes.bool,\n  editOccurences: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nOccurences.defaultProps = {\n  rruleSet: null,\n  showTitle: true,\n  editOccurences: true,\n};\n\nexport default injectIntl(Occurences);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Selected dates","defaultMessage":"Selected dates"},{"id":"Start of the recurrence","defaultMessage":"Start of the recurrence"},{"id":"Additional date","defaultMessage":"Additional date"},{"id":"others","defaultMessage":"others"},{"id":"No occurences set","defaultMessage":"No occurences set"},{"id":"Exclude this occurence","defaultMessage":"Exclude this occurence"},{"id":"Include this occurence","defaultMessage":"Include this occurence"}]}},"sourceType":"module"}