{"ast":null,"code":"/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n/**\n * Get a resource image/file with authenticated (if token exist) API headers\n * @function getAPIResourceWithAuth\n * @param {Object} req Request object\n * @return {string} The response with the image\n */\n\nexport const getAPIResourceWithAuth = req => new Promise((resolve, reject) => {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  let apiPath = '';\n\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (__DEVELOPMENT__ && settings.devProxyToApiPath) {\n    apiPath = settings.devProxyToApiPath;\n  } else {\n    apiPath = settings.apiPath;\n  }\n\n  const request = superagent.get(`${apiPath}${APISUFIX}${req.path}`).maxResponseSize(settings.maxResponseSize).responseType('blob');\n  const authToken = req.universalCookies.get('auth_token');\n\n  if (authToken) {\n    request.set('Authorization', `Bearer ${authToken}`);\n  }\n\n  request.use(addHeadersFactory(req));\n  request.then(resolve).catch(reject);\n});","map":{"version":3,"names":["superagent","config","addHeadersFactory","getAPIResourceWithAuth","req","Promise","resolve","reject","settings","APISUFIX","legacyTraverse","apiPath","internalApiPath","__SERVER__","__DEVELOPMENT__","devProxyToApiPath","request","get","path","maxResponseSize","responseType","authToken","universalCookies","set","use","then","catch"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Api/APIResourceWithAuth.js"],"sourcesContent":["/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Get a resource image/file with authenticated (if token exist) API headers\n * @function getAPIResourceWithAuth\n * @param {Object} req Request object\n * @return {string} The response with the image\n */\nexport const getAPIResourceWithAuth = (req) =>\n  new Promise((resolve, reject) => {\n    const { settings } = config;\n    const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n\n    let apiPath = '';\n    if (settings.internalApiPath && __SERVER__) {\n      apiPath = settings.internalApiPath;\n    } else if (__DEVELOPMENT__ && settings.devProxyToApiPath) {\n      apiPath = settings.devProxyToApiPath;\n    } else {\n      apiPath = settings.apiPath;\n    }\n    const request = superagent\n      .get(`${apiPath}${APISUFIX}${req.path}`)\n      .maxResponseSize(settings.maxResponseSize)\n      .responseType('blob');\n    const authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.use(addHeadersFactory(req));\n    request.then(resolve).catch(reject);\n  });\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,iBAAT,QAAkC,kCAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,sBAAsB,GAAIC,GAAD,IACpC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B,MAAM;IAAEC;EAAF,IAAeP,MAArB;EACA,MAAMQ,QAAQ,GAAGD,QAAQ,CAACE,cAAT,GAA0B,EAA1B,GAA+B,UAAhD;EAEA,IAAIC,OAAO,GAAG,EAAd;;EACA,IAAIH,QAAQ,CAACI,eAAT,IAA4BC,UAAhC,EAA4C;IAC1CF,OAAO,GAAGH,QAAQ,CAACI,eAAnB;EACD,CAFD,MAEO,IAAIE,eAAe,IAAIN,QAAQ,CAACO,iBAAhC,EAAmD;IACxDJ,OAAO,GAAGH,QAAQ,CAACO,iBAAnB;EACD,CAFM,MAEA;IACLJ,OAAO,GAAGH,QAAQ,CAACG,OAAnB;EACD;;EACD,MAAMK,OAAO,GAAGhB,UAAU,CACvBiB,GADa,CACR,GAAEN,OAAQ,GAAEF,QAAS,GAAEL,GAAG,CAACc,IAAK,EADxB,EAEbC,eAFa,CAEGX,QAAQ,CAACW,eAFZ,EAGbC,YAHa,CAGA,MAHA,CAAhB;EAIA,MAAMC,SAAS,GAAGjB,GAAG,CAACkB,gBAAJ,CAAqBL,GAArB,CAAyB,YAAzB,CAAlB;;EACA,IAAII,SAAJ,EAAe;IACbL,OAAO,CAACO,GAAR,CAAY,eAAZ,EAA8B,UAASF,SAAU,EAAjD;EACD;;EACDL,OAAO,CAACQ,GAAR,CAAYtB,iBAAiB,CAACE,GAAD,CAA7B;EACAY,OAAO,CAACS,IAAR,CAAanB,OAAb,EAAsBoB,KAAtB,CAA4BnB,MAA5B;AACD,CAtBD,CADK"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}