{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/HeroImageLeft/Edit.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Edit Hero block.\n * @module components/manage/Blocks/Image/Edit\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { Button, Dimmer, Loader, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { createContent } from '@plone/volto/actions';\nimport { Icon, SidebarPortal, LinkMore } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport Data from './Data';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  placeholder: {\n    \"id\": \"Upload a new image\",\n    \"defaultMessage\": \"Upload a new image\"\n  },\n  image: {\n    \"id\": \"Image\",\n    \"defaultMessage\": \"Image\"\n  },\n  browse: {\n    \"id\": \"Browse\",\n    \"defaultMessage\": \"Browse\"\n  },\n  uploading: {\n    \"id\": \"Uploading image\",\n    \"defaultMessage\": \"Uploading image\"\n  }\n});\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\n\nclass EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onUploadImage = this.onUploadImage.bind(this);\n    this.state = {\n      uploading: false\n    };\n    const {\n      Map\n    } = this.props.immutableLib;\n\n    if (!__SERVER__) {\n      const {\n        DefaultDraftBlockRenderMap,\n        EditorState\n      } = props.draftJs;\n      const {\n        stateFromHTML\n      } = props.draftJsImportHtml;\n      const blockTitleRenderMap = Map({\n        unstyled: {\n          element: 'h1'\n        }\n      });\n      const blockDescriptionRenderMap = Map({\n        unstyled: {\n          element: 'div'\n        }\n      });\n      this.extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockTitleRenderMap);\n      this.extendedDescripBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockDescriptionRenderMap);\n      let titleEditorState;\n      let descriptionEditorState;\n\n      if (props.data && props.data.title) {\n        titleEditorState = EditorState.createWithContent(stateFromHTML(props.data.title));\n      } else {\n        titleEditorState = EditorState.createEmpty();\n      }\n\n      if (props.data && props.data.description) {\n        descriptionEditorState = EditorState.createWithContent(stateFromHTML(props.data.description));\n      } else {\n        descriptionEditorState = EditorState.createEmpty();\n      }\n\n      this.state = {\n        uploading: false,\n        titleEditorState,\n        descriptionEditorState,\n        currentFocused: 'title'\n      };\n    }\n\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    if (this.props.selected) {\n      this.titleEditor.focus();\n    }\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded && this.state.uploading) {\n      this.setState({\n        uploading: false\n      });\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        url: nextProps.content['@id']\n      }));\n    }\n\n    const {\n      EditorState\n    } = this.props.draftJs;\n    const {\n      stateFromHTML\n    } = this.props.draftJsImportHtml;\n\n    if (nextProps.data.title && this.props.data.title !== nextProps.data.title && !this.props.selected) {\n      const contentState = stateFromHTML(nextProps.data.title);\n      this.setState({\n        titleEditorState: nextProps.data.title ? EditorState.createWithContent(contentState) : EditorState.createEmpty()\n      });\n    }\n\n    if (nextProps.data.description && this.props.data.description !== nextProps.data.description && !this.props.selected) {\n      const contentState = stateFromHTML(nextProps.data.description);\n      this.setState({\n        descriptionEditorState: nextProps.data.description ? EditorState.createWithContent(contentState) : EditorState.createEmpty()\n      });\n    }\n\n    if (nextProps.selected !== this.props.selected) {\n      if (this.state.currentFocused === 'title') {\n        this.titleEditor.focus();\n      } else {\n        this.descriptionEditor.focus();\n      }\n    }\n  }\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n\n\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data);\n  }\n  /**\n   * Change Title handler\n   * @method onChangeTitle\n   * @param {object} titleEditorState Editor state.\n   * @returns {undefined}\n   */\n\n\n  onChangeTitle(titleEditorState) {\n    this.setState({\n      titleEditorState\n    }, () => {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        title: titleEditorState.getCurrentContent().getPlainText()\n      }));\n    });\n  }\n  /**\n   * Change Description handler\n   * @method onChangeDescription\n   * @param {object} descriptionEditorState Editor state.\n   * @returns {undefined}\n   */\n\n\n  onChangeDescription(descriptionEditorState) {\n    this.setState({\n      descriptionEditorState\n    }, () => {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        description: descriptionEditorState.getCurrentContent().getPlainText()\n      }));\n    });\n  }\n  /**\n   * Upload image handler\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n\n\n  onUploadImage({\n    target\n  }) {\n    const file = target.files[0];\n    this.setState({\n      uploading: true\n    });\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(getBaseUrl(this.props.pathname), {\n        '@type': 'Image',\n        image: {\n          data: fields[3],\n          encoding: fields[2],\n          'content-type': fields[1],\n          filename: file.name\n        }\n      }, this.props.block);\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    if (__SERVER__) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 14\n        }\n      });\n    }\n\n    const {\n      Editor\n    } = this.props.draftJs;\n    const placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.placeholder);\n    return __jsx(\"div\", {\n      className: cx('block hero', {\n        selected: this.props.selected\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 7\n      }\n    }, this.props.selected && this.props.editable && !!this.props.data.url && __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      icon: true,\n      basic: true,\n      onClick: () => this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        url: ''\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: clearSVG,\n      size: \"24px\",\n      color: \"#e40166\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }\n    })))), __jsx(\"div\", {\n      className: \"block-inner-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }, this.props.data.url ? __jsx(\"img\", {\n      className: \"hero-image\",\n      src: `${flattenToAppURL(this.props.data.url)}/@@images/image`,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }) : __jsx(\"div\", {\n      className: \"image-add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }\n    }, __jsx(Message, {\n      className: \"image-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 15\n      }\n    }, this.state.uploading && __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 19\n      }\n    }, __jsx(Loader, {\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage(messages.uploading))), __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    }, __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 19\n      }\n    }, this.props.intl.formatMessage(messages.image)), this.props.editable && __jsx(React.Fragment, null, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 23\n      }\n    }, placeholder), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"ui button file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage(messages.browse), __jsx(\"input\", {\n      type: \"file\",\n      onChange: this.onUploadImage,\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 27\n      }\n    }))))))), __jsx(\"div\", {\n      className: \"hero-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"hero-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }\n    }, __jsx(Editor, {\n      ref: node => {\n        this.titleEditor = node;\n      },\n      readOnly: !this.props.editable,\n      onChange: this.onChangeTitle,\n      editorState: this.state.titleEditorState,\n      blockRenderMap: this.extendedBlockRenderMap,\n      handleReturn: () => true,\n      placeholder: this.props.intl.formatMessage(messages.title),\n      blockStyleFn: () => 'title-editor',\n      onUpArrow: () => {\n        const selectionState = this.state.titleEditorState.getSelection();\n        const {\n          titleEditorState\n        } = this.state;\n\n        if (titleEditorState.getCurrentContent().getBlockMap().first().getKey() === selectionState.getFocusKey()) {\n          this.props.onFocusPreviousBlock(this.props.block, this.props.blockNode.current);\n        }\n      },\n      onDownArrow: () => {\n        const selectionState = this.state.titleEditorState.getSelection();\n        const {\n          titleEditorState\n        } = this.state;\n\n        if (titleEditorState.getCurrentContent().getBlockMap().last().getKey() === selectionState.getFocusKey()) {\n          this.setState(() => ({\n            currentFocused: 'description'\n          }));\n          this.descriptionEditor.focus();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 15\n      }\n    }), __jsx(Editor, {\n      ref: node => {\n        this.descriptionEditor = node;\n      },\n      readOnly: !this.props.editable,\n      onChange: this.onChangeDescription,\n      editorState: this.state.descriptionEditorState,\n      blockRenderMap: this.extendedDescripBlockRenderMap,\n      handleReturn: () => true,\n      placeholder: this.props.intl.formatMessage(messages.description),\n      blockStyleFn: () => 'description-editor',\n      onUpArrow: () => {\n        const selectionState = this.state.descriptionEditorState.getSelection();\n        const currentCursorPosition = selectionState.getStartOffset();\n\n        if (currentCursorPosition === 0) {\n          this.setState(() => ({\n            currentFocused: 'title'\n          }));\n          this.titleEditor.focus();\n        }\n      },\n      onDownArrow: () => {\n        const selectionState = this.state.descriptionEditorState.getSelection();\n        const {\n          descriptionEditorState\n        } = this.state;\n        const currentCursorPosition = selectionState.getStartOffset();\n        const blockLength = descriptionEditorState.getCurrentContent().getFirstBlock().getLength();\n\n        if (currentCursorPosition === blockLength) {\n          this.props.onFocusNextBlock(this.props.block, this.props.blockNode.current);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 15\n      }\n    })), __jsx(LinkMore, {\n      data: this.props.data,\n      isEditMode: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 13\n      }\n    }))), __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }\n    }, __jsx(Data, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(EditComponent, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  content: PropTypes.objectOf(PropTypes.any),\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n  createContent: PropTypes.func.isRequired,\n  editable: PropTypes.bool\n});\n\n_defineProperty(EditComponent, \"defaultProps\", {\n  editable: true\n});\n\nconst Edit = injectLazyLibs(['draftJs', 'immutableLib', 'draftJsImportHtml'])(EditComponent);\nexport default compose(injectIntl, connect((state, ownProps) => {\n  var _state$content$subreq;\n\n  return {\n    request: state.content.subrequests[ownProps.block] || {},\n    content: (_state$content$subreq = state.content.subrequests[ownProps.block]) === null || _state$content$subreq === void 0 ? void 0 : _state$content$subreq.data\n  };\n}, {\n  createContent\n}))(Edit);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","readAsDataURL","Button","Dimmer","Loader","Message","defineMessages","injectIntl","cx","injectLazyLibs","flattenToAppURL","getBaseUrl","createContent","Icon","SidebarPortal","LinkMore","clearSVG","Data","messages","title","description","placeholder","image","browse","uploading","EditComponent","constructor","props","onUploadImage","bind","state","Map","immutableLib","__SERVER__","DefaultDraftBlockRenderMap","EditorState","draftJs","stateFromHTML","draftJsImportHtml","blockTitleRenderMap","unstyled","element","blockDescriptionRenderMap","extendedBlockRenderMap","merge","extendedDescripBlockRenderMap","titleEditorState","descriptionEditorState","data","createWithContent","createEmpty","currentFocused","onChangeTitle","onChangeDescription","componentDidMount","selected","titleEditor","focus","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","setState","onChangeBlock","block","url","content","contentState","descriptionEditor","shouldComponentUpdate","getCurrentContent","getPlainText","target","file","files","then","fields","match","pathname","encoding","filename","name","render","Editor","intl","formatMessage","editable","display","node","selectionState","getSelection","getBlockMap","first","getKey","getFocusKey","onFocusPreviousBlock","blockNode","current","last","currentCursorPosition","getStartOffset","blockLength","getFirstBlock","getLength","onFocusNextBlock","bool","isRequired","string","index","number","objectOf","any","shape","func","onSelectBlock","onDeleteBlock","handleKeyDown","Edit","ownProps","subrequests"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/HeroImageLeft/Edit.jsx"],"sourcesContent":["/**\n * Edit Hero block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { Button, Dimmer, Loader, Message } from 'semantic-ui-react';\nimport { isEqual } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { createContent } from '@plone/volto/actions';\nimport { Icon, SidebarPortal, LinkMore } from '@plone/volto/components';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nimport Data from './Data';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  placeholder: {\n    id: 'Upload a new image',\n    defaultMessage: 'Upload a new image',\n  },\n  image: {\n    id: 'Image',\n    defaultMessage: 'Image',\n  },\n  browse: {\n    id: 'Browse',\n    defaultMessage: 'Browse',\n  },\n  uploading: {\n    id: 'Uploading image',\n    defaultMessage: 'Uploading image',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    content: PropTypes.objectOf(PropTypes.any),\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    createContent: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    editable: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onUploadImage = this.onUploadImage.bind(this);\n    this.state = {\n      uploading: false,\n    };\n\n    const { Map } = this.props.immutableLib;\n\n    if (!__SERVER__) {\n      const { DefaultDraftBlockRenderMap, EditorState } = props.draftJs;\n      const { stateFromHTML } = props.draftJsImportHtml;\n\n      const blockTitleRenderMap = Map({\n        unstyled: {\n          element: 'h1',\n        },\n      });\n\n      const blockDescriptionRenderMap = Map({\n        unstyled: {\n          element: 'div',\n        },\n      });\n\n      this.extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(\n        blockTitleRenderMap,\n      );\n\n      this.extendedDescripBlockRenderMap = DefaultDraftBlockRenderMap.merge(\n        blockDescriptionRenderMap,\n      );\n\n      let titleEditorState;\n      let descriptionEditorState;\n      if (props.data && props.data.title) {\n        titleEditorState = EditorState.createWithContent(\n          stateFromHTML(props.data.title),\n        );\n      } else {\n        titleEditorState = EditorState.createEmpty();\n      }\n      if (props.data && props.data.description) {\n        descriptionEditorState = EditorState.createWithContent(\n          stateFromHTML(props.data.description),\n        );\n      } else {\n        descriptionEditorState = EditorState.createEmpty();\n      }\n      this.state = {\n        uploading: false,\n        titleEditorState,\n        descriptionEditorState,\n        currentFocused: 'title',\n      };\n    }\n\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      this.titleEditor.focus();\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.request.loading &&\n      nextProps.request.loaded &&\n      this.state.uploading\n    ) {\n      this.setState({\n        uploading: false,\n      });\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        url: nextProps.content['@id'],\n      });\n    }\n\n    const { EditorState } = this.props.draftJs;\n    const { stateFromHTML } = this.props.draftJsImportHtml;\n\n    if (\n      nextProps.data.title &&\n      this.props.data.title !== nextProps.data.title &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.data.title);\n      this.setState({\n        titleEditorState: nextProps.data.title\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (\n      nextProps.data.description &&\n      this.props.data.description !== nextProps.data.description &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.data.description);\n      this.setState({\n        descriptionEditorState: nextProps.data.description\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (nextProps.selected !== this.props.selected) {\n      if (this.state.currentFocused === 'title') {\n        this.titleEditor.focus();\n      } else {\n        this.descriptionEditor.focus();\n      }\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !isEqual(this.props.data, nextProps.data);\n  }\n\n  /**\n   * Change Title handler\n   * @method onChangeTitle\n   * @param {object} titleEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeTitle(titleEditorState) {\n    this.setState({ titleEditorState }, () => {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        title: titleEditorState.getCurrentContent().getPlainText(),\n      });\n    });\n  }\n\n  /**\n   * Change Description handler\n   * @method onChangeDescription\n   * @param {object} descriptionEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeDescription(descriptionEditorState) {\n    this.setState({ descriptionEditorState }, () => {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        description: descriptionEditorState.getCurrentContent().getPlainText(),\n      });\n    });\n  }\n\n  /**\n   * Upload image handler\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n  onUploadImage({ target }) {\n    const file = target.files[0];\n    this.setState({\n      uploading: true,\n    });\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(\n        getBaseUrl(this.props.pathname),\n        {\n          '@type': 'Image',\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name,\n          },\n        },\n        this.props.block,\n      );\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n    const { Editor } = this.props.draftJs;\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n\n    return (\n      <div\n        className={cx('block hero', {\n          selected: this.props.selected,\n        })}\n      >\n        {this.props.selected && this.props.editable && !!this.props.data.url && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={() =>\n                  this.props.onChangeBlock(this.props.block, {\n                    ...this.props.data,\n                    url: '',\n                  })\n                }\n              >\n                <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        <div className=\"block-inner-wrapper\">\n          {this.props.data.url ? (\n            <img\n              className=\"hero-image\"\n              src={`${flattenToAppURL(this.props.data.url)}/@@images/image`}\n              alt=\"\"\n            />\n          ) : (\n            <div className=\"image-add\">\n              <Message className=\"image-message\">\n                {this.state.uploading && (\n                  <Dimmer active>\n                    <Loader indeterminate>\n                      {this.props.intl.formatMessage(messages.uploading)}\n                    </Loader>\n                  </Dimmer>\n                )}\n                <center>\n                  <h4>{this.props.intl.formatMessage(messages.image)}</h4>\n                  {this.props.editable && (\n                    <>\n                      <p>{placeholder}</p>\n                      <p>\n                        <label className=\"ui button file\">\n                          {this.props.intl.formatMessage(messages.browse)}\n                          <input\n                            type=\"file\"\n                            onChange={this.onUploadImage}\n                            style={{ display: 'none' }}\n                          />\n                        </label>\n                      </p>\n                    </>\n                  )}\n                </center>\n              </Message>\n            </div>\n          )}\n          <div className=\"hero-body\">\n            <div className=\"hero-text\">\n              <Editor\n                ref={(node) => {\n                  this.titleEditor = node;\n                }}\n                readOnly={!this.props.editable}\n                onChange={this.onChangeTitle}\n                editorState={this.state.titleEditorState}\n                blockRenderMap={this.extendedBlockRenderMap}\n                handleReturn={() => true}\n                placeholder={this.props.intl.formatMessage(messages.title)}\n                blockStyleFn={() => 'title-editor'}\n                onUpArrow={() => {\n                  const selectionState = this.state.titleEditorState.getSelection();\n                  const { titleEditorState } = this.state;\n                  if (\n                    titleEditorState\n                      .getCurrentContent()\n                      .getBlockMap()\n                      .first()\n                      .getKey() === selectionState.getFocusKey()\n                  ) {\n                    this.props.onFocusPreviousBlock(\n                      this.props.block,\n                      this.props.blockNode.current,\n                    );\n                  }\n                }}\n                onDownArrow={() => {\n                  const selectionState = this.state.titleEditorState.getSelection();\n                  const { titleEditorState } = this.state;\n                  if (\n                    titleEditorState\n                      .getCurrentContent()\n                      .getBlockMap()\n                      .last()\n                      .getKey() === selectionState.getFocusKey()\n                  ) {\n                    this.setState(() => ({ currentFocused: 'description' }));\n                    this.descriptionEditor.focus();\n                  }\n                }}\n              />\n              <Editor\n                ref={(node) => {\n                  this.descriptionEditor = node;\n                }}\n                readOnly={!this.props.editable}\n                onChange={this.onChangeDescription}\n                editorState={this.state.descriptionEditorState}\n                blockRenderMap={this.extendedDescripBlockRenderMap}\n                handleReturn={() => true}\n                placeholder={this.props.intl.formatMessage(\n                  messages.description,\n                )}\n                blockStyleFn={() => 'description-editor'}\n                onUpArrow={() => {\n                  const selectionState = this.state.descriptionEditorState.getSelection();\n                  const currentCursorPosition = selectionState.getStartOffset();\n\n                  if (currentCursorPosition === 0) {\n                    this.setState(() => ({ currentFocused: 'title' }));\n                    this.titleEditor.focus();\n                  }\n                }}\n                onDownArrow={() => {\n                  const selectionState = this.state.descriptionEditorState.getSelection();\n                  const { descriptionEditorState } = this.state;\n                  const currentCursorPosition = selectionState.getStartOffset();\n                  const blockLength = descriptionEditorState\n                    .getCurrentContent()\n                    .getFirstBlock()\n                    .getLength();\n\n                  if (currentCursorPosition === blockLength) {\n                    this.props.onFocusNextBlock(\n                      this.props.block,\n                      this.props.blockNode.current,\n                    );\n                  }\n                }}\n              />\n            </div>\n            <LinkMore data={this.props.data} isEditMode={true} />\n          </div>\n        </div>\n        <SidebarPortal selected={this.props.selected}>\n          <Data {...this.props} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nconst Edit = injectLazyLibs(['draftJs', 'immutableLib', 'draftJsImportHtml'])(\n  EditComponent,\n);\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, ownProps) => ({\n      request: state.content.subrequests[ownProps.block] || {},\n      content: state.content.subrequests[ownProps.block]?.data,\n    }),\n    { createContent },\n  ),\n)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Upload a new image","defaultMessage":"Upload a new image"},{"id":"Image","defaultMessage":"Image"},{"id":"Browse","defaultMessage":"Browse"},{"id":"Uploading image","defaultMessage":"Uploading image"}]}},"sourceType":"module"}