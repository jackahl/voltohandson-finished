{"ast":null,"code":"const _excluded = [\"icon\", \"active\"];\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/StyleMenu/StyleMenu.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport { isBlockStyleActive, isInlineStyleActive, toggleStyle } from './utils';\nimport config from '@plone/volto/registry';\nimport { ToolbarButton } from '@plone/volto-slate/editor/ui';\nimport paintSVG from '@plone/volto/icons/paint.svg';\nconst messages = defineMessages({\n  inlineStyle: {\n    \"id\": \"Inline Style\",\n    \"defaultMessage\": \"Inline Style\"\n  },\n  paragraphStyle: {\n    \"id\": \"Paragraph Style\",\n    \"defaultMessage\": \"Paragraph Style\"\n  },\n  additionalStyles: {\n    \"id\": \"Additional Styles\",\n    \"defaultMessage\": \"Additional Styles\"\n  }\n});\n\nconst StyleMenuButton = _ref => {\n  let {\n    icon,\n    active\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return __jsx(ToolbarButton, _extends({}, props, {\n    icon: icon,\n    active: active,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 3\n    }\n  }));\n};\n\nconst MenuOpts = ({\n  editor,\n  toSelect,\n  option\n}) => {\n  const isActive = toSelect.includes(option);\n  return __jsx(Dropdown.Item, _extends({\n    as: \"span\",\n    active: isActive,\n    className: cx({\n      active: isActive\n    })\n  }, option, {\n    onClick: (event, selItem) => {\n      toggleStyle(editor, {\n        cssClass: selItem.value,\n        isBlock: selItem.isBlock\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst StylingsButton = props => {\n  var _config$settings$slat;\n\n  const editor = useSlate();\n  const intl = useIntl(); // Converting the settings to a format that is required by dropdowns.\n\n  const inlineOpts = [...config.settings.slate.styleMenu.inlineStyles.map(def => {\n    return {\n      value: def.cssClass,\n      text: def.label,\n      icon: def.icon,\n      isBlock: false\n    };\n  })];\n  const blockOpts = [...config.settings.slate.styleMenu.blockStyles.map(def => {\n    return {\n      value: def.cssClass,\n      text: def.label,\n      icon: def.icon,\n      isBlock: true\n    };\n  })]; // Calculating the initial selection.\n\n  const toSelect = []; // block styles\n\n  for (const val of blockOpts) {\n    const ia = isBlockStyleActive(editor, val.value);\n\n    if (ia) {\n      toSelect.push(val);\n    }\n  } // inline styles\n\n\n  for (const val of inlineOpts) {\n    const ia = isInlineStyleActive(editor, val.value);\n\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n\n  const menuItemProps = {\n    toSelect,\n    editor\n  };\n  const showMenu = inlineOpts.length || blockOpts.length;\n  return showMenu ? __jsx(Dropdown, {\n    id: \"style-menu\",\n    pointing: \" top left\",\n    multiple: true,\n    value: toSelect,\n    disabled: (_config$settings$slat = config.settings.slate.styleMenu.disabled) !== null && _config$settings$slat !== void 0 ? _config$settings$slat : false,\n    additionLabel: intl.formatMessage(messages.additionalStyles),\n    trigger: __jsx(StyleMenuButton, {\n      title: intl.formatMessage(messages.additionalStyles),\n      icon: paintSVG,\n      active: toSelect.length > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, inlineOpts.length && __jsx(React.Fragment, null, __jsx(Dropdown.Header, {\n    content: intl.formatMessage(messages.inlineStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), inlineOpts.map(option => __jsx(MenuOpts, _extends({}, menuItemProps, {\n    option: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 15\n    }\n  })))), blockOpts.length && __jsx(React.Fragment, null, __jsx(Dropdown.Header, {\n    content: intl.formatMessage(messages.paragraphStyle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), blockOpts.map(option => __jsx(MenuOpts, _extends({}, menuItemProps, {\n    option: option,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  })))))) : '';\n};\n\nexport default StylingsButton;","map":{"version":3,"names":["React","useSlate","Dropdown","useIntl","defineMessages","cx","isBlockStyleActive","isInlineStyleActive","toggleStyle","config","ToolbarButton","paintSVG","messages","inlineStyle","paragraphStyle","additionalStyles","StyleMenuButton","icon","active","props","MenuOpts","editor","toSelect","option","isActive","includes","event","selItem","cssClass","value","isBlock","StylingsButton","intl","inlineOpts","settings","slate","styleMenu","inlineStyles","map","def","text","label","blockOpts","blockStyles","val","ia","push","menuItemProps","showMenu","length","disabled","formatMessage"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/StyleMenu/StyleMenu.jsx"],"sourcesContent":["import React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport { isBlockStyleActive, isInlineStyleActive, toggleStyle } from './utils';\nimport config from '@plone/volto/registry';\nimport { ToolbarButton } from '@plone/volto-slate/editor/ui';\nimport paintSVG from '@plone/volto/icons/paint.svg';\n\nconst messages = defineMessages({\n  inlineStyle: {\n    id: 'Inline Style',\n    defaultMessage: 'Inline Style',\n  },\n  paragraphStyle: {\n    id: 'Paragraph Style',\n    defaultMessage: 'Paragraph Style',\n  },\n  additionalStyles: {\n    id: 'Additional Styles',\n    defaultMessage: 'Additional Styles',\n  },\n});\n\nconst StyleMenuButton = ({ icon, active, ...props }) => (\n  <ToolbarButton {...props} icon={icon} active={active} />\n);\n\nconst MenuOpts = ({ editor, toSelect, option }) => {\n  const isActive = toSelect.includes(option);\n  return (\n    <Dropdown.Item\n      as=\"span\"\n      active={isActive}\n      className={cx({ active: isActive })}\n      {...option}\n      onClick={(event, selItem) => {\n        toggleStyle(editor, {\n          cssClass: selItem.value,\n          isBlock: selItem.isBlock,\n        });\n      }}\n    />\n  );\n};\n\nconst StylingsButton = (props) => {\n  const editor = useSlate();\n  const intl = useIntl();\n\n  // Converting the settings to a format that is required by dropdowns.\n  const inlineOpts = [\n    ...config.settings.slate.styleMenu.inlineStyles.map((def) => {\n      return {\n        value: def.cssClass,\n        text: def.label,\n        icon: def.icon,\n        isBlock: false,\n      };\n    }),\n  ];\n  const blockOpts = [\n    ...config.settings.slate.styleMenu.blockStyles.map((def) => {\n      return {\n        value: def.cssClass,\n        text: def.label,\n        icon: def.icon,\n        isBlock: true,\n      };\n    }),\n  ];\n\n  // Calculating the initial selection.\n  const toSelect = [];\n  // block styles\n  for (const val of blockOpts) {\n    const ia = isBlockStyleActive(editor, val.value);\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n  // inline styles\n  for (const val of inlineOpts) {\n    const ia = isInlineStyleActive(editor, val.value);\n    if (ia) {\n      toSelect.push(val);\n    }\n  }\n\n  const menuItemProps = {\n    toSelect,\n    editor,\n  };\n  const showMenu = inlineOpts.length || blockOpts.length;\n  return showMenu ? (\n    <Dropdown\n      id=\"style-menu\"\n      pointing=\" top left\"\n      multiple\n      value={toSelect}\n      disabled={config.settings.slate.styleMenu.disabled ?? false}\n      additionLabel={intl.formatMessage(messages.additionalStyles)}\n      trigger={\n        <StyleMenuButton\n          title={intl.formatMessage(messages.additionalStyles)}\n          icon={paintSVG}\n          active={toSelect.length > 0}\n        />\n      }\n    >\n      <Dropdown.Menu>\n        {inlineOpts.length && (\n          <>\n            <Dropdown.Header\n              content={intl.formatMessage(messages.inlineStyle)}\n            />\n            {inlineOpts.map((option) => (\n              <MenuOpts {...menuItemProps} option={option} />\n            ))}\n          </>\n        )}\n\n        {blockOpts.length && (\n          <>\n            <Dropdown.Header\n              content={intl.formatMessage(messages.paragraphStyle)}\n            />\n            {blockOpts.map((option) => (\n              <MenuOpts {...menuItemProps} option={option} />\n            ))}\n          </>\n        )}\n      </Dropdown.Menu>\n    </Dropdown>\n  ) : (\n    ''\n  );\n};\n\nexport default StylingsButton;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Inline Style","defaultMessage":"Inline Style"},{"id":"Paragraph Style","defaultMessage":"Paragraph Style"},{"id":"Additional Styles","defaultMessage":"Additional Styles"}]}},"sourceType":"module"}