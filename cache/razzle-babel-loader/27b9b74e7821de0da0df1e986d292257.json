{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/TokenWidget.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * TokenWidget component.\n * @module components/manage/Widgets/TokenWidget\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\nimport { Option, DropdownIndicator, ClearIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n/**\n * TokenWidget component class.\n *\n * Because new terms are created through the web by using the widget, the token\n * widget conflates the meaning of token, label and value and assumes they can\n * be used interchangeably.\n *\n * @class TokenWidget\n * @extends Component\n */\n\nclass TokenWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    var _this$props$choices;\n\n    if (!((_this$props$choices = this.props.choices) !== null && _this$props$choices !== void 0 && _this$props$choices.length)) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    var _this$props$choices2;\n\n    if (!((_this$props$choices2 = this.props.choices) !== null && _this$props$choices2 !== void 0 && _this$props$choices2.length) && this.props.vocabLoading === undefined && !this.props.vocabLoaded) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n\n\n  handleChange(selectedOption) {\n    this.props.onChange(this.props.id, selectedOption ? selectedOption.map(item => item.label) : null);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    var _this$props$placehold;\n\n    const selectedOption = this.props.value ? this.props.value.map(item => ({\n      label: item,\n      value: item\n    })) : [];\n    const defaultOptions = (this.props.choices || []).filter(item => !selectedOption.find(({\n      label\n    }) => label === item.label)).map(item => ({\n      label: item.label || item.value,\n      value: item.value\n    }));\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }), __jsx(CreatableSelect, {\n      id: `field-${this.props.id}`,\n      key: this.props.id,\n      isDisabled: this.props.isDisabled,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      defaultOptions: defaultOptions,\n      options: defaultOptions,\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: {\n        ClearIndicator,\n        DropdownIndicator,\n        Option\n      },\n      isMulti: true,\n      value: selectedOption || [],\n      onChange: this.handleChange,\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      noOptionsMessage: () => this.props.intl.formatMessage(messages.no_options),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\n_defineProperty(TokenWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.object),\n  vocabLoading: PropTypes.bool,\n  vocabLoaded: PropTypes.bool,\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n\n_defineProperty(TokenWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null\n});\n\nexport default compose(injectIntl, injectLazyLibs(['reactSelectCreateable']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n\n  const vocabBaseUrl = getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props);\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale];\n\n  if (vocabState) {\n    return {\n      choices: vocabState.items ? vocabState.items.map(item => ({\n        label: item.label || item.value,\n        value: item.value\n      })) : [],\n      vocabLoading: vocabState.loading,\n      vocabLoaded: vocabState.loaded,\n      vocabBaseUrl,\n      lang: state.intl.locale\n    };\n  }\n\n  return {\n    vocabBaseUrl,\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary\n}))(TokenWidget);","map":{"version":3,"names":["React","Component","PropTypes","compose","connect","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","getVocabulary","Option","DropdownIndicator","ClearIndicator","selectTheme","customSelectStyles","FormFieldWrapper","injectLazyLibs","messages","select","no_options","TokenWidget","constructor","props","handleChange","bind","componentDidMount","choices","length","vocabNameOrURL","vocabBaseUrl","size","subrequest","lang","componentDidUpdate","vocabLoading","undefined","vocabLoaded","selectedOption","onChange","id","map","item","label","render","value","defaultOptions","filter","find","CreatableSelect","reactSelectCreateable","default","isDisabled","placeholder","intl","formatMessage","string","isRequired","title","description","required","bool","error","arrayOf","func","object","items","shape","vocabulary","widgetOptions","wrapped","state","vocabState","vocabularies","subrequests","locale","loading","loaded"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Widgets/TokenWidget.jsx"],"sourcesContent":["/**\n * TokenWidget component.\n * @module components/manage/Widgets/TokenWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\n\nimport {\n  Option,\n  DropdownIndicator,\n  ClearIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * TokenWidget component class.\n *\n * Because new terms are created through the web by using the widget, the token\n * widget conflates the meaning of token, label and value and assumes they can\n * be used interchangeably.\n *\n * @class TokenWidget\n * @extends Component\n */\nclass TokenWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(PropTypes.object),\n    vocabLoading: PropTypes.bool,\n    vocabLoaded: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func.isRequired,\n    wrapped: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.choices?.length) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (\n      !this.props.choices?.length &&\n      this.props.vocabLoading === undefined &&\n      !this.props.vocabLoaded\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.label) : null,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const selectedOption = this.props.value\n      ? this.props.value.map((item) => ({ label: item, value: item }))\n      : [];\n\n    const defaultOptions = (this.props.choices || [])\n      .filter(\n        (item) => !selectedOption.find(({ label }) => label === item.label),\n      )\n      .map((item) => ({\n        label: item.label || item.value,\n        value: item.value,\n      }));\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <CreatableSelect\n          id={`field-${this.props.id}`}\n          key={this.props.id}\n          isDisabled={this.props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          defaultOptions={defaultOptions}\n          options={defaultOptions}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{ ClearIndicator, DropdownIndicator, Option }}\n          isMulti\n          value={selectedOption || []}\n          onChange={this.handleChange}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          noOptionsMessage={() =>\n            this.props.intl.formatMessage(messages.no_options)\n          }\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactSelectCreateable']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      if (vocabState) {\n        return {\n          choices: vocabState.items\n            ? vocabState.items.map((item) => ({\n                label: item.label || item.value,\n                value: item.value,\n              }))\n            : [],\n          vocabLoading: vocabState.loading,\n          vocabLoaded: vocabState.loaded,\n          vocabBaseUrl,\n          lang: state.intl.locale,\n        };\n      }\n      return { vocabBaseUrl, lang: state.intl.locale };\n    },\n    { getVocabulary },\n  ),\n)(TokenWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module"}