{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\";\nimport config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nimport { hasNonValueOperation, hasDateOperation } from './utils';\nconst messages = defineMessages({\n  searchBlock: {\n    \"id\": \"Search block\",\n    \"defaultMessage\": \"Search block\"\n  },\n  controls: {\n    \"id\": \"Controls\",\n    \"defaultMessage\": \"Controls\"\n  },\n  baseSearchQuery: {\n    \"id\": \"Base search query\",\n    \"defaultMessage\": \"Base search query\"\n  },\n  sectionTitle: {\n    \"id\": \"Section title\",\n    \"defaultMessage\": \"Section title\"\n  },\n  headline: {\n    \"id\": \"Headline\",\n    \"defaultMessage\": \"Headline\"\n  },\n  searchInputPrompt: {\n    \"id\": \"Search input label\",\n    \"defaultMessage\": \"Search input label\"\n  },\n  showSearchInput: {\n    \"id\": \"Show search input?\",\n    \"defaultMessage\": \"Show search input?\"\n  },\n  showSearchButtonTitle: {\n    \"id\": \"Show search button?\",\n    \"defaultMessage\": \"Show search button?\"\n  },\n  showSearchButtonDescription: {\n    \"id\": \"The button presence disables the live search, the query is issued when you press ENTER\",\n    \"defaultMessage\": \"The button presence disables the live search, the query is issued when you press ENTER\"\n  },\n  searchButtonLabel: {\n    \"id\": \"Search button label\",\n    \"defaultMessage\": \"Search button label\"\n  },\n  searchButtonPlaceholder: {\n    \"id\": \"Search\",\n    \"defaultMessage\": \"Search\"\n  },\n  showSortOn: {\n    \"id\": \"Show sorting?\",\n    \"defaultMessage\": \"Show sorting?\"\n  },\n  sortOnLabel: {\n    \"id\": \"Sort on label\",\n    \"defaultMessage\": \"Sort on label\"\n  },\n  sortOnOptions: {\n    \"id\": \"Sort on options\",\n    \"defaultMessage\": \"Sort on options\"\n  },\n  facets: {\n    \"id\": \"Facets\",\n    \"defaultMessage\": \"Facets\"\n  },\n  facet: {\n    \"id\": \"Facet\",\n    \"defaultMessage\": \"Facet\"\n  },\n  label: {\n    \"id\": \"Label\",\n    \"defaultMessage\": \"Label\"\n  },\n  field: {\n    \"id\": \"Field\",\n    \"defaultMessage\": \"Field\"\n  },\n  multipleChoices: {\n    \"id\": \"Multiple choices?\",\n    \"defaultMessage\": \"Multiple choices?\"\n  },\n  hideFacetTitle: {\n    \"id\": \"Hide facet?\",\n    \"defaultMessage\": \"Hide facet?\"\n  },\n  hideFacetDescription: {\n    \"id\": \"Hidden facets will still filter the results if proper parameters are passed in URLs\",\n    \"defaultMessage\": \"Hidden facets will still filter the results if proper parameters are passed in URLs\"\n  },\n  facetWidget: {\n    \"id\": \"Facet widget\",\n    \"defaultMessage\": \"Facet widget\"\n  },\n  showTotalResults: {\n    \"id\": \"Show total results\",\n    \"defaultMessage\": \"Show total results\"\n  }\n});\n\nconst enhanceSchema = (originalSchema, formData) => {\n  var _activeItem;\n\n  const extensionName = 'facetWidgets';\n  const extensionType = 'type'; // property name in stored block data\n\n  const variations = config.blocks.blocksConfig.search.extensions[extensionName].types;\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionType];\n  let activeItem = variations === null || variations === void 0 ? void 0 : variations.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = variations === null || variations === void 0 ? void 0 : variations.find(item => item.isDefault);\n  const schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n  let schema = schemaEnhancer ? schemaEnhancer({\n    schema: _cloneDeep(originalSchema),\n    formData\n  }) : _cloneDeep(originalSchema);\n  return schema;\n};\n\nconst FacetSchema = _ref => {\n  let {\n    intl\n  } = _ref;\n  return {\n    title: intl.formatMessage(messages.facet),\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'field', 'type', 'hidden']\n    }],\n    properties: {\n      title: {\n        title: intl.formatMessage(messages.label)\n      },\n      field: {\n        title: intl.formatMessage(messages.field),\n        widget: 'select_querystring_field',\n        vocabulary: {\n          '@id': 'plone.app.vocabularies.MetadataFields'\n        },\n        filterOptions: options => {\n          // Only allows indexes that provide simple, fixed vocabularies.\n          // This should be improved, together with the facets. The querystring\n          // widget implementation should serve as inspiration for those dynamic\n          // types of facets.\n          return Object.assign({}, ...Object.keys(options).map(k => Object.keys(options[k].values || {}).length || hasNonValueOperation(options[k].operations) || hasDateOperation(options[k].operations) ? {\n            [k]: options[k]\n          } : {}));\n        }\n      },\n      multiple: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.multipleChoices),\n        default: false\n      },\n      hidden: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.hideFacetTitle),\n        default: false,\n        description: intl.formatMessage(messages.hideFacetDescription)\n      },\n      type: {\n        title: intl.formatMessage(messages.facetWidget),\n        choices: config.blocks.blocksConfig.search.extensions.facetWidgets.types.map(_ref2 => {\n          let {\n            id,\n            title\n          } = _ref2;\n          return [id, title];\n        }),\n        defaultValue: config.blocks.blocksConfig.search.extensions.facetWidgets.types.find(_ref3 => {\n          let {\n            isDefault\n          } = _ref3;\n          return isDefault;\n        }).id\n      }\n    },\n    required: ['field']\n  };\n};\n\n_c = FacetSchema;\nexport default (_ref4 => {\n  var _data$showSearchInput;\n\n  let {\n    data = {},\n    intl\n  } = _ref4;\n  return {\n    title: intl.formatMessage(messages.searchBlock),\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['headline']\n    }, {\n      id: 'searchquery',\n      title: intl.formatMessage(messages.baseSearchQuery),\n      fields: ['query']\n    }, {\n      id: 'facets',\n      title: intl.formatMessage(messages.facets),\n      fields: ['facetsTitle', 'facets']\n    }, {\n      id: 'controls',\n      title: intl.formatMessage(messages.controls),\n      fields: ['showSortOn', ...(data.showSortOn ? ['sortOnLabel'] : []), ...(data.showSortOn ? ['sortOnOptions'] : []), 'showSearchInput', ...(((_data$showSearchInput = data.showSearchInput) !== null && _data$showSearchInput !== void 0 ? _data$showSearchInput : true) ? ['showSearchButton'] : []), // ...(data.showSearchInput ? ['searchInputPrompt'] : []),\n      // ...(data.showSearchButton ? ['searchButtonLabel'] : []),\n      'showTotalResults']\n    }],\n    properties: {\n      headline: {\n        title: intl.formatMessage(messages.headline)\n      },\n      searchInputPrompt: {\n        title: intl.formatMessage(messages.searchInputPrompt)\n      },\n      showSearchInput: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchInput),\n        default: true\n      },\n      showSearchButton: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchButtonTitle),\n        description: intl.formatMessage(messages.showSearchButtonDescription)\n      },\n      showTotalResults: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showTotalResults),\n        default: true\n      },\n      searchButtonLabel: {\n        title: intl.formatMessage(messages.searchButtonLabel),\n        placeholder: intl.formatMessage(messages.searchButtonPlaceholder)\n      },\n      showSortOn: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSortOn)\n      },\n      sortOnLabel: {\n        title: intl.formatMessage(messages.sortOnLabel)\n      },\n      sortOnOptions: {\n        title: intl.formatMessage(messages.sortOnOptions),\n        widget: 'array'\n      },\n      facets: {\n        title: intl.formatMessage(messages.facets),\n        widget: 'object_list',\n        schema: FacetSchema({\n          intl\n        }),\n        schemaExtender: enhanceSchema\n      },\n      facetsTitle: {\n        title: intl.formatMessage(messages.sectionTitle)\n      },\n      query: {\n        title: 'Query'\n      }\n    },\n    required: []\n  };\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"FacetSchema\");","map":{"version":3,"names":["config","defineMessages","hasNonValueOperation","hasDateOperation","messages","searchBlock","controls","baseSearchQuery","sectionTitle","headline","searchInputPrompt","showSearchInput","showSearchButtonTitle","showSearchButtonDescription","searchButtonLabel","searchButtonPlaceholder","showSortOn","sortOnLabel","sortOnOptions","facets","facet","label","field","multipleChoices","hideFacetTitle","hideFacetDescription","facetWidget","showTotalResults","enhanceSchema","originalSchema","formData","extensionName","extensionType","variations","blocks","blocksConfig","search","extensions","types","activeItemName","activeItem","find","item","id","isDefault","schemaEnhancer","schema","FacetSchema","intl","title","formatMessage","fieldsets","fields","properties","widget","vocabulary","filterOptions","options","Object","assign","keys","map","k","values","length","operations","multiple","type","default","hidden","description","choices","facetWidgets","defaultValue","required","data","showSearchButton","placeholder","schemaExtender","facetsTitle","query"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Search/schema.js"],"sourcesContent":["import config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nimport { cloneDeep } from 'lodash';\nimport { hasNonValueOperation, hasDateOperation } from './utils';\n\nconst messages = defineMessages({\n  searchBlock: {\n    id: 'Search block',\n    defaultMessage: 'Search block',\n  },\n  controls: {\n    id: 'Controls',\n    defaultMessage: 'Controls',\n  },\n  baseSearchQuery: {\n    id: 'Base search query',\n    defaultMessage: 'Base search query',\n  },\n  sectionTitle: {\n    id: 'Section title',\n    defaultMessage: 'Section title',\n  },\n  headline: {\n    id: 'Headline',\n    defaultMessage: 'Headline',\n  },\n  searchInputPrompt: {\n    id: 'Search input label',\n    defaultMessage: 'Search input label',\n  },\n  showSearchInput: {\n    id: 'Show search input?',\n    defaultMessage: 'Show search input?',\n  },\n  showSearchButtonTitle: {\n    id: 'Show search button?',\n    defaultMessage: 'Show search button?',\n  },\n  showSearchButtonDescription: {\n    id:\n      'The button presence disables the live search, the query is issued when you press ENTER',\n    defaultMessage:\n      'The button presence disables the live search, the query is issued when you press ENTER',\n  },\n  searchButtonLabel: {\n    id: 'Search button label',\n    defaultMessage: 'Search button label',\n  },\n  searchButtonPlaceholder: {\n    id: 'Search',\n    defaultMessage: 'Search',\n  },\n  showSortOn: {\n    id: 'Show sorting?',\n    defaultMessage: 'Show sorting?',\n  },\n  sortOnLabel: {\n    id: 'Sort on label',\n    defaultMessage: 'Sort on label',\n  },\n  sortOnOptions: {\n    id: 'Sort on options',\n    defaultMessage: 'Sort on options',\n  },\n  facets: {\n    id: 'Facets',\n    defaultMessage: 'Facets',\n  },\n  facet: {\n    id: 'Facet',\n    defaultMessage: 'Facet',\n  },\n  label: {\n    id: 'Label',\n    defaultMessage: 'Label',\n  },\n  field: {\n    id: 'Field',\n    defaultMessage: 'Field',\n  },\n  multipleChoices: {\n    id: 'Multiple choices?',\n    defaultMessage: 'Multiple choices?',\n  },\n  hideFacetTitle: {\n    id: 'Hide facet?',\n    defaultMessage: 'Hide facet?',\n  },\n  hideFacetDescription: {\n    id:\n      'Hidden facets will still filter the results if proper parameters are passed in URLs',\n    defaultMessage:\n      'Hidden facets will still filter the results if proper parameters are passed in URLs',\n  },\n  facetWidget: {\n    id: 'Facet widget',\n    defaultMessage: 'Facet widget',\n  },\n  showTotalResults: {\n    id: 'Show total results',\n    defaultMessage: 'Show total results',\n  },\n});\n\nconst enhanceSchema = (originalSchema, formData) => {\n  const extensionName = 'facetWidgets';\n  const extensionType = 'type'; // property name in stored block data\n  const variations =\n    config.blocks.blocksConfig.search.extensions[extensionName].types;\n\n  const activeItemName = formData?.[extensionType];\n  let activeItem = variations?.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations?.find((item) => item.isDefault);\n\n  const schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData })\n    : cloneDeep(originalSchema);\n\n  return schema;\n};\n\nconst FacetSchema = ({ intl }) => ({\n  title: intl.formatMessage(messages.facet),\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'field', 'type', 'hidden'],\n    },\n  ],\n  properties: {\n    title: {\n      title: intl.formatMessage(messages.label),\n    },\n    field: {\n      title: intl.formatMessage(messages.field),\n      widget: 'select_querystring_field',\n      vocabulary: { '@id': 'plone.app.vocabularies.MetadataFields' },\n      filterOptions: (options) => {\n        // Only allows indexes that provide simple, fixed vocabularies.\n        // This should be improved, together with the facets. The querystring\n        // widget implementation should serve as inspiration for those dynamic\n        // types of facets.\n        return Object.assign(\n          {},\n          ...Object.keys(options).map((k) =>\n            Object.keys(options[k].values || {}).length ||\n            hasNonValueOperation(options[k].operations) ||\n            hasDateOperation(options[k].operations)\n              ? { [k]: options[k] }\n              : {},\n          ),\n        );\n      },\n    },\n    multiple: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.multipleChoices),\n      default: false,\n    },\n    hidden: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.hideFacetTitle),\n      default: false,\n      description: intl.formatMessage(messages.hideFacetDescription),\n    },\n    type: {\n      title: intl.formatMessage(messages.facetWidget),\n      choices: config.blocks.blocksConfig.search.extensions.facetWidgets.types.map(\n        ({ id, title }) => [id, title],\n      ),\n      defaultValue: config.blocks.blocksConfig.search.extensions.facetWidgets.types.find(\n        ({ isDefault }) => isDefault,\n      ).id,\n    },\n  },\n  required: ['field'],\n});\n\nexport default ({ data = {}, intl }) => {\n  return {\n    title: intl.formatMessage(messages.searchBlock),\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        fields: ['headline'],\n      },\n      {\n        id: 'searchquery',\n        title: intl.formatMessage(messages.baseSearchQuery),\n        fields: ['query'],\n      },\n      {\n        id: 'facets',\n        title: intl.formatMessage(messages.facets),\n        fields: ['facetsTitle', 'facets'],\n      },\n      {\n        id: 'controls',\n        title: intl.formatMessage(messages.controls),\n        fields: [\n          'showSortOn',\n          ...(data.showSortOn ? ['sortOnLabel'] : []),\n          ...(data.showSortOn ? ['sortOnOptions'] : []),\n          'showSearchInput',\n          ...(data.showSearchInput ?? true ? ['showSearchButton'] : []),\n          // ...(data.showSearchInput ? ['searchInputPrompt'] : []),\n          // ...(data.showSearchButton ? ['searchButtonLabel'] : []),\n          'showTotalResults',\n        ],\n      },\n    ],\n    properties: {\n      headline: {\n        title: intl.formatMessage(messages.headline),\n      },\n      searchInputPrompt: {\n        title: intl.formatMessage(messages.searchInputPrompt),\n      },\n      showSearchInput: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchInput),\n        default: true,\n      },\n      showSearchButton: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSearchButtonTitle),\n        description: intl.formatMessage(messages.showSearchButtonDescription),\n      },\n      showTotalResults: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showTotalResults),\n        default: true,\n      },\n      searchButtonLabel: {\n        title: intl.formatMessage(messages.searchButtonLabel),\n        placeholder: intl.formatMessage(messages.searchButtonPlaceholder),\n      },\n      showSortOn: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.showSortOn),\n      },\n      sortOnLabel: {\n        title: intl.formatMessage(messages.sortOnLabel),\n      },\n      sortOnOptions: {\n        title: intl.formatMessage(messages.sortOnOptions),\n        widget: 'array',\n      },\n      facets: {\n        title: intl.formatMessage(messages.facets),\n        widget: 'object_list',\n        schema: FacetSchema({ intl }),\n        schemaExtender: enhanceSchema,\n      },\n      facetsTitle: {\n        title: intl.formatMessage(messages.sectionTitle),\n      },\n      query: {\n        title: 'Query',\n      },\n    },\n    required: [],\n  };\n};\n"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,SAASC,cAAT,QAA+B,YAA/B;AAEA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,SAAvD;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;EAC9BI,WAAW;IAAA;IAAA;EAAA,CADmB;EAK9BC,QAAQ;IAAA;IAAA;EAAA,CALsB;EAS9BC,eAAe;IAAA;IAAA;EAAA,CATe;EAa9BC,YAAY;IAAA;IAAA;EAAA,CAbkB;EAiB9BC,QAAQ;IAAA;IAAA;EAAA,CAjBsB;EAqB9BC,iBAAiB;IAAA;IAAA;EAAA,CArBa;EAyB9BC,eAAe;IAAA;IAAA;EAAA,CAzBe;EA6B9BC,qBAAqB;IAAA;IAAA;EAAA,CA7BS;EAiC9BC,2BAA2B;IAAA;IAAA;EAAA,CAjCG;EAuC9BC,iBAAiB;IAAA;IAAA;EAAA,CAvCa;EA2C9BC,uBAAuB;IAAA;IAAA;EAAA,CA3CO;EA+C9BC,UAAU;IAAA;IAAA;EAAA,CA/CoB;EAmD9BC,WAAW;IAAA;IAAA;EAAA,CAnDmB;EAuD9BC,aAAa;IAAA;IAAA;EAAA,CAvDiB;EA2D9BC,MAAM;IAAA;IAAA;EAAA,CA3DwB;EA+D9BC,KAAK;IAAA;IAAA;EAAA,CA/DyB;EAmE9BC,KAAK;IAAA;IAAA;EAAA,CAnEyB;EAuE9BC,KAAK;IAAA;IAAA;EAAA,CAvEyB;EA2E9BC,eAAe;IAAA;IAAA;EAAA,CA3Ee;EA+E9BC,cAAc;IAAA;IAAA;EAAA,CA/EgB;EAmF9BC,oBAAoB;IAAA;IAAA;EAAA,CAnFU;EAyF9BC,WAAW;IAAA;IAAA;EAAA,CAzFmB;EA6F9BC,gBAAgB;IAAA;IAAA;EAAA;AA7Fc,CAAD,CAA/B;;AAmGA,MAAMC,aAAa,GAAG,CAACC,cAAD,EAAiBC,QAAjB,KAA8B;EAAA;;EAClD,MAAMC,aAAa,GAAG,cAAtB;EACA,MAAMC,aAAa,GAAG,MAAtB,CAFkD,CAEpB;;EAC9B,MAAMC,UAAU,GACdjC,MAAM,CAACkC,MAAP,CAAcC,YAAd,CAA2BC,MAA3B,CAAkCC,UAAlC,CAA6CN,aAA7C,EAA4DO,KAD9D;EAGA,MAAMC,cAAc,GAAGT,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAGE,aAAH,CAA/B;EACA,IAAIQ,UAAU,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEQ,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,cAAvC,CAAjB;EACA,IAAI,CAACC,UAAL,EAAiBA,UAAU,GAAGP,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAEQ,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACE,SAAhC,CAAb;EAEjB,MAAMC,cAAc,kBAAGL,UAAH,gDAAG,YAAa,gBAAb,CAAvB;EAEA,IAAIM,MAAM,GAAGD,cAAc,GACvBA,cAAc,CAAC;IAAEC,MAAM,EAAE,WAAUjB,cAAV,CAAV;IAAqCC;EAArC,CAAD,CADS,GAEvB,WAAUD,cAAV,CAFJ;EAIA,OAAOiB,MAAP;AACD,CAjBD;;AAmBA,MAAMC,WAAW,GAAG;EAAA,IAAC;IAAEC;EAAF,CAAD;EAAA,OAAe;IACjCC,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACgB,KAA5B,CAD0B;IAEjC+B,SAAS,EAAE,CACT;MACER,EAAE,EAAE,SADN;MAEEM,KAAK,EAAE,SAFT;MAGEG,MAAM,EAAE,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,QAA3B;IAHV,CADS,CAFsB;IASjCC,UAAU,EAAE;MACVJ,KAAK,EAAE;QACLA,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACiB,KAA5B;MADF,CADG;MAIVC,KAAK,EAAE;QACL2B,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACkB,KAA5B,CADF;QAELgC,MAAM,EAAE,0BAFH;QAGLC,UAAU,EAAE;UAAE,OAAO;QAAT,CAHP;QAILC,aAAa,EAAGC,OAAD,IAAa;UAC1B;UACA;UACA;UACA;UACA,OAAOC,MAAM,CAACC,MAAP,CACL,EADK,EAEL,GAAGD,MAAM,CAACE,IAAP,CAAYH,OAAZ,EAAqBI,GAArB,CAA0BC,CAAD,IAC1BJ,MAAM,CAACE,IAAP,CAAYH,OAAO,CAACK,CAAD,CAAP,CAAWC,MAAX,IAAqB,EAAjC,EAAqCC,MAArC,IACA9D,oBAAoB,CAACuD,OAAO,CAACK,CAAD,CAAP,CAAWG,UAAZ,CADpB,IAEA9D,gBAAgB,CAACsD,OAAO,CAACK,CAAD,CAAP,CAAWG,UAAZ,CAFhB,GAGI;YAAE,CAACH,CAAD,GAAKL,OAAO,CAACK,CAAD;UAAd,CAHJ,GAII,EALH,CAFE,CAAP;QAUD;MAnBI,CAJG;MAyBVI,QAAQ,EAAE;QACRC,IAAI,EAAE,SADE;QAERlB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACmB,eAA5B,CAFC;QAGR6C,OAAO,EAAE;MAHD,CAzBA;MA8BVC,MAAM,EAAE;QACNF,IAAI,EAAE,SADA;QAENlB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACoB,cAA5B,CAFD;QAGN4C,OAAO,EAAE,KAHH;QAINE,WAAW,EAAEtB,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACqB,oBAA5B;MAJP,CA9BE;MAoCV0C,IAAI,EAAE;QACJlB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACsB,WAA5B,CADH;QAEJ6C,OAAO,EAAEvE,MAAM,CAACkC,MAAP,CAAcC,YAAd,CAA2BC,MAA3B,CAAkCC,UAAlC,CAA6CmC,YAA7C,CAA0DlC,KAA1D,CAAgEuB,GAAhE,CACP;UAAA,IAAC;YAAElB,EAAF;YAAMM;UAAN,CAAD;UAAA,OAAmB,CAACN,EAAD,EAAKM,KAAL,CAAnB;QAAA,CADO,CAFL;QAKJwB,YAAY,EAAEzE,MAAM,CAACkC,MAAP,CAAcC,YAAd,CAA2BC,MAA3B,CAAkCC,UAAlC,CAA6CmC,YAA7C,CAA0DlC,KAA1D,CAAgEG,IAAhE,CACZ;UAAA,IAAC;YAAEG;UAAF,CAAD;UAAA,OAAmBA,SAAnB;QAAA,CADY,EAEZD;MAPE;IApCI,CATqB;IAuDjC+B,QAAQ,EAAE,CAAC,OAAD;EAvDuB,CAAf;AAAA,CAApB;;KAAM3B,W;AA0DN,gBAAe,SAAyB;EAAA;;EAAA,IAAxB;IAAE4B,IAAI,GAAG,EAAT;IAAa3B;EAAb,CAAwB;EACtC,OAAO;IACLC,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACC,WAA5B,CADF;IAEL8C,SAAS,EAAE,CACT;MACER,EAAE,EAAE,SADN;MAEEM,KAAK,EAAE,SAFT;MAGEG,MAAM,EAAE,CAAC,UAAD;IAHV,CADS,EAMT;MACET,EAAE,EAAE,aADN;MAEEM,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACG,eAA5B,CAFT;MAGE6C,MAAM,EAAE,CAAC,OAAD;IAHV,CANS,EAWT;MACET,EAAE,EAAE,QADN;MAEEM,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACe,MAA5B,CAFT;MAGEiC,MAAM,EAAE,CAAC,aAAD,EAAgB,QAAhB;IAHV,CAXS,EAgBT;MACET,EAAE,EAAE,UADN;MAEEM,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACE,QAA5B,CAFT;MAGE8C,MAAM,EAAE,CACN,YADM,EAEN,IAAIuB,IAAI,CAAC3D,UAAL,GAAkB,CAAC,aAAD,CAAlB,GAAoC,EAAxC,CAFM,EAGN,IAAI2D,IAAI,CAAC3D,UAAL,GAAkB,CAAC,eAAD,CAAlB,GAAsC,EAA1C,CAHM,EAIN,iBAJM,EAKN,IAAI,0BAAA2D,IAAI,CAAChE,eAAL,yEAAwB,IAAxB,IAA+B,CAAC,kBAAD,CAA/B,GAAsD,EAA1D,CALM,EAMN;MACA;MACA,kBARM;IAHV,CAhBS,CAFN;IAiCL0C,UAAU,EAAE;MACV5C,QAAQ,EAAE;QACRwC,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACK,QAA5B;MADC,CADA;MAIVC,iBAAiB,EAAE;QACjBuC,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACM,iBAA5B;MADU,CAJT;MAOVC,eAAe,EAAE;QACfwD,IAAI,EAAE,SADS;QAEflB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACO,eAA5B,CAFQ;QAGfyD,OAAO,EAAE;MAHM,CAPP;MAYVQ,gBAAgB,EAAE;QAChBT,IAAI,EAAE,SADU;QAEhBlB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACQ,qBAA5B,CAFS;QAGhB0D,WAAW,EAAEtB,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACS,2BAA5B;MAHG,CAZR;MAiBVc,gBAAgB,EAAE;QAChBwC,IAAI,EAAE,SADU;QAEhBlB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACuB,gBAA5B,CAFS;QAGhByC,OAAO,EAAE;MAHO,CAjBR;MAsBVtD,iBAAiB,EAAE;QACjBmC,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACU,iBAA5B,CADU;QAEjB+D,WAAW,EAAE7B,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACW,uBAA5B;MAFI,CAtBT;MA0BVC,UAAU,EAAE;QACVmD,IAAI,EAAE,SADI;QAEVlB,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACY,UAA5B;MAFG,CA1BF;MA8BVC,WAAW,EAAE;QACXgC,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACa,WAA5B;MADI,CA9BH;MAiCVC,aAAa,EAAE;QACb+B,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACc,aAA5B,CADM;QAEboC,MAAM,EAAE;MAFK,CAjCL;MAqCVnC,MAAM,EAAE;QACN8B,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACe,MAA5B,CADD;QAENmC,MAAM,EAAE,aAFF;QAGNR,MAAM,EAAEC,WAAW,CAAC;UAAEC;QAAF,CAAD,CAHb;QAIN8B,cAAc,EAAElD;MAJV,CArCE;MA2CVmD,WAAW,EAAE;QACX9B,KAAK,EAAED,IAAI,CAACE,aAAL,CAAmB9C,QAAQ,CAACI,YAA5B;MADI,CA3CH;MA8CVwE,KAAK,EAAE;QACL/B,KAAK,EAAE;MADF;IA9CG,CAjCP;IAmFLyB,QAAQ,EAAE;EAnFL,CAAP;AAqFD,CAtFD"},"metadata":{"react-intl":{"messages":[{"id":"Search block","defaultMessage":"Search block"},{"id":"Controls","defaultMessage":"Controls"},{"id":"Base search query","defaultMessage":"Base search query"},{"id":"Section title","defaultMessage":"Section title"},{"id":"Headline","defaultMessage":"Headline"},{"id":"Search input label","defaultMessage":"Search input label"},{"id":"Show search input?","defaultMessage":"Show search input?"},{"id":"Show search button?","defaultMessage":"Show search button?"},{"id":"The button presence disables the live search, the query is issued when you press ENTER","defaultMessage":"The button presence disables the live search, the query is issued when you press ENTER"},{"id":"Search button label","defaultMessage":"Search button label"},{"id":"Search","defaultMessage":"Search"},{"id":"Show sorting?","defaultMessage":"Show sorting?"},{"id":"Sort on label","defaultMessage":"Sort on label"},{"id":"Sort on options","defaultMessage":"Sort on options"},{"id":"Facets","defaultMessage":"Facets"},{"id":"Facet","defaultMessage":"Facet"},{"id":"Label","defaultMessage":"Label"},{"id":"Field","defaultMessage":"Field"},{"id":"Multiple choices?","defaultMessage":"Multiple choices?"},{"id":"Hide facet?","defaultMessage":"Hide facet?"},{"id":"Hidden facets will still filter the results if proper parameters are passed in URLs","defaultMessage":"Hidden facets will still filter the results if proper parameters are passed in URLs"},{"id":"Facet widget","defaultMessage":"Facet widget"},{"id":"Show total results","defaultMessage":"Show total results"}]}},"sourceType":"module"}