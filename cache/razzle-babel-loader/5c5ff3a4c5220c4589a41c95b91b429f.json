{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\nimport { ADD_COMMENT, DELETE_COMMENT, LIST_COMMENTS, LIST_MORE_COMMENTS, UPDATE_COMMENT } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  items: [],\n  items_total: null,\n  next: null\n};\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\n\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\n\n\nexport default function comments(state = initialState, action = {}) {\n  var _action$result$batchi, _action$result$batchi2;\n\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n    case `${LIST_MORE_COMMENTS}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: action.result.items,\n        next: (_action$result$batchi = action.result.batching) === null || _action$result$batchi === void 0 ? void 0 : _action$result$batchi.next,\n        items_total: action.result.items_total,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    case `${LIST_MORE_COMMENTS}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: [...state.items, ...action.result.items],\n        next: (_action$result$batchi2 = action.result.batching) === null || _action$result$batchi2 === void 0 ? void 0 : _action$result$batchi2.next,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    case `${LIST_COMMENTS}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: [],\n        items_total: null,\n        next: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n\n    case `${LIST_MORE_COMMENTS}_FAIL`:\n    case `${ADD_COMMENT}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_COMMENT","DELETE_COMMENT","LIST_COMMENTS","LIST_MORE_COMMENTS","UPDATE_COMMENT","initialState","add","loaded","loading","error","delete","update","list","items","items_total","next","getRequestKey","actionType","split","toLowerCase","comments","state","action","type","result","batching"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/reducers/comments/comments.js"],"sourcesContent":["/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LIST_COMMENTS,\n  LIST_MORE_COMMENTS,\n  UPDATE_COMMENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n  items_total: null,\n  next: null,\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n    case `${LIST_MORE_COMMENTS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result.items,\n        next: action.result.batching?.next,\n        items_total: action.result.items_total,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: [...state.items, ...action.result.items],\n        next: action.result.batching?.next,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_FAIL`:\n      return {\n        ...state,\n        items: [],\n        items_total: null,\n        next: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_FAIL`:\n    case `${ADD_COMMENT}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}