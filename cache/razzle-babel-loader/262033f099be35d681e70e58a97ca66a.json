{"ast":null,"code":"import config from '@plone/volto/registry';\nexport * from './backspaceInList';\nexport * from './breakBlocks';\nexport * from './indentListItems';\nexport * from './joinBlocks';\nexport * from './moveListItems';\nexport * from './softBreak';\nexport * from './traverseBlocks';\nexport * from './unwrapEmptyString';\nexport * from './slashMenu';\nexport * from './cancelEsc';\n/**\n * Takes all the handlers from `slate.textblockKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\n\nexport function handleKey(_ref) {\n  let {\n    editor,\n    event\n  } = _ref;\n  const {\n    slate\n  } = config.settings;\n  const handlers = slate.textblockKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find(handler => handler({\n      editor,\n      event\n    }));\n  }\n}\n/**\n * Takes all the handlers from `slate.textblockDetachedKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\n\nexport function handleKeyDetached(_ref2) {\n  let {\n    editor,\n    event\n  } = _ref2;\n  const {\n    slate\n  } = config.settings;\n  const handlers = slate.textblockDetachedKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find(handler => handler({\n      editor,\n      event\n    }));\n  }\n}","map":{"version":3,"names":["config","handleKey","editor","event","slate","settings","handlers","textblockKeyboardHandlers","key","find","handler","handleKeyDetached","textblockDetachedKeyboardHandlers"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/keyboard/index.js"],"sourcesContent":["import config from '@plone/volto/registry';\n\nexport * from './backspaceInList';\nexport * from './breakBlocks';\nexport * from './indentListItems';\nexport * from './joinBlocks';\nexport * from './moveListItems';\nexport * from './softBreak';\nexport * from './traverseBlocks';\nexport * from './unwrapEmptyString';\nexport * from './slashMenu';\nexport * from './cancelEsc';\n\n/**\n * Takes all the handlers from `slate.textblockKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKey({ editor, event }) {\n  const { slate } = config.settings;\n\n  const handlers = slate.textblockKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find((handler) => handler({ editor, event }));\n  }\n}\n\n/**\n * Takes all the handlers from `slate.textblockDetachedKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKeyDetached({ editor, event }) {\n  const { slate } = config.settings;\n\n  const handlers = slate.textblockDetachedKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find((handler) => handler({ editor, event }));\n  }\n}\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AAEA,cAAc,mBAAd;AACA,cAAc,eAAd;AACA,cAAc,mBAAd;AACA,cAAc,cAAd;AACA,cAAc,iBAAd;AACA,cAAc,aAAd;AACA,cAAc,kBAAd;AACA,cAAc,qBAAd;AACA,cAAc,aAAd;AACA,cAAc,aAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAsC;EAAA,IAAnB;IAAEC,MAAF;IAAUC;EAAV,CAAmB;EAC3C,MAAM;IAAEC;EAAF,IAAYJ,MAAM,CAACK,QAAzB;EAEA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,yBAAN,CAAgCJ,KAAK,CAACK,GAAtC,CAAjB;;EAEA,IAAIF,QAAJ,EAAc;IACZ;IACA;IACA,OAAOA,QAAQ,CAACG,IAAT,CAAeC,OAAD,IAAaA,OAAO,CAAC;MAAER,MAAF;MAAUC;IAAV,CAAD,CAAlC,CAAP;EACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,iBAAT,QAA8C;EAAA,IAAnB;IAAET,MAAF;IAAUC;EAAV,CAAmB;EACnD,MAAM;IAAEC;EAAF,IAAYJ,MAAM,CAACK,QAAzB;EAEA,MAAMC,QAAQ,GAAGF,KAAK,CAACQ,iCAAN,CAAwCT,KAAK,CAACK,GAA9C,CAAjB;;EAEA,IAAIF,QAAJ,EAAc;IACZ;IACA;IACA,OAAOA,QAAQ,CAACG,IAAT,CAAeC,OAAD,IAAaA,OAAO,CAAC;MAAER,MAAF;MAAUC;IAAV,CAAD,CAAlC,CAAP;EACD;AACF"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}