{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Internal proxy to bypass CORS while developing.\nimport express from 'express';\nimport config from '@plone/volto/registry';\nimport { createProxyMiddleware, responseInterceptor } from 'http-proxy-middleware';\nimport querystring from 'querystring';\nimport { parse as parseUrl } from 'url';\n\nconst filter = function (pathname, req) {\n  // This is the proxy to the API in case the accept header is 'application/json'\n  return config.settings.devProxyToApiPath && pathname.startsWith('/++api++');\n};\n\nlet _env = null; // the config is not available at the middleware creation time, so it needs to\n// read/cache the global configuration on first request.\n\nfunction getEnv() {\n  if (_env) {\n    return _env;\n  }\n\n  const apiPathURL = parseUrl(config.settings.apiPath);\n  const proxyURL = parseUrl(config.settings.devProxyToApiPath);\n  const serverURL = `${proxyURL.protocol}//${proxyURL.host}`;\n  const instancePath = proxyURL.pathname;\n  _env = {\n    apiPathURL,\n    serverURL,\n    instancePath\n  };\n  return _env;\n}\n\nexport default function () {\n  var _config$settings, _config$settings$prox;\n\n  const middleware = express.Router();\n  const devProxy = createProxyMiddleware(filter, _objectSpread({\n    selfHandleResponse: true,\n    onProxyRes: responseInterceptor(async (responseBuffer, proxyRes, req, res) => {\n      return responseBuffer;\n    }),\n    onProxyReq: (proxyReq, req, res) => {\n      // Fixes https://github.com/chimurai/http-proxy-middleware/issues/320\n      if (!req.body || !Object.keys(req.body).length) {\n        return;\n      }\n\n      const contentType = proxyReq.getHeader('Content-Type');\n\n      const writeBody = bodyData => {\n        proxyReq.setHeader('Content-Length', Buffer.byteLength(bodyData));\n        proxyReq.write(bodyData);\n      };\n\n      if (contentType.includes('application/json')) {\n        writeBody(JSON.stringify(req.body));\n      }\n\n      if (contentType.includes('application/x-www-form-urlencoded')) {\n        writeBody(querystring.stringify(req.body));\n      }\n    },\n    // target: serverURL,\n    router: req => {\n      const {\n        serverURL\n      } = getEnv();\n      return serverURL;\n    },\n    pathRewrite: (path, req) => {\n      const {\n        apiPathURL,\n        instancePath\n      } = getEnv();\n      const target = config.settings.proxyRewriteTarget || `/VirtualHostBase/http/${apiPathURL.hostname}:${apiPathURL.port}${instancePath}/++api++/VirtualHostRoot`;\n      return `${target}${path.replace('/++api++', '')}`;\n    },\n    logLevel: process.env.DEBUG_HPM ? 'debug' : 'silent'\n  }, ((_config$settings = config.settings) === null || _config$settings === void 0 ? void 0 : (_config$settings$prox = _config$settings.proxyRewriteTarget) === null || _config$settings$prox === void 0 ? void 0 : _config$settings$prox.startsWith('https')) && {\n    changeOrigin: true,\n    secure: false\n  }));\n  middleware.all('*', devProxy);\n  middleware.id = 'devProxy';\n  return middleware;\n}","map":{"version":3,"names":["express","config","createProxyMiddleware","responseInterceptor","querystring","parse","parseUrl","filter","pathname","req","settings","devProxyToApiPath","startsWith","_env","getEnv","apiPathURL","apiPath","proxyURL","serverURL","protocol","host","instancePath","middleware","Router","devProxy","selfHandleResponse","onProxyRes","responseBuffer","proxyRes","res","onProxyReq","proxyReq","body","Object","keys","length","contentType","getHeader","writeBody","bodyData","setHeader","Buffer","byteLength","write","includes","JSON","stringify","router","pathRewrite","path","target","proxyRewriteTarget","hostname","port","replace","logLevel","process","env","DEBUG_HPM","changeOrigin","secure","all","id"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/express-middleware/devproxy.js"],"sourcesContent":["// Internal proxy to bypass CORS while developing.\n\nimport express from 'express';\nimport config from '@plone/volto/registry';\nimport {\n  createProxyMiddleware,\n  responseInterceptor,\n} from 'http-proxy-middleware';\nimport querystring from 'querystring';\nimport { parse as parseUrl } from 'url';\n\nconst filter = function (pathname, req) {\n  // This is the proxy to the API in case the accept header is 'application/json'\n  return config.settings.devProxyToApiPath && pathname.startsWith('/++api++');\n};\n\nlet _env = null;\n\n// the config is not available at the middleware creation time, so it needs to\n// read/cache the global configuration on first request.\nfunction getEnv() {\n  if (_env) {\n    return _env;\n  }\n\n  const apiPathURL = parseUrl(config.settings.apiPath);\n  const proxyURL = parseUrl(config.settings.devProxyToApiPath);\n  const serverURL = `${proxyURL.protocol}//${proxyURL.host}`;\n  const instancePath = proxyURL.pathname;\n\n  _env = {\n    apiPathURL,\n    serverURL,\n    instancePath,\n  };\n\n  return _env;\n}\n\nexport default function () {\n  const middleware = express.Router();\n  const devProxy = createProxyMiddleware(filter, {\n    selfHandleResponse: true,\n    onProxyRes: responseInterceptor(\n      async (responseBuffer, proxyRes, req, res) => {\n        return responseBuffer;\n      },\n    ),\n    onProxyReq: (proxyReq, req, res) => {\n      // Fixes https://github.com/chimurai/http-proxy-middleware/issues/320\n      if (!req.body || !Object.keys(req.body).length) {\n        return;\n      }\n\n      const contentType = proxyReq.getHeader('Content-Type');\n      const writeBody = (bodyData) => {\n        proxyReq.setHeader('Content-Length', Buffer.byteLength(bodyData));\n        proxyReq.write(bodyData);\n      };\n\n      if (contentType.includes('application/json')) {\n        writeBody(JSON.stringify(req.body));\n      }\n\n      if (contentType.includes('application/x-www-form-urlencoded')) {\n        writeBody(querystring.stringify(req.body));\n      }\n    },\n    // target: serverURL,\n    router: (req) => {\n      const { serverURL } = getEnv();\n      return serverURL;\n    },\n    pathRewrite: (path, req) => {\n      const { apiPathURL, instancePath } = getEnv();\n      const target =\n        config.settings.proxyRewriteTarget ||\n        `/VirtualHostBase/http/${apiPathURL.hostname}:${apiPathURL.port}${instancePath}/++api++/VirtualHostRoot`;\n\n      return `${target}${path.replace('/++api++', '')}`;\n    },\n    logLevel: process.env.DEBUG_HPM ? 'debug' : 'silent',\n    ...(config.settings?.proxyRewriteTarget?.startsWith('https') && {\n      changeOrigin: true,\n      secure: false,\n    }),\n  });\n\n  middleware.all('*', devProxy);\n  middleware.id = 'devProxy';\n\n  return middleware;\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}