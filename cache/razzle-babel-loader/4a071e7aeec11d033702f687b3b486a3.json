{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _groupBy from \"lodash/groupBy\";\nimport _map from \"lodash/map\";\nimport _filter from \"lodash/filter\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/BlockChooser/BlockChooser.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Button } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport AnimateHeight from 'react-animate-height';\nimport config from '@plone/volto/registry';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport BlockChooserSearch from './BlockChooserSearch';\nimport { FormattedMessage } from 'react-intl';\nconst messages = defineMessages({\n  fold: {\n    \"id\": \"Fold\",\n    \"defaultMessage\": \"Fold\"\n  },\n  unfold: {\n    \"id\": \"Unfold\",\n    \"defaultMessage\": \"Unfold\"\n  }\n});\n\nconst BlockChooser = ({\n  currentBlock,\n  onInsertBlock,\n  onMutateBlock,\n  allowedBlocks,\n  showRestricted,\n  blocksConfig = config.blocks.blocksConfig,\n  blockChooserRef,\n  properties = {}\n}) => {\n  const intl = useIntl();\n  const useAllowedBlocks = !_isEmpty(allowedBlocks);\n\n  const filteredBlocksConfig = _filter(blocksConfig, item => {\n    if (showRestricted) {\n      if (useAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        return true;\n      }\n    } else {\n      if (useAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        // Overload restricted as a function, so we can decide the availability of a block\n        // depending on this function, given properties (current present blocks) and the\n        // block being evaluated\n        return typeof item.restricted === 'function' ? !item.restricted({\n          properties,\n          block: item\n        }) : !item.restricted;\n      }\n    }\n  });\n\n  let blocksAvailable = {};\n\n  const mostUsedBlocks = _filter(filteredBlocksConfig, item => item.mostUsed);\n\n  if (mostUsedBlocks) {\n    blocksAvailable.mostUsed = mostUsedBlocks;\n  }\n\n  const groupedBlocks = _groupBy(filteredBlocksConfig, item => item.group);\n\n  blocksAvailable = _objectSpread(_objectSpread({}, blocksAvailable), groupedBlocks);\n\n  const groupBlocksOrder = _filter(config.blocks.groupBlocksOrder, item => Object.keys(blocksAvailable).includes(item.id));\n\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  function handleClick(e, titleProps) {\n    const {\n      index\n    } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n    setActiveIndex(newIndex);\n  }\n\n  const [filterValue, setFilterValue] = React.useState('');\n\n  const getFormatMessage = message => intl.formatMessage({\n    id: message,\n    defaultMessage: message\n  });\n\n  function blocksAvailableFilter(blocks) {\n    return blocks.filter(block => {\n      var _filterVariations;\n\n      return getFormatMessage(block.title).toLowerCase().includes(filterValue) || ((_filterVariations = filterVariations(block)) === null || _filterVariations === void 0 ? void 0 : _filterVariations.length);\n    });\n  }\n\n  function filterVariations(block) {\n    var _block$variations;\n\n    return (_block$variations = block.variations) === null || _block$variations === void 0 ? void 0 : _block$variations.filter(variation => getFormatMessage(variation.title).toLowerCase().includes(filterValue) && !variation.title.toLowerCase().includes('default'));\n  }\n\n  const ButtonGroup = ({\n    block\n  }) => {\n    var _variations$;\n\n    const variations = filterVariations(block);\n    return __jsx(Button.Group, {\n      key: block.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, __jsx(Button, {\n      icon: true,\n      basic: true,\n      className: block.id,\n      onClick: e => {\n        onInsertBlock ? onInsertBlock(currentBlock, {\n          '@type': block.id\n        }) : onMutateBlock(currentBlock, {\n          '@type': block.id\n        });\n        e.stopPropagation();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, __jsx(Icon, {\n      name: block.icon,\n      size: \"36px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }), getFormatMessage(block.title), filterValue && (variations === null || variations === void 0 ? void 0 : (_variations$ = variations[0]) === null || _variations$ === void 0 ? void 0 : _variations$.title) && __jsx(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, getFormatMessage(variations[0].title))));\n  };\n\n  return __jsx(\"div\", {\n    className: \"blocks-chooser\",\n    ref: blockChooserRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, __jsx(BlockChooserSearch, {\n    onChange: value => setFilterValue(value),\n    searchValue: filterValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }), filterValue ? __jsx(React.Fragment, null, _map(blocksAvailableFilter(filteredBlocksConfig), block => __jsx(ButtonGroup, {\n    block: block,\n    key: block.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  })), blocksAvailableFilter(filteredBlocksConfig).length === 0 && __jsx(\"h4\", {\n    style: {\n      textAlign: 'center',\n      lineHeight: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"No results found\",\n    defaultMessage: \"No results found\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }))) : __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, _map(groupBlocksOrder, (groupName, index) => __jsx(React.Fragment, {\n    key: groupName.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, __jsx(Accordion.Title, {\n    \"aria-label\": activeIndex === index ? `${intl.formatMessage(messages.fold)} ${groupName.title} blocks` : `${intl.formatMessage(messages.unfold)} ${groupName.title} blocks`,\n    active: activeIndex === index,\n    index: index,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, intl.formatMessage({\n    id: groupName.id,\n    defaultMessage: groupName.title\n  }), __jsx(\"div\", {\n    className: \"accordion-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, activeIndex === 0 ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }))), __jsx(Accordion.Content, {\n    className: groupName.id,\n    active: activeIndex === index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 15\n    }\n  }, __jsx(AnimateHeight, {\n    animateOpacity: true,\n    duration: 500,\n    height: activeIndex === index ? 'auto' : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, _map(blocksAvailable[groupName.id], block => __jsx(ButtonGroup, {\n    block: block,\n    key: block.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }))))))));\n};\n\nBlockChooser.propTypes = {\n  currentBlock: PropTypes.string.isRequired,\n  onMutateBlock: PropTypes.func,\n  onInsertBlock: PropTypes.func,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  blocksConfig: PropTypes.objectOf(PropTypes.any)\n};\nexport default /*#__PURE__*/React.forwardRef((props, ref) => __jsx(BlockChooser, _extends({}, props, {\n  blockChooserRef: ref,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 3\n  }\n})));","map":{"version":3,"names":["React","PropTypes","Accordion","Button","useIntl","defineMessages","Icon","AnimateHeight","config","upSVG","downSVG","BlockChooserSearch","FormattedMessage","messages","fold","unfold","BlockChooser","currentBlock","onInsertBlock","onMutateBlock","allowedBlocks","showRestricted","blocksConfig","blocks","blockChooserRef","properties","intl","useAllowedBlocks","filteredBlocksConfig","item","includes","id","restricted","block","blocksAvailable","mostUsedBlocks","mostUsed","groupedBlocks","group","groupBlocksOrder","Object","keys","activeIndex","setActiveIndex","useState","handleClick","e","titleProps","index","newIndex","filterValue","setFilterValue","getFormatMessage","message","formatMessage","defaultMessage","blocksAvailableFilter","filter","title","toLowerCase","filterVariations","length","variations","variation","ButtonGroup","stopPropagation","icon","value","textAlign","lineHeight","groupName","propTypes","string","isRequired","func","arrayOf","objectOf","any","forwardRef","props","ref"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/BlockChooser/BlockChooser.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { filter, map, groupBy, isEmpty } from 'lodash';\nimport { Accordion, Button } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport AnimateHeight from 'react-animate-height';\nimport config from '@plone/volto/registry';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport BlockChooserSearch from './BlockChooserSearch';\nimport { FormattedMessage } from 'react-intl';\n\nconst messages = defineMessages({\n  fold: {\n    id: 'Fold',\n    defaultMessage: 'Fold',\n  },\n  unfold: {\n    id: 'Unfold',\n    defaultMessage: 'Unfold',\n  },\n});\n\nconst BlockChooser = ({\n  currentBlock,\n  onInsertBlock,\n  onMutateBlock,\n  allowedBlocks,\n  showRestricted,\n  blocksConfig = config.blocks.blocksConfig,\n  blockChooserRef,\n  properties = {},\n}) => {\n  const intl = useIntl();\n  const useAllowedBlocks = !isEmpty(allowedBlocks);\n\n  const filteredBlocksConfig = filter(blocksConfig, (item) => {\n    if (showRestricted) {\n      if (useAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        return true;\n      }\n    } else {\n      if (useAllowedBlocks) {\n        return allowedBlocks.includes(item.id);\n      } else {\n        // Overload restricted as a function, so we can decide the availability of a block\n        // depending on this function, given properties (current present blocks) and the\n        // block being evaluated\n        return typeof item.restricted === 'function'\n          ? !item.restricted({ properties, block: item })\n          : !item.restricted;\n      }\n    }\n  });\n\n  let blocksAvailable = {};\n  const mostUsedBlocks = filter(filteredBlocksConfig, (item) => item.mostUsed);\n  if (mostUsedBlocks) {\n    blocksAvailable.mostUsed = mostUsedBlocks;\n  }\n  const groupedBlocks = groupBy(filteredBlocksConfig, (item) => item.group);\n  blocksAvailable = {\n    ...blocksAvailable,\n    ...groupedBlocks,\n  };\n\n  const groupBlocksOrder = filter(config.blocks.groupBlocksOrder, (item) =>\n    Object.keys(blocksAvailable).includes(item.id),\n  );\n  const [activeIndex, setActiveIndex] = React.useState(0);\n\n  function handleClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    setActiveIndex(newIndex);\n  }\n  const [filterValue, setFilterValue] = React.useState('');\n\n  const getFormatMessage = (message) =>\n    intl.formatMessage({\n      id: message,\n      defaultMessage: message,\n    });\n\n  function blocksAvailableFilter(blocks) {\n    return blocks.filter(\n      (block) =>\n        getFormatMessage(block.title).toLowerCase().includes(filterValue) ||\n        filterVariations(block)?.length,\n    );\n  }\n  function filterVariations(block) {\n    return block.variations?.filter(\n      (variation) =>\n        getFormatMessage(variation.title).toLowerCase().includes(filterValue) &&\n        !variation.title.toLowerCase().includes('default'),\n    );\n  }\n\n  const ButtonGroup = ({ block }) => {\n    const variations = filterVariations(block);\n    return (\n      <Button.Group key={block.id}>\n        <Button\n          icon\n          basic\n          className={block.id}\n          onClick={(e) => {\n            onInsertBlock\n              ? onInsertBlock(currentBlock, {\n                  '@type': block.id,\n                })\n              : onMutateBlock(currentBlock, {\n                  '@type': block.id,\n                });\n            e.stopPropagation();\n          }}\n        >\n          <Icon name={block.icon} size=\"36px\" />\n          {getFormatMessage(block.title)}\n          {filterValue && variations?.[0]?.title && (\n            <small>{getFormatMessage(variations[0].title)}</small>\n          )}\n        </Button>\n      </Button.Group>\n    );\n  };\n\n  return (\n    <div className=\"blocks-chooser\" ref={blockChooserRef}>\n      <BlockChooserSearch\n        onChange={(value) => setFilterValue(value)}\n        searchValue={filterValue}\n      />\n      {filterValue ? (\n        <>\n          {map(blocksAvailableFilter(filteredBlocksConfig), (block) => (\n            <ButtonGroup block={block} key={block.id} />\n          ))}\n          {blocksAvailableFilter(filteredBlocksConfig).length === 0 && (\n            <h4 style={{ textAlign: 'center', lineHeight: '40px' }}>\n              <FormattedMessage\n                id=\"No results found\"\n                defaultMessage=\"No results found\"\n              />\n            </h4>\n          )}\n        </>\n      ) : (\n        <Accordion fluid styled className=\"form\">\n          {map(groupBlocksOrder, (groupName, index) => (\n            <React.Fragment key={groupName.id}>\n              <Accordion.Title\n                aria-label={\n                  activeIndex === index\n                    ? `${intl.formatMessage(messages.fold)} ${\n                        groupName.title\n                      } blocks`\n                    : `${intl.formatMessage(messages.unfold)} ${\n                        groupName.title\n                      } blocks`\n                }\n                active={activeIndex === index}\n                index={index}\n                onClick={handleClick}\n              >\n                {intl.formatMessage({\n                  id: groupName.id,\n                  defaultMessage: groupName.title,\n                })}\n                <div className=\"accordion-tools\">\n                  {activeIndex === 0 ? (\n                    <Icon name={upSVG} size=\"20px\" />\n                  ) : (\n                    <Icon name={downSVG} size=\"20px\" />\n                  )}\n                </div>\n              </Accordion.Title>\n              <Accordion.Content\n                className={groupName.id}\n                active={activeIndex === index}\n              >\n                <AnimateHeight\n                  animateOpacity\n                  duration={500}\n                  height={activeIndex === index ? 'auto' : 0}\n                >\n                  {map(blocksAvailable[groupName.id], (block) => (\n                    <ButtonGroup block={block} key={block.id} />\n                  ))}\n                </AnimateHeight>\n              </Accordion.Content>\n            </React.Fragment>\n          ))}\n        </Accordion>\n      )}\n    </div>\n  );\n};\n\nBlockChooser.propTypes = {\n  currentBlock: PropTypes.string.isRequired,\n  onMutateBlock: PropTypes.func,\n  onInsertBlock: PropTypes.func,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  blocksConfig: PropTypes.objectOf(PropTypes.any),\n};\n\nexport default React.forwardRef((props, ref) => (\n  <BlockChooser {...props} blockChooserRef={ref} />\n));\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Fold","defaultMessage":"Fold"},{"id":"Unfold","defaultMessage":"Unfold"},{"id":"No results found","defaultMessage":"No results found"}]}},"sourceType":"module"}