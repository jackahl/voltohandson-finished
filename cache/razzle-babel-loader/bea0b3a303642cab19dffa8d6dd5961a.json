{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _reduce from \"lodash/reduce\";\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Multilingual/ManageTranslations.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { flattenToAppURL, getBaseUrl, langmap } from '@plone/volto/helpers';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Icon, Toast, Toolbar } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { deleteLinkTranslation, getContent, linkTranslation } from '@plone/volto/actions';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { toast } from 'react-toastify';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\nconst messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  linked: {\n    \"id\": \"Translation linked\",\n    \"defaultMessage\": \"Translation linked\"\n  },\n  unlinked: {\n    \"id\": \"Translation linking removed\",\n    \"defaultMessage\": \"Translation linking removed\"\n  },\n  link: {\n    \"id\": \"Link translation for\",\n    \"defaultMessage\": \"Link translation for\"\n  },\n  unlink: {\n    \"id\": \"Unlink translation for\",\n    \"defaultMessage\": \"Unlink translation for\"\n  },\n  ManageTranslations: {\n    \"id\": \"Manage Translations\",\n    \"defaultMessage\": \"Manage Translations\"\n  },\n  ManageTranslationsTitle: {\n    \"id\": \"Manage translations for {title}\",\n    \"defaultMessage\": \"Manage translations for {title}\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  }\n});\n\nconst ManageTranslations = props => {\n  _s();\n\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector(state => state.content.data);\n  const dispatch = useDispatch();\n  const {\n    isObjectBrowserOpen,\n    openObjectBrowser\n  } = props;\n  const currentSelectedItem = React.useRef(null);\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(linkTranslation(flattenToAppURL(content['@id']), currentSelectedItem.current)).then(resp => {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: intl.formatMessage(messages.success),\n          content: intl.formatMessage(messages.linked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }\n        }));\n        dispatch(getContent(getBaseUrl(pathname)));\n      }).catch(error => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: shadowedError.error.type,\n          content: shadowedError.error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }\n        }), {\n          toastId: 'linkFailed'\n        });\n      });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n\n  }, [isObjectBrowserOpen]);\n\n  const translations = content && content['@components'].translations.items && _objectSpread({\n    [content.language.token]: {\n      url: content['@id']\n    }\n  }, _reduce(content['@components'].translations.items, (acc, value) => {\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [value.language]: {\n        url: value['@id']\n      }\n    });\n  }, {}));\n\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(flattenToAppURL(content['@id']), lang)).then(resp => {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.success),\n        content: intl.formatMessage(messages.unlinked),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }));\n      dispatch(getContent(getBaseUrl(pathname)));\n    }).catch(error => {\n      // TODO: The true error sent by the API is shadowed by the superagent one\n      // Update this when this issue is fixed.\n      const shadowedError = JSON.parse(error.response.text);\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: shadowedError.error.type,\n        content: shadowedError.error.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }), {\n        toastId: 'linkFailed'\n      });\n    });\n  }\n\n  return __jsx(Container, {\n    id: \"page-manage-translations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.ManageTranslations),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }), __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Manage translations for {title}\",\n    defaultMessage: \"Manage translations for {title}\",\n    values: {\n      title: __jsx(\"q\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 30\n        }\n      }, content.title)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  })), content && __jsx(Table, {\n    selectable: true,\n    compact: true,\n    singleLine: true,\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, \"Language\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, \"Path\"), __jsx(Table.HeaderCell, {\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, \"Tools\"))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, config.settings.supportedLanguages.map(lang => {\n    var _translations$lang, _translations$lang2;\n\n    return __jsx(Table.Row, {\n      key: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      collapsing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 19\n      }\n    }, lang === content.language.token ? __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 23\n      }\n    }, langmap[lang].nativeName) : langmap[lang].nativeName), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      to: flattenToAppURL(((_translations$lang = translations[lang]) === null || _translations$lang === void 0 ? void 0 : _translations$lang.url) || ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, flattenToAppURL(((_translations$lang2 = translations[lang]) === null || _translations$lang2 === void 0 ? void 0 : _translations$lang2.url) || ''))), __jsx(Table.Cell, {\n      textAlign: \"right\",\n      className: \"manage-multilingual-tools\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token || (translations === null || translations === void 0 ? void 0 : translations[lang]),\n      as: Link,\n      to: {\n        pathname: `${pathname}/create-translation`,\n        state: {\n          type: content['@type'],\n          translationOf: flattenToAppURL(content['@id']),\n          language: lang\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }))), translations !== null && translations !== void 0 && translations[lang] ? __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `${intl.formatMessage(messages.unlink)} ${langmap[lang].nativeName.toLowerCase()}`,\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token,\n      onClick: () => onDeleteTranslation(lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: lang === content.language.token ? linkSVG : unlinkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 27\n      }\n    }))) : __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 23\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `${intl.formatMessage(messages.link)} ${langmap[lang].nativeName.toLowerCase()}`,\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token,\n      onClick: () => openObjectBrowser({\n        mode: 'link',\n        overlay: true,\n        onSelectItem: url => {\n          onSelectTarget(url, isObjectBrowserOpen);\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: linkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 27\n      }\n    })))));\n  }))), __CLIENT__ && __jsx(Portal, {\n    node: document.getElementById('toolbar'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, __jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(Link, {\n      to: `${getBaseUrl(pathname)}`,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      title: intl.formatMessage(messages.back),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }))));\n};\n\n_s(ManageTranslations, \"egY8exmI5s5o0FRKeT7wp6T8bME=\", false, function () {\n  return [useIntl, useLocation, useSelector, useDispatch];\n});\n\n_c = ManageTranslations;\nexport default _c2 = withObjectBrowser(ManageTranslations);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ManageTranslations\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","Button","Container","Segment","Table","Helmet","flattenToAppURL","getBaseUrl","langmap","Link","useLocation","Icon","Toast","Toolbar","config","withObjectBrowser","deleteLinkTranslation","getContent","linkTranslation","defineMessages","FormattedMessage","useIntl","useSelector","useDispatch","Portal","toast","addSVG","backSVG","linkSVG","unlinkSVG","messages","success","linked","unlinked","link","unlink","ManageTranslations","ManageTranslationsTitle","back","props","intl","pathname","content","state","data","dispatch","isObjectBrowserOpen","openObjectBrowser","currentSelectedItem","useRef","useEffect","current","then","resp","formatMessage","catch","error","shadowedError","JSON","parse","response","text","type","message","toastId","translations","items","language","token","url","acc","value","onSelectTarget","target","onDeleteTranslation","lang","title","settings","supportedLanguages","map","nativeName","translationOf","toLowerCase","mode","overlay","onSelectItem","__CLIENT__","document","getElementById"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Multilingual/ManageTranslations.jsx"],"sourcesContent":["import React from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { flattenToAppURL, getBaseUrl, langmap } from '@plone/volto/helpers';\nimport { reduce } from 'lodash';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Icon, Toast, Toolbar } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport {\n  deleteLinkTranslation,\n  getContent,\n  linkTranslation,\n} from '@plone/volto/actions';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { toast } from 'react-toastify';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  linked: {\n    id: 'Translation linked',\n    defaultMessage: 'Translation linked',\n  },\n  unlinked: {\n    id: 'Translation linking removed',\n    defaultMessage: 'Translation linking removed',\n  },\n  link: {\n    id: 'Link translation for',\n    defaultMessage: 'Link translation for',\n  },\n  unlink: {\n    id: 'Unlink translation for',\n    defaultMessage: 'Unlink translation for',\n  },\n  ManageTranslations: {\n    id: 'Manage Translations',\n    defaultMessage: 'Manage Translations',\n  },\n  ManageTranslationsTitle: {\n    id: 'Manage translations for {title}',\n    defaultMessage: 'Manage translations for {title}',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\nconst ManageTranslations = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector((state) => state.content.data);\n  const dispatch = useDispatch();\n\n  const { isObjectBrowserOpen, openObjectBrowser } = props;\n\n  const currentSelectedItem = React.useRef(null);\n\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(\n        linkTranslation(\n          flattenToAppURL(content['@id']),\n          currentSelectedItem.current,\n        ),\n      )\n        .then((resp) => {\n          toast.success(\n            <Toast\n              success\n              title={intl.formatMessage(messages.success)}\n              content={intl.formatMessage(messages.linked)}\n            />,\n          );\n          dispatch(getContent(getBaseUrl(pathname)));\n        })\n        .catch((error) => {\n          // TODO: The true error sent by the API is shadowed by the superagent one\n          // Update this when this issue is fixed.\n          const shadowedError = JSON.parse(error.response.text);\n          toast.error(\n            <Toast\n              error\n              title={shadowedError.error.type}\n              content={shadowedError.error.message}\n            />,\n            { toastId: 'linkFailed' },\n          );\n        });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [isObjectBrowserOpen]);\n\n  const translations = content &&\n    content['@components'].translations.items && {\n      [content.language.token]: {\n        url: content['@id'],\n      },\n      ...reduce(\n        content['@components'].translations.items,\n        (acc, value) => {\n          return { ...acc, [value.language]: { url: value['@id'] } };\n        },\n        {},\n      ),\n    };\n\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(flattenToAppURL(content['@id']), lang))\n      .then((resp) => {\n        toast.success(\n          <Toast\n            success\n            title={intl.formatMessage(messages.success)}\n            content={intl.formatMessage(messages.unlinked)}\n          />,\n        );\n        dispatch(getContent(getBaseUrl(pathname)));\n      })\n      .catch((error) => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(\n          <Toast\n            error\n            title={shadowedError.error.type}\n            content={shadowedError.error.message}\n          />,\n          { toastId: 'linkFailed' },\n        );\n      });\n  }\n\n  return (\n    <Container id=\"page-manage-translations\">\n      <Helmet title={intl.formatMessage(messages.ManageTranslations)} />\n      <Segment.Group raised>\n        <Segment className=\"primary\">\n          <FormattedMessage\n            id=\"Manage translations for {title}\"\n            defaultMessage=\"Manage translations for {title}\"\n            values={{ title: <q>{content.title}</q> }}\n          />\n        </Segment>\n        {content && (\n          <Table selectable compact singleLine attached>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Language</Table.HeaderCell>\n                <Table.HeaderCell>Path</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"right\">Tools</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {config.settings.supportedLanguages.map((lang) => (\n                <Table.Row key={lang}>\n                  <Table.Cell collapsing>\n                    {lang === content.language.token ? (\n                      <strong>{langmap[lang].nativeName}</strong>\n                    ) : (\n                      langmap[lang].nativeName\n                    )}\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Link to={flattenToAppURL(translations[lang]?.url || '')}>\n                      {flattenToAppURL(translations[lang]?.url || '')}\n                    </Link>\n                  </Table.Cell>\n                  <Table.Cell\n                    textAlign=\"right\"\n                    className=\"manage-multilingual-tools\"\n                  >\n                    <Button.Group>\n                      <Button\n                        basic\n                        icon\n                        disabled={\n                          lang === content.language.token ||\n                          translations?.[lang]\n                        }\n                        as={Link}\n                        to={{\n                          pathname: `${pathname}/create-translation`,\n                          state: {\n                            type: content['@type'],\n                            translationOf: flattenToAppURL(content['@id']),\n                            language: lang,\n                          },\n                        }}\n                      >\n                        <Icon name={addSVG} size=\"24px\" />\n                      </Button>\n                    </Button.Group>\n                    {translations?.[lang] ? (\n                      <Button.Group>\n                        <Button\n                          aria-label={`${intl.formatMessage(\n                            messages.unlink,\n                          )} ${langmap[lang].nativeName.toLowerCase()}`}\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() => onDeleteTranslation(lang)}\n                        >\n                          <Icon\n                            name={\n                              lang === content.language.token\n                                ? linkSVG\n                                : unlinkSVG\n                            }\n                            size=\"24px\"\n                          />\n                        </Button>\n                      </Button.Group>\n                    ) : (\n                      <Button.Group>\n                        <Button\n                          aria-label={`${intl.formatMessage(\n                            messages.link,\n                          )} ${langmap[lang].nativeName.toLowerCase()}`}\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() =>\n                            openObjectBrowser({\n                              mode: 'link',\n                              overlay: true,\n                              onSelectItem: (url) => {\n                                onSelectTarget(url, isObjectBrowserOpen);\n                              },\n                            })\n                          }\n                        >\n                          <Icon name={linkSVG} size=\"24px\" />\n                        </Button>\n                      </Button.Group>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {__CLIENT__ && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to={`${getBaseUrl(pathname)}`} className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Segment.Group>\n    </Container>\n  );\n};\n\nexport default withObjectBrowser(ManageTranslations);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Translation linked","defaultMessage":"Translation linked"},{"id":"Translation linking removed","defaultMessage":"Translation linking removed"},{"id":"Link translation for","defaultMessage":"Link translation for"},{"id":"Unlink translation for","defaultMessage":"Unlink translation for"},{"id":"Manage Translations","defaultMessage":"Manage Translations"},{"id":"Manage translations for {title}","defaultMessage":"Manage translations for {title}"},{"id":"Back","defaultMessage":"Back"}]}},"sourceType":"module"}