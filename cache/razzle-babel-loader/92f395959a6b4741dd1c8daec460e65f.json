{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Extensions/withBlockExtensions.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n/**\n * A HOC to inject a block extension by resolving the configured extension\n */\nimport React from 'react';\nimport config from '@plone/volto/registry';\n/**\n * Retrieves the extension (variation) settings from the provided\n * configuration, based on incoming data.\n */\n\nexport function resolveExtension(name, extensions, data) {\n  const selectedExtension = data[name];\n  let index = extensions.findIndex(conf => conf.id === selectedExtension);\n\n  if (index === -1) {\n    index = extensions.findIndex(conf => conf.isDefault);\n  }\n\n  return index !== -1 ? extensions[index] : undefined;\n}\n/**\n * A block can declare extensions and variations like:\n *\n * {\n *  variations: [\n *    {\n *      id: \"summary\",\n *      isDefault: true,\n *      template: Something\n *    }\n *  ],\n *  extensions: {\n *    'extensionA': {\n *      items: [\n *        // something similar to variations\n *      ]\n *    }\n *  }\n * }\n *\n * Exactly what an extension and what a variation represent is only up to the\n * block. A block should incorporate these extension mechanisms and it should\n * define what information is needed from them.\n *\n * resolveBlockExtensions will return an object with\n * `{ extensions, resolvedExtensions}`, where:\n *\n * - extensions is the blocksConfig extensions object for that block\n * - resolvedExtensions is an object with\n *   `{ variation, <someExtensionA>, <someExtensionB> }` and each of these\n *   fields hold the coresponding definition object from the block's\n *   configuration.\n */\n\nexport function resolveBlockExtensions(data, blocksConfig) {\n  const block_type = data['@type'];\n  const {\n    extensions = {},\n    variations = []\n  } = (blocksConfig === null || blocksConfig === void 0 ? void 0 : blocksConfig[block_type]) || config.blocks.blocksConfig[block_type];\n  const resolvedExtensions = Object.assign({}, ...Object.keys(extensions).map(extensionName => ({\n    [extensionName]: resolveExtension(extensionName, extensions[extensionName].items || [], data, block_type)\n  })));\n\n  if (variations.length) {\n    const variation = data.variation ? variations.find(({\n      id\n    }) => id === data.variation) : variations.find(({\n      isDefault\n    }) => isDefault);\n    resolvedExtensions.variation = variation;\n  }\n\n  return {\n    extensions,\n    resolvedExtensions\n  };\n}\n\nconst withBlockExtensions = WrappedComponent => props => {\n  const {\n    data,\n    blocksConfig\n  } = props;\n  const {\n    extensions,\n    resolvedExtensions\n  } = resolveBlockExtensions(data, blocksConfig);\n  return __jsx(WrappedComponent, _extends({}, resolvedExtensions, props, {\n    extensions: extensions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default withBlockExtensions;","map":{"version":3,"names":["React","config","resolveExtension","name","extensions","data","selectedExtension","index","findIndex","conf","id","isDefault","undefined","resolveBlockExtensions","blocksConfig","block_type","variations","blocks","resolvedExtensions","Object","assign","keys","map","extensionName","items","length","variation","find","withBlockExtensions","WrappedComponent","props"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Extensions/withBlockExtensions.js"],"sourcesContent":["/**\n * A HOC to inject a block extension by resolving the configured extension\n */\n\nimport React from 'react';\nimport config from '@plone/volto/registry';\n\n/**\n * Retrieves the extension (variation) settings from the provided\n * configuration, based on incoming data.\n */\nexport function resolveExtension(name, extensions, data) {\n  const selectedExtension = data[name];\n\n  let index = extensions.findIndex((conf) => conf.id === selectedExtension);\n\n  if (index === -1) {\n    index = extensions.findIndex((conf) => conf.isDefault);\n  }\n\n  return index !== -1 ? extensions[index] : undefined;\n}\n\n/**\n * A block can declare extensions and variations like:\n *\n * {\n *  variations: [\n *    {\n *      id: \"summary\",\n *      isDefault: true,\n *      template: Something\n *    }\n *  ],\n *  extensions: {\n *    'extensionA': {\n *      items: [\n *        // something similar to variations\n *      ]\n *    }\n *  }\n * }\n *\n * Exactly what an extension and what a variation represent is only up to the\n * block. A block should incorporate these extension mechanisms and it should\n * define what information is needed from them.\n *\n * resolveBlockExtensions will return an object with\n * `{ extensions, resolvedExtensions}`, where:\n *\n * - extensions is the blocksConfig extensions object for that block\n * - resolvedExtensions is an object with\n *   `{ variation, <someExtensionA>, <someExtensionB> }` and each of these\n *   fields hold the coresponding definition object from the block's\n *   configuration.\n */\nexport function resolveBlockExtensions(data, blocksConfig) {\n  const block_type = data['@type'];\n\n  const { extensions = {}, variations = [] } =\n    blocksConfig?.[block_type] || config.blocks.blocksConfig[block_type];\n\n  const resolvedExtensions = Object.assign(\n    {},\n    ...Object.keys(extensions).map((extensionName) => ({\n      [extensionName]: resolveExtension(\n        extensionName,\n        extensions[extensionName].items || [],\n        data,\n        block_type,\n      ),\n    })),\n  );\n\n  if (variations.length) {\n    const variation = data.variation\n      ? variations.find(({ id }) => id === data.variation)\n      : variations.find(({ isDefault }) => isDefault);\n    resolvedExtensions.variation = variation;\n  }\n\n  return { extensions, resolvedExtensions };\n}\n\nconst withBlockExtensions = (WrappedComponent) => (props) => {\n  const { data, blocksConfig } = props;\n\n  const { extensions, resolvedExtensions } = resolveBlockExtensions(\n    data,\n    blocksConfig,\n  );\n  return (\n    <WrappedComponent\n      {...resolvedExtensions}\n      {...props}\n      extensions={extensions}\n    />\n  );\n};\n\nexport default withBlockExtensions;\n"],"mappings":";;;;;AAAA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkD;EACvD,MAAMC,iBAAiB,GAAGD,IAAI,CAACF,IAAD,CAA9B;EAEA,IAAII,KAAK,GAAGH,UAAU,CAACI,SAAX,CAAsBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,iBAA3C,CAAZ;;EAEA,IAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;IAChBA,KAAK,GAAGH,UAAU,CAACI,SAAX,CAAsBC,IAAD,IAAUA,IAAI,CAACE,SAApC,CAAR;EACD;;EAED,OAAOJ,KAAK,KAAK,CAAC,CAAX,GAAeH,UAAU,CAACG,KAAD,CAAzB,GAAmCK,SAA1C;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAgCR,IAAhC,EAAsCS,YAAtC,EAAoD;EACzD,MAAMC,UAAU,GAAGV,IAAI,CAAC,OAAD,CAAvB;EAEA,MAAM;IAAED,UAAU,GAAG,EAAf;IAAmBY,UAAU,GAAG;EAAhC,IACJ,CAAAF,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAGC,UAAH,CAAZ,KAA8Bd,MAAM,CAACgB,MAAP,CAAcH,YAAd,CAA2BC,UAA3B,CADhC;EAGA,MAAMG,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CACzB,EADyB,EAEzB,GAAGD,MAAM,CAACE,IAAP,CAAYjB,UAAZ,EAAwBkB,GAAxB,CAA6BC,aAAD,KAAoB;IACjD,CAACA,aAAD,GAAiBrB,gBAAgB,CAC/BqB,aAD+B,EAE/BnB,UAAU,CAACmB,aAAD,CAAV,CAA0BC,KAA1B,IAAmC,EAFJ,EAG/BnB,IAH+B,EAI/BU,UAJ+B;EADgB,CAApB,CAA5B,CAFsB,CAA3B;;EAYA,IAAIC,UAAU,CAACS,MAAf,EAAuB;IACrB,MAAMC,SAAS,GAAGrB,IAAI,CAACqB,SAAL,GACdV,UAAU,CAACW,IAAX,CAAgB,CAAC;MAAEjB;IAAF,CAAD,KAAYA,EAAE,KAAKL,IAAI,CAACqB,SAAxC,CADc,GAEdV,UAAU,CAACW,IAAX,CAAgB,CAAC;MAAEhB;IAAF,CAAD,KAAmBA,SAAnC,CAFJ;IAGAO,kBAAkB,CAACQ,SAAnB,GAA+BA,SAA/B;EACD;;EAED,OAAO;IAAEtB,UAAF;IAAcc;EAAd,CAAP;AACD;;AAED,MAAMU,mBAAmB,GAAIC,gBAAD,IAAuBC,KAAD,IAAW;EAC3D,MAAM;IAAEzB,IAAF;IAAQS;EAAR,IAAyBgB,KAA/B;EAEA,MAAM;IAAE1B,UAAF;IAAcc;EAAd,IAAqCL,sBAAsB,CAC/DR,IAD+D,EAE/DS,YAF+D,CAAjE;EAIA,OACE,MAAC,gBAAD,eACMI,kBADN,EAEMY,KAFN;IAGE,UAAU,EAAE1B,UAHd;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GADF;AAOD,CAdD;;AAgBA,eAAewB,mBAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}