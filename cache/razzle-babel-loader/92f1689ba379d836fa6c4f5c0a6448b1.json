{"ast":null,"code":"import _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Comments/CommentEditModal.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Comment edit modal.\n * @module components/theme/Comments/CommentEditModal\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { updateComment } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nconst messages = defineMessages({\n  editComment: {\n    \"id\": \"Edit comment\",\n    \"defaultMessage\": \"Edit comment\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  comment: {\n    \"id\": \"Comment\",\n    \"defaultMessage\": \"Comment\"\n  }\n});\n/**\n * CommentEditModal class.\n * @class CommentEditModal\n * @extends Component\n */\n\nclass CommentEditModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs CommentEditModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    this.props.updateComment(this.props.id, data.text);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return this.props.open && __jsx(ModalForm, {\n      open: this.props.open,\n      onSubmit: this.onSubmit,\n      onCancel: this.props.onCancel,\n      formData: {\n        text: this.props.text\n      },\n      title: this.props.intl.formatMessage(messages.editComment),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['text']\n        }],\n        properties: {\n          text: {\n            title: this.props.intl.formatMessage(messages.comment),\n            type: 'string',\n            description: ''\n          }\n        },\n        required: ['text']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\n_defineProperty(CommentEditModal, \"propTypes\", {\n  updateComment: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  text: PropTypes.string,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\n\n_defineProperty(CommentEditModal, \"defaultProps\", {\n  id: '',\n  text: ''\n});\n\nexport default compose(injectIntl, connect(state => ({\n  request: state.comments.update\n}), {\n  updateComment\n}))(CommentEditModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","updateComment","ModalForm","messages","editComment","default","comment","CommentEditModal","constructor","props","onSubmit","bind","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","data","id","text","render","open","onCancel","intl","formatMessage","fieldsets","title","fields","properties","type","description","required","func","isRequired","string","shape","bool","state","comments","update"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/Comments/CommentEditModal.jsx"],"sourcesContent":["/**\n * Comment edit modal.\n * @module components/theme/Comments/CommentEditModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateComment } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  editComment: {\n    id: 'Edit comment',\n    defaultMessage: 'Edit comment',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n});\n\n/**\n * CommentEditModal class.\n * @class CommentEditModal\n * @extends Component\n */\nclass CommentEditModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateComment: PropTypes.func.isRequired,\n    id: PropTypes.string,\n    text: PropTypes.string,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    id: '',\n    text: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs CommentEditModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateComment(this.props.id, data.text);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={{ text: this.props.text }}\n          title={this.props.intl.formatMessage(messages.editComment)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['text'],\n              },\n            ],\n            properties: {\n              text: {\n                title: this.props.intl.formatMessage(messages.comment),\n                type: 'string',\n                description: '',\n              },\n            },\n            required: ['text'],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.comments.update,\n    }),\n    { updateComment },\n  ),\n)(CommentEditModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Edit comment","defaultMessage":"Edit comment"},{"id":"Default","defaultMessage":"Default"},{"id":"Comment","defaultMessage":"Comment"}]}},"sourceType":"module"}