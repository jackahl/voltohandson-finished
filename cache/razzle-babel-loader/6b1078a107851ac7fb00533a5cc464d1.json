{"ast":null,"code":"import _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Aliases.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Moderate comments component.\n * @module components/manage/Controlpanels/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getBaseUrl, getParentUrl, Helmet } from '@plone/volto/helpers';\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\nimport { Portal } from 'react-portal';\nimport { Container, Button, Segment, Form, Checkbox, Header, Input, Radio, Message, Table, Pagination, Menu } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport DatetimeWidget from '@plone/volto/components/manage/Widgets/DatetimeWidget';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  aliases: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  successAdd: {\n    \"id\": \"Alias has been added\",\n    \"defaultMessage\": \"Alias has been added\"\n  }\n});\nconst filterChoices = [{\n  label: 'Both',\n  value: ''\n}, {\n  label: 'Automatically',\n  value: 'no'\n}, {\n  label: 'Manually',\n  value: 'yes'\n}];\nconst itemsPerPageChoices = [10, 25, 50, 'All'];\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\n\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleRemoveAliases\", () => {\n      const items = this.state.aliasesToRemove.map(a => {\n        return {\n          path: a\n        };\n      });\n      this.props.removeAliases('', {\n        items\n      });\n      this.setState({\n        aliasesToRemove: []\n      });\n    });\n\n    this.state = {\n      isClient: false,\n      filterType: filterChoices[0],\n      createdBefore: null,\n      altUrlPath: '',\n      isAltUrlCorrect: false,\n      targetUrlPath: '',\n      isTargetUrlCorrect: false,\n      aliasesToRemove: [],\n      errorMessageAdd: '',\n      filterQuery: '',\n      aliases: [],\n      activePage: 1,\n      pages: '',\n      itemsPerPage: 10\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    const {\n      filterQuery,\n      filterType,\n      createdBefore,\n      itemsPerPage\n    } = this.state;\n    this.setState({\n      isClient: true\n    });\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: filterQuery,\n      manual: filterType.value,\n      datetime: createdBefore,\n      batchSize: itemsPerPage\n    });\n  }\n  /**\n   * Component did mount\n   * @method componentDidUpdate\n   * @returns {undefined}\n   */\n\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      filterQuery,\n      filterType,\n      createdBefore,\n      itemsPerPage\n    } = this.state;\n\n    if (prevProps.aliases.items_total !== this.props.aliases.items_total || prevState.itemsPerPage !== this.state.itemsPerPage) {\n      const pages = Math.ceil(this.props.aliases.items_total / this.state.itemsPerPage);\n\n      if (pages === 0 || isNaN(pages)) {\n        this.setState({\n          pages: ''\n        });\n      } else {\n        this.setState({\n          pages\n        });\n      }\n    }\n\n    if (prevState.activePage !== this.state.activePage || prevState.itemsPerPage !== this.state.itemsPerPage) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: filterQuery,\n        manual: filterType.value,\n        datetime: createdBefore,\n        batchSize: itemsPerPage === 'All' ? 999999999999 : itemsPerPage,\n        batchStart: (this.state.activePage - 1) * this.state.itemsPerPage\n      });\n    }\n\n    if (prevState.altUrlPath !== this.state.altUrlPath) {\n      if (this.state.altUrlPath.charAt(0) === '/') {\n        this.setState({\n          isAltUrlCorrect: true\n        });\n      } else {\n        this.setState({\n          isAltUrlCorrect: false\n        });\n      }\n    }\n\n    if (prevState.targetUrlPath !== this.state.targetUrlPath) {\n      if (this.state.targetUrlPath.charAt(0) === '/') {\n        this.setState({\n          isTargetUrlCorrect: true\n        });\n      } else {\n        this.setState({\n          isTargetUrlCorrect: false\n        });\n      }\n    }\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && !nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({\n          errorMessageAdd: nextProps.aliases.add.error.response.body.message\n        });\n      }\n    }\n\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      const {\n        filterQuery,\n        filterType,\n        createdBefore,\n        itemsPerPage\n      } = this.state;\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: filterQuery,\n        manual: filterType.value,\n        datetime: createdBefore,\n        batchSize: itemsPerPage\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.successAdd),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }));\n\n      if (!nextProps.aliases.add.error) {\n        this.setState({\n          errorMessageAdd: ''\n        });\n      }\n    }\n\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      const {\n        filterQuery,\n        filterType,\n        createdBefore,\n        itemsPerPage\n      } = this.state;\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: filterQuery,\n        manual: filterType.value,\n        datetime: createdBefore,\n        batchSize: itemsPerPage\n      });\n    }\n  }\n  /**\n   * Back/Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    this.props.history.push(getParentUrl(this.props.pathname));\n  }\n  /**\n   * Select filter type handler\n   * @method handleSelectFilterType\n   * @returns {undefined}\n   */\n\n\n  handleSelectFilterType(type) {\n    this.setState({\n      filterType: type\n    });\n  }\n  /**\n   * Select filter type handler\n   * @method handleFilterQueryChange\n   * @returns {undefined}\n   */\n\n\n  handleFilterQueryChange(query) {\n    this.setState({\n      filterQuery: query\n    });\n  }\n  /**\n   * Select Creation date handler\n   * @method handleCreateDate\n   * @returns {undefined}\n   */\n\n\n  handleCreateDate(date) {\n    this.setState({\n      createdBefore: date\n    });\n  }\n  /**\n   * Select Creation date handler\n   * @method handleSubmitFilter\n   * @returns {undefined}\n   */\n\n\n  handleSubmitFilter() {\n    const {\n      filterQuery,\n      filterType,\n      createdBefore,\n      itemsPerPage\n    } = this.state;\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: filterQuery,\n      manual: filterType.value,\n      datetime: createdBefore,\n      batchSize: itemsPerPage\n    });\n  }\n  /**\n   * Alternative url handler\n   * @method handleAltUrlChange\n   * @returns {undefined}\n   */\n\n\n  handleAltUrlChange(url) {\n    this.setState({\n      altUrlPath: url\n    });\n  }\n  /**\n   * Target url handler\n   * @method handleTargetUrlChange\n   * @returns {undefined}\n   */\n\n\n  handleTargetUrlChange(url) {\n    this.setState({\n      targetUrlPath: url\n    });\n  }\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n\n\n  handleSubmitAlias() {\n    if (this.state.isAltUrlCorrect && this.state.isTargetUrlCorrect) {\n      this.props.addAliases('', {\n        items: [{\n          path: this.state.altUrlPath,\n          'redirect-to': this.state.targetUrlPath\n        }]\n      });\n      this.setState({\n        altUrlPath: '',\n        targetUrlPath: ''\n      });\n    }\n  }\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n\n\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({\n          aliasesToRemove: newAliasesArr\n        });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias]\n      });\n    }\n  }\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n\n\n  /**\n   * Pagination change handler\n   * @method handlePageChange\n   * @returns {undefined}\n   */\n  handlePageChange(e, _ref) {\n    let {\n      activePage\n    } = _ref;\n    this.setState({\n      activePage\n    });\n  }\n  /**\n   * Items per page change handler\n   * @method handleItemsPerPage\n   * @returns {undefined}\n   */\n\n\n  handleItemsPerPage(e, _ref2) {\n    let {\n      value\n    } = _ref2;\n    this.setState({\n      itemsPerPage: value,\n      activePage: 1\n    });\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"page-aliases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.aliases),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }\n    }, __jsx(\"article\", {\n      id: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 13\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"URL Management\",\n      defaultMessage: \"URL Management\",\n      values: {\n        title: __jsx(\"q\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 36\n          }\n        }, this.props.title)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 17\n      }\n    })), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }\n    }, __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alternative url path (Required)\",\n      defaultMessage: \"Alternative url path (Required)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    })), __jsx(\"p\", {\n      className: \"help\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      defaultMessage: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 21\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 19\n      }\n    }, __jsx(Input, {\n      id: \"alternative-url-input\",\n      name: \"alternative-url-path\",\n      placeholder: \"/example\",\n      value: this.state.altUrlPath,\n      onChange: e => this.handleAltUrlChange(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }\n    }), !this.state.isAltUrlCorrect && this.state.altUrlPath !== '' && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alternative url path must start with a slash.\",\n      defaultMessage: \"Alternative url path must start with a slash.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 27\n      }\n    }))), __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Target Path (Required)\",\n      defaultMessage: \"Target Path (Required)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }\n    })), __jsx(\"p\", {\n      className: \"help\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enter the absolute path of the target. The path must start with '/'. Target must exist or be an existing alternative url path to the target.\",\n      defaultMessage: \"Enter the absolute path of the target. The path must start with '/'. Target must exist or be an existing alternative url path to the target.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 21\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 19\n      }\n    }, __jsx(Input, {\n      id: \"target-url-input\",\n      name: \"target-url-path\",\n      placeholder: \"/example\",\n      value: this.state.targetUrlPath,\n      onChange: e => this.handleTargetUrlChange(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 21\n      }\n    }), !this.state.isTargetUrlCorrect && this.state.targetUrlPath !== '' && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Target url path must start with a slash.\",\n      defaultMessage: \"Target url path must start with a slash.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 27\n      }\n    }))), __jsx(Button, {\n      id: \"submit-alias\",\n      primary: true,\n      onClick: () => this.handleSubmitAlias(),\n      disabled: !this.state.isAltUrlCorrect || !this.state.isTargetUrlCorrect || this.state.altUrlPath === '' || this.state.targetUrlPath === '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 21\n      }\n    })), this.state.errorMessageAdd && __jsx(Message, {\n      color: \"red\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 21\n      }\n    }, __jsx(Message.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 23\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"ErrorHeader\",\n      defaultMessage: \"Error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 25\n      }\n    })), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 23\n      }\n    }, this.state.errorMessageAdd)))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 15\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }\n    }, __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"All existing alternative urls for this site\",\n      defaultMessage: \"All existing alternative urls for this site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 21\n      }\n    })), __jsx(Header, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Filter by prefix\",\n      defaultMessage: \"Filter by prefix\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 21\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 19\n      }\n    }, __jsx(Input, {\n      name: \"filter\",\n      placeholder: \"/example\",\n      value: this.state.filterQuery,\n      onChange: e => this.handleFilterQueryChange(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 21\n      }\n    })), __jsx(Header, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Manually or automatically added?\",\n      defaultMessage: \"Manually or automatically added?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 21\n      }\n    })), filterChoices.map((o, i) => __jsx(Form.Field, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 21\n      }\n    }, __jsx(Radio, {\n      label: o.label,\n      name: \"radioGroup\",\n      value: o.value,\n      checked: this.state.filterType === o,\n      onChange: () => this.handleSelectFilterType(o),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 23\n      }\n    }))), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 19\n      }\n    }, __jsx(DatetimeWidget, {\n      id: \"created-before-date\",\n      title: 'Created before',\n      dateOnly: true,\n      value: this.state.createdBefore,\n      onChange: (id, value) => {\n        this.handleCreateDate(value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 21\n      }\n    })), __jsx(Button, {\n      onClick: () => this.handleSubmitFilter(),\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 19\n      }\n    }, \"Filter\"), __jsx(Header, {\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alternative url path \\u2192 target url path (date and time of creation, manually created yes/no)\",\n      defaultMessage: \"Alternative url path \\u2192 target url path (date and time of creation, manually created yes/no)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 21\n      }\n    })), __jsx(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 19\n      }\n    }, __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 21\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 23\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Select\",\n      defaultMessage: \"Select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 27\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alias\",\n      defaultMessage: \"Alias\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 27\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Target\",\n      defaultMessage: \"Target\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 27\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Date\",\n      defaultMessage: \"Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 27\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Manual\",\n      defaultMessage: \"Manual\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 27\n      }\n    }))), this.props.aliases.items.length > 0 && this.props.aliases.items.map((alias, i) => __jsx(Table.Row, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 27\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 29\n      }\n    }, __jsx(Checkbox, {\n      onChange: (e, _ref3) => {\n        let {\n          value\n        } = _ref3;\n        return this.handleCheckAlias(value);\n      },\n      checked: this.state.aliasesToRemove.includes(alias.path),\n      value: alias.path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 31\n      }\n    })), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 29\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 31\n      }\n    }, alias.path)), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 29\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 31\n      }\n    }, alias['redirect-to'])), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 29\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 31\n      }\n    }, alias.datetime)), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 29\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 31\n      }\n    }, `${alias.manual}`)))))), __jsx(\"div\", {\n      style: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        marginBottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 19\n      }\n    }, this.state.pages && __jsx(Pagination, {\n      boundaryRange: 0,\n      activePage: this.state.activePage,\n      ellipsisItem: null,\n      firstItem: null,\n      lastItem: null,\n      siblingRange: 1,\n      totalPages: this.state.pages,\n      onPageChange: (e, o) => this.handlePageChange(e, o),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 23\n      }\n    }), __jsx(Menu.Menu, {\n      position: \"right\",\n      style: {\n        display: 'flex',\n        marginLeft: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 21\n      }\n    }, __jsx(Menu.Item, {\n      style: {\n        color: 'grey'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 23\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Show\",\n      defaultMessage: \"Show\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 25\n      }\n    }), \":\"), _map(itemsPerPageChoices, size => __jsx(Menu.Item, {\n      style: {\n        padding: '0 0.4em',\n        margin: '0em 0.357em',\n        cursor: 'pointer'\n      },\n      key: size,\n      value: size,\n      active: size === this.state.itemsPerPage,\n      onClick: (e, o) => this.handleItemsPerPage(e, o),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 25\n      }\n    }, size)))), __jsx(Button, {\n      disabled: this.state.aliasesToRemove.length === 0,\n      onClick: this.handleRemoveAliases,\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Remove selected\",\n      defaultMessage: \"Remove selected\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 21\n      }\n    }))))))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        className: \"item\",\n        to: \"#\",\n        onClick: () => this.onCancel(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(Aliases, \"propTypes\", {\n  addAliases: PropTypes.func.isRequired,\n  getAliases: PropTypes.func.isRequired,\n  removeAliases: PropTypes.func.isRequired\n});\n\nexport default compose(injectIntl, connect((state, props) => ({\n  aliases: state.aliases,\n  pathname: props.location.pathname\n}), {\n  addAliases,\n  getAliases,\n  removeAliases\n}))(Aliases);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","getBaseUrl","getParentUrl","Helmet","removeAliases","addAliases","getAliases","Portal","Container","Button","Segment","Form","Checkbox","Header","Input","Radio","Message","Table","Pagination","Menu","FormattedMessage","defineMessages","injectIntl","DatetimeWidget","Icon","Toolbar","backSVG","toast","Toast","messages","back","aliases","success","successAdd","filterChoices","label","value","itemsPerPageChoices","Aliases","constructor","props","items","state","aliasesToRemove","map","a","path","setState","isClient","filterType","createdBefore","altUrlPath","isAltUrlCorrect","targetUrlPath","isTargetUrlCorrect","errorMessageAdd","filterQuery","activePage","pages","itemsPerPage","componentDidMount","pathname","query","manual","datetime","batchSize","componentDidUpdate","prevProps","prevState","items_total","Math","ceil","isNaN","batchStart","charAt","UNSAFE_componentWillReceiveProps","nextProps","add","loading","loaded","error","response","body","message","intl","formatMessage","remove","onCancel","history","push","handleSelectFilterType","type","handleFilterQueryChange","handleCreateDate","date","handleSubmitFilter","handleAltUrlChange","url","handleTargetUrlChange","handleSubmitAlias","handleCheckAlias","alias","includes","index","indexOf","newAliasesArr","splice","handlePageChange","e","handleItemsPerPage","render","title","target","color","o","i","id","length","display","flexWrap","alignItems","marginBottom","marginLeft","size","padding","margin","cursor","handleRemoveAliases","document","getElementById","func","isRequired","location"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Aliases.jsx"],"sourcesContent":["/**\n * Moderate comments component.\n * @module components/manage/Controlpanels/Aliases\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getBaseUrl, getParentUrl, Helmet } from '@plone/volto/helpers';\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\nimport { Portal } from 'react-portal';\nimport {\n  Container,\n  Button,\n  Segment,\n  Form,\n  Checkbox,\n  Header,\n  Input,\n  Radio,\n  Message,\n  Table,\n  Pagination,\n  Menu,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport DatetimeWidget from '@plone/volto/components/manage/Widgets/DatetimeWidget';\nimport { Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { map } from 'lodash';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  aliases: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  successAdd: {\n    id: 'Alias has been added',\n    defaultMessage: 'Alias has been added',\n  },\n});\n\nconst filterChoices = [\n  { label: 'Both', value: '' },\n  { label: 'Automatically', value: 'no' },\n  { label: 'Manually', value: 'yes' },\n];\n\nconst itemsPerPageChoices = [10, 25, 50, 'All'];\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    addAliases: PropTypes.func.isRequired,\n    getAliases: PropTypes.func.isRequired,\n    removeAliases: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      filterType: filterChoices[0],\n      createdBefore: null,\n      altUrlPath: '',\n      isAltUrlCorrect: false,\n      targetUrlPath: '',\n      isTargetUrlCorrect: false,\n      aliasesToRemove: [],\n      errorMessageAdd: '',\n      filterQuery: '',\n      aliases: [],\n      activePage: 1,\n      pages: '',\n      itemsPerPage: 10,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    const { filterQuery, filterType, createdBefore, itemsPerPage } = this.state;\n    this.setState({ isClient: true });\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: filterQuery,\n      manual: filterType.value,\n      datetime: createdBefore,\n      batchSize: itemsPerPage,\n    });\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidUpdate\n   * @returns {undefined}\n   */\n  componentDidUpdate(prevProps, prevState) {\n    const { filterQuery, filterType, createdBefore, itemsPerPage } = this.state;\n    if (\n      prevProps.aliases.items_total !== this.props.aliases.items_total ||\n      prevState.itemsPerPage !== this.state.itemsPerPage\n    ) {\n      const pages = Math.ceil(\n        this.props.aliases.items_total / this.state.itemsPerPage,\n      );\n\n      if (pages === 0 || isNaN(pages)) {\n        this.setState({ pages: '' });\n      } else {\n        this.setState({ pages });\n      }\n    }\n    if (\n      prevState.activePage !== this.state.activePage ||\n      prevState.itemsPerPage !== this.state.itemsPerPage\n    ) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: filterQuery,\n        manual: filterType.value,\n        datetime: createdBefore,\n        batchSize: itemsPerPage === 'All' ? 999999999999 : itemsPerPage,\n        batchStart: (this.state.activePage - 1) * this.state.itemsPerPage,\n      });\n    }\n    if (prevState.altUrlPath !== this.state.altUrlPath) {\n      if (this.state.altUrlPath.charAt(0) === '/') {\n        this.setState({ isAltUrlCorrect: true });\n      } else {\n        this.setState({ isAltUrlCorrect: false });\n      }\n    }\n\n    if (prevState.targetUrlPath !== this.state.targetUrlPath) {\n      if (this.state.targetUrlPath.charAt(0) === '/') {\n        this.setState({ isTargetUrlCorrect: true });\n      } else {\n        this.setState({ isTargetUrlCorrect: false });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && !nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({\n          errorMessageAdd: nextProps.aliases.add.error.response.body.message,\n        });\n      }\n    }\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      const {\n        filterQuery,\n        filterType,\n        createdBefore,\n        itemsPerPage,\n      } = this.state;\n\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: filterQuery,\n        manual: filterType.value,\n        datetime: createdBefore,\n        batchSize: itemsPerPage,\n      });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.successAdd)}\n        />,\n      );\n      if (!nextProps.aliases.add.error) {\n        this.setState({\n          errorMessageAdd: '',\n        });\n      }\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      const {\n        filterQuery,\n        filterType,\n        createdBefore,\n        itemsPerPage,\n      } = this.state;\n\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: filterQuery,\n        manual: filterType.value,\n        datetime: createdBefore,\n        batchSize: itemsPerPage,\n      });\n    }\n  }\n\n  /**\n   * Back/Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.push(getParentUrl(this.props.pathname));\n  }\n\n  /**\n   * Select filter type handler\n   * @method handleSelectFilterType\n   * @returns {undefined}\n   */\n  handleSelectFilterType(type) {\n    this.setState({ filterType: type });\n  }\n\n  /**\n   * Select filter type handler\n   * @method handleFilterQueryChange\n   * @returns {undefined}\n   */\n  handleFilterQueryChange(query) {\n    this.setState({ filterQuery: query });\n  }\n\n  /**\n   * Select Creation date handler\n   * @method handleCreateDate\n   * @returns {undefined}\n   */\n  handleCreateDate(date) {\n    this.setState({ createdBefore: date });\n  }\n\n  /**\n   * Select Creation date handler\n   * @method handleSubmitFilter\n   * @returns {undefined}\n   */\n  handleSubmitFilter() {\n    const { filterQuery, filterType, createdBefore, itemsPerPage } = this.state;\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: filterQuery,\n      manual: filterType.value,\n      datetime: createdBefore,\n      batchSize: itemsPerPage,\n    });\n  }\n\n  /**\n   * Alternative url handler\n   * @method handleAltUrlChange\n   * @returns {undefined}\n   */\n  handleAltUrlChange(url) {\n    this.setState({ altUrlPath: url });\n  }\n\n  /**\n   * Target url handler\n   * @method handleTargetUrlChange\n   * @returns {undefined}\n   */\n  handleTargetUrlChange(url) {\n    this.setState({ targetUrlPath: url });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAltUrlCorrect && this.state.isTargetUrlCorrect) {\n      this.props.addAliases('', {\n        items: [\n          {\n            path: this.state.altUrlPath,\n            'redirect-to': this.state.targetUrlPath,\n          },\n        ],\n      });\n      this.setState({ altUrlPath: '', targetUrlPath: '' });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({ aliasesToRemove: newAliasesArr });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias],\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases = () => {\n    const items = this.state.aliasesToRemove.map((a) => {\n      return {\n        path: a,\n      };\n    });\n    this.props.removeAliases('', {\n      items,\n    });\n    this.setState({ aliasesToRemove: [] });\n  };\n\n  /**\n   * Pagination change handler\n   * @method handlePageChange\n   * @returns {undefined}\n   */\n  handlePageChange(e, { activePage }) {\n    this.setState({ activePage });\n  }\n\n  /**\n   * Items per page change handler\n   * @method handleItemsPerPage\n   * @returns {undefined}\n   */\n  handleItemsPerPage(e, { value }) {\n    this.setState({ itemsPerPage: value, activePage: 1 });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-aliases\">\n        <Helmet title={this.props.intl.formatMessage(messages.aliases)} />\n        <Container>\n          <article id=\"content\">\n            <Segment.Group raised>\n              <Segment className=\"primary\">\n                <FormattedMessage\n                  id=\"URL Management\"\n                  defaultMessage=\"URL Management\"\n                  values={{ title: <q>{this.props.title}</q> }}\n                />\n              </Segment>\n              <Form>\n                <Segment>\n                  <Header size=\"medium\">\n                    <FormattedMessage\n                      id=\"Alternative url path (Required)\"\n                      defaultMessage=\"Alternative url path (Required)\"\n                    />\n                  </Header>\n                  <p className=\"help\">\n                    <FormattedMessage\n                      id=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                      defaultMessage=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                    />\n                  </p>\n                  <Form.Field>\n                    <Input\n                      id=\"alternative-url-input\"\n                      name=\"alternative-url-path\"\n                      placeholder=\"/example\"\n                      value={this.state.altUrlPath}\n                      onChange={(e) => this.handleAltUrlChange(e.target.value)}\n                    />\n                    {!this.state.isAltUrlCorrect &&\n                      this.state.altUrlPath !== '' && (\n                        <p style={{ color: 'red' }}>\n                          <FormattedMessage\n                            id=\"Alternative url path must start with a slash.\"\n                            defaultMessage=\"Alternative url path must start with a slash.\"\n                          />\n                        </p>\n                      )}\n                  </Form.Field>\n                  <Header size=\"medium\">\n                    <FormattedMessage\n                      id=\"Target Path (Required)\"\n                      defaultMessage=\"Target Path (Required)\"\n                    />\n                  </Header>\n                  <p className=\"help\">\n                    <FormattedMessage\n                      id=\"Enter the absolute path of the target. The path must start with '/'. Target must exist or be an existing alternative url path to the target.\"\n                      defaultMessage=\"Enter the absolute path of the target. The path must start with '/'. Target must exist or be an existing alternative url path to the target.\"\n                    />\n                  </p>\n                  <Form.Field>\n                    <Input\n                      id=\"target-url-input\"\n                      name=\"target-url-path\"\n                      placeholder=\"/example\"\n                      value={this.state.targetUrlPath}\n                      onChange={(e) =>\n                        this.handleTargetUrlChange(e.target.value)\n                      }\n                    />\n                    {!this.state.isTargetUrlCorrect &&\n                      this.state.targetUrlPath !== '' && (\n                        <p style={{ color: 'red' }}>\n                          <FormattedMessage\n                            id=\"Target url path must start with a slash.\"\n                            defaultMessage=\"Target url path must start with a slash.\"\n                          />\n                        </p>\n                      )}\n                  </Form.Field>\n                  <Button\n                    id=\"submit-alias\"\n                    primary\n                    onClick={() => this.handleSubmitAlias()}\n                    disabled={\n                      !this.state.isAltUrlCorrect ||\n                      !this.state.isTargetUrlCorrect ||\n                      this.state.altUrlPath === '' ||\n                      this.state.targetUrlPath === ''\n                    }\n                  >\n                    <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n                  </Button>\n                  {this.state.errorMessageAdd && (\n                    <Message color=\"red\">\n                      <Message.Header>\n                        <FormattedMessage\n                          id=\"ErrorHeader\"\n                          defaultMessage=\"Error\"\n                        />\n                      </Message.Header>\n                      <p>{this.state.errorMessageAdd}</p>\n                    </Message>\n                  )}\n                </Segment>\n              </Form>\n              <Form>\n                <Segment className=\"primary\">\n                  <Header size=\"medium\">\n                    <FormattedMessage\n                      id=\"All existing alternative urls for this site\"\n                      defaultMessage=\"All existing alternative urls for this site\"\n                    />\n                  </Header>\n                  <Header size=\"small\">\n                    <FormattedMessage\n                      id=\"Filter by prefix\"\n                      defaultMessage=\"Filter by prefix\"\n                    />\n                  </Header>\n                  <Form.Field>\n                    <Input\n                      name=\"filter\"\n                      placeholder=\"/example\"\n                      value={this.state.filterQuery}\n                      onChange={(e) =>\n                        this.handleFilterQueryChange(e.target.value)\n                      }\n                    />\n                  </Form.Field>\n                  <Header size=\"small\">\n                    <FormattedMessage\n                      id=\"Manually or automatically added?\"\n                      defaultMessage=\"Manually or automatically added?\"\n                    />\n                  </Header>\n                  {filterChoices.map((o, i) => (\n                    <Form.Field key={i}>\n                      <Radio\n                        label={o.label}\n                        name=\"radioGroup\"\n                        value={o.value}\n                        checked={this.state.filterType === o}\n                        onChange={() => this.handleSelectFilterType(o)}\n                      />\n                    </Form.Field>\n                  ))}\n                  <Form.Field>\n                    <DatetimeWidget\n                      id=\"created-before-date\"\n                      title={'Created before'}\n                      dateOnly={true}\n                      value={this.state.createdBefore}\n                      onChange={(id, value) => {\n                        this.handleCreateDate(value);\n                      }}\n                    />\n                  </Form.Field>\n                  <Button onClick={() => this.handleSubmitFilter()} primary>\n                    Filter\n                  </Button>\n                  <Header size=\"small\">\n                    <FormattedMessage\n                      id=\"Alternative url path → target url path (date and time of creation, manually created yes/no)\"\n                      defaultMessage=\"Alternative url path → target url path (date and time of creation, manually created yes/no)\"\n                    />\n                  </Header>\n\n                  <Table>\n                    <Table.Body>\n                      <Table.Row>\n                        <Table.HeaderCell>\n                          <FormattedMessage\n                            id=\"Select\"\n                            defaultMessage=\"Select\"\n                          />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                          <FormattedMessage id=\"Alias\" defaultMessage=\"Alias\" />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                          <FormattedMessage\n                            id=\"Target\"\n                            defaultMessage=\"Target\"\n                          />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                          <FormattedMessage id=\"Date\" defaultMessage=\"Date\" />\n                        </Table.HeaderCell>\n                        <Table.HeaderCell>\n                          <FormattedMessage\n                            id=\"Manual\"\n                            defaultMessage=\"Manual\"\n                          />\n                        </Table.HeaderCell>\n                      </Table.Row>\n                      {this.props.aliases.items.length > 0 &&\n                        this.props.aliases.items.map((alias, i) => (\n                          <Table.Row key={i}>\n                            <Table.Cell>\n                              <Checkbox\n                                onChange={(e, { value }) =>\n                                  this.handleCheckAlias(value)\n                                }\n                                checked={this.state.aliasesToRemove.includes(\n                                  alias.path,\n                                )}\n                                value={alias.path}\n                              />\n                            </Table.Cell>\n                            <Table.Cell>\n                              <p>{alias.path}</p>\n                            </Table.Cell>\n                            <Table.Cell>\n                              <p>{alias['redirect-to']}</p>\n                            </Table.Cell>\n                            <Table.Cell>\n                              <p>{alias.datetime}</p>\n                            </Table.Cell>\n                            <Table.Cell>\n                              <p>{`${alias.manual}`}</p>\n                            </Table.Cell>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                  <div\n                    style={{\n                      display: 'flex',\n                      flexWrap: 'wrap',\n                      alignItems: 'center',\n                      marginBottom: '20px',\n                    }}\n                  >\n                    {this.state.pages && (\n                      <Pagination\n                        boundaryRange={0}\n                        activePage={this.state.activePage}\n                        ellipsisItem={null}\n                        firstItem={null}\n                        lastItem={null}\n                        siblingRange={1}\n                        totalPages={this.state.pages}\n                        onPageChange={(e, o) => this.handlePageChange(e, o)}\n                      />\n                    )}\n                    <Menu.Menu\n                      position=\"right\"\n                      style={{ display: 'flex', marginLeft: 'auto' }}\n                    >\n                      <Menu.Item style={{ color: 'grey' }}>\n                        <FormattedMessage id=\"Show\" defaultMessage=\"Show\" />:\n                      </Menu.Item>\n                      {map(itemsPerPageChoices, (size) => (\n                        <Menu.Item\n                          style={{\n                            padding: '0 0.4em',\n                            margin: '0em 0.357em',\n                            cursor: 'pointer',\n                          }}\n                          key={size}\n                          value={size}\n                          active={size === this.state.itemsPerPage}\n                          onClick={(e, o) => this.handleItemsPerPage(e, o)}\n                        >\n                          {size}\n                        </Menu.Item>\n                      ))}\n                    </Menu.Menu>\n                  </div>\n                  <Button\n                    disabled={this.state.aliasesToRemove.length === 0}\n                    onClick={this.handleRemoveAliases}\n                    primary\n                  >\n                    <FormattedMessage\n                      id=\"Remove selected\"\n                      defaultMessage=\"Remove selected\"\n                    />\n                  </Button>\n                </Segment>\n              </Form>\n            </Segment.Group>\n          </article>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      aliases: state.aliases,\n      pathname: props.location.pathname,\n    }),\n    { addAliases, getAliases, removeAliases },\n  ),\n)(Aliases);\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,MAAnC,QAAiD,sBAAjD;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,UAApC,QAAsD,sBAAtD;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SACEC,SADF,EAEEC,MAFF,EAGEC,OAHF,EAIEC,IAJF,EAKEC,QALF,EAMEC,MANF,EAOEC,KAPF,EAQEC,KARF,EASEC,OATF,EAUEC,KAVF,EAWEC,UAXF,EAYEC,IAZF,QAaO,mBAbP;AAcA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,YAA7D;AACA,OAAOC,cAAP,MAA2B,uDAA3B;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,yBAA9B;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,MAAMC,QAAQ,GAAGR,cAAc,CAAC;EAC9BS,IAAI;IAAA;IAAA;EAAA,CAD0B;EAK9BC,OAAO;IAAA;IAAA;EAAA,CALuB;EAS9BC,OAAO;IAAA;IAAA;EAAA,CATuB;EAa9BC,UAAU;IAAA;IAAA;EAAA;AAboB,CAAD,CAA/B;AAmBA,MAAMC,aAAa,GAAG,CACpB;EAAEC,KAAK,EAAE,MAAT;EAAiBC,KAAK,EAAE;AAAxB,CADoB,EAEpB;EAAED,KAAK,EAAE,eAAT;EAA0BC,KAAK,EAAE;AAAjC,CAFoB,EAGpB;EAAED,KAAK,EAAE,UAAT;EAAqBC,KAAK,EAAE;AAA5B,CAHoB,CAAtB;AAMA,MAAMC,mBAAmB,GAAG,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,KAAb,CAA5B;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAN,SAAsB1C,SAAtB,CAAgC;EAC9B;AACF;AACA;AACA;AACA;;EAOE;AACF;AACA;AACA;AACA;AACA;EACE2C,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,6CAkQG,MAAM;MAC1B,MAAMC,KAAK,GAAG,KAAKC,KAAL,CAAWC,eAAX,CAA2BC,GAA3B,CAAgCC,CAAD,IAAO;QAClD,OAAO;UACLC,IAAI,EAAED;QADD,CAAP;MAGD,CAJa,CAAd;MAKA,KAAKL,KAAL,CAAWpC,aAAX,CAAyB,EAAzB,EAA6B;QAC3BqC;MAD2B,CAA7B;MAGA,KAAKM,QAAL,CAAc;QAAEJ,eAAe,EAAE;MAAnB,CAAd;IACD,CA5QkB;;IAEjB,KAAKD,KAAL,GAAa;MACXM,QAAQ,EAAE,KADC;MAEXC,UAAU,EAAEf,aAAa,CAAC,CAAD,CAFd;MAGXgB,aAAa,EAAE,IAHJ;MAIXC,UAAU,EAAE,EAJD;MAKXC,eAAe,EAAE,KALN;MAMXC,aAAa,EAAE,EANJ;MAOXC,kBAAkB,EAAE,KAPT;MAQXX,eAAe,EAAE,EARN;MASXY,eAAe,EAAE,EATN;MAUXC,WAAW,EAAE,EAVF;MAWXzB,OAAO,EAAE,EAXE;MAYX0B,UAAU,EAAE,CAZD;MAaXC,KAAK,EAAE,EAbI;MAcXC,YAAY,EAAE;IAdH,CAAb;EAgBD;EAED;AACF;AACA;AACA;AACA;;;EACEC,iBAAiB,GAAG;IAClB,MAAM;MAAEJ,WAAF;MAAeP,UAAf;MAA2BC,aAA3B;MAA0CS;IAA1C,IAA2D,KAAKjB,KAAtE;IACA,KAAKK,QAAL,CAAc;MAAEC,QAAQ,EAAE;IAAZ,CAAd;IACA,KAAKR,KAAL,CAAWlC,UAAX,CAAsBL,UAAU,CAAC,KAAKuC,KAAL,CAAWqB,QAAZ,CAAhC,EAAuD;MACrDC,KAAK,EAAEN,WAD8C;MAErDO,MAAM,EAAEd,UAAU,CAACb,KAFkC;MAGrD4B,QAAQ,EAAEd,aAH2C;MAIrDe,SAAS,EAAEN;IAJ0C,CAAvD;EAMD;EAED;AACF;AACA;AACA;AACA;;;EACEO,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;IACvC,MAAM;MAAEZ,WAAF;MAAeP,UAAf;MAA2BC,aAA3B;MAA0CS;IAA1C,IAA2D,KAAKjB,KAAtE;;IACA,IACEyB,SAAS,CAACpC,OAAV,CAAkBsC,WAAlB,KAAkC,KAAK7B,KAAL,CAAWT,OAAX,CAAmBsC,WAArD,IACAD,SAAS,CAACT,YAAV,KAA2B,KAAKjB,KAAL,CAAWiB,YAFxC,EAGE;MACA,MAAMD,KAAK,GAAGY,IAAI,CAACC,IAAL,CACZ,KAAK/B,KAAL,CAAWT,OAAX,CAAmBsC,WAAnB,GAAiC,KAAK3B,KAAL,CAAWiB,YADhC,CAAd;;MAIA,IAAID,KAAK,KAAK,CAAV,IAAec,KAAK,CAACd,KAAD,CAAxB,EAAiC;QAC/B,KAAKX,QAAL,CAAc;UAAEW,KAAK,EAAE;QAAT,CAAd;MACD,CAFD,MAEO;QACL,KAAKX,QAAL,CAAc;UAAEW;QAAF,CAAd;MACD;IACF;;IACD,IACEU,SAAS,CAACX,UAAV,KAAyB,KAAKf,KAAL,CAAWe,UAApC,IACAW,SAAS,CAACT,YAAV,KAA2B,KAAKjB,KAAL,CAAWiB,YAFxC,EAGE;MACA,KAAKnB,KAAL,CAAWlC,UAAX,CAAsBL,UAAU,CAAC,KAAKuC,KAAL,CAAWqB,QAAZ,CAAhC,EAAuD;QACrDC,KAAK,EAAEN,WAD8C;QAErDO,MAAM,EAAEd,UAAU,CAACb,KAFkC;QAGrD4B,QAAQ,EAAEd,aAH2C;QAIrDe,SAAS,EAAEN,YAAY,KAAK,KAAjB,GAAyB,YAAzB,GAAwCA,YAJE;QAKrDc,UAAU,EAAE,CAAC,KAAK/B,KAAL,CAAWe,UAAX,GAAwB,CAAzB,IAA8B,KAAKf,KAAL,CAAWiB;MALA,CAAvD;IAOD;;IACD,IAAIS,SAAS,CAACjB,UAAV,KAAyB,KAAKT,KAAL,CAAWS,UAAxC,EAAoD;MAClD,IAAI,KAAKT,KAAL,CAAWS,UAAX,CAAsBuB,MAAtB,CAA6B,CAA7B,MAAoC,GAAxC,EAA6C;QAC3C,KAAK3B,QAAL,CAAc;UAAEK,eAAe,EAAE;QAAnB,CAAd;MACD,CAFD,MAEO;QACL,KAAKL,QAAL,CAAc;UAAEK,eAAe,EAAE;QAAnB,CAAd;MACD;IACF;;IAED,IAAIgB,SAAS,CAACf,aAAV,KAA4B,KAAKX,KAAL,CAAWW,aAA3C,EAA0D;MACxD,IAAI,KAAKX,KAAL,CAAWW,aAAX,CAAyBqB,MAAzB,CAAgC,CAAhC,MAAuC,GAA3C,EAAgD;QAC9C,KAAK3B,QAAL,CAAc;UAAEO,kBAAkB,EAAE;QAAtB,CAAd;MACD,CAFD,MAEO;QACL,KAAKP,QAAL,CAAc;UAAEO,kBAAkB,EAAE;QAAtB,CAAd;MACD;IACF;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEqB,gCAAgC,CAACC,SAAD,EAAY;IAC1C,IAAI,KAAKpC,KAAL,CAAWT,OAAX,CAAmB8C,GAAnB,CAAuBC,OAAvB,IAAkC,CAACF,SAAS,CAAC7C,OAAV,CAAkB8C,GAAlB,CAAsBE,MAA7D,EAAqE;MACnE,IAAIH,SAAS,CAAC7C,OAAV,CAAkB8C,GAAlB,CAAsBG,KAA1B,EAAiC;QAC/B,KAAKjC,QAAL,CAAc;UACZQ,eAAe,EAAEqB,SAAS,CAAC7C,OAAV,CAAkB8C,GAAlB,CAAsBG,KAAtB,CAA4BC,QAA5B,CAAqCC,IAArC,CAA0CC;QAD/C,CAAd;MAGD;IACF;;IACD,IAAI,KAAK3C,KAAL,CAAWT,OAAX,CAAmB8C,GAAnB,CAAuBC,OAAvB,IAAkCF,SAAS,CAAC7C,OAAV,CAAkB8C,GAAlB,CAAsBE,MAA5D,EAAoE;MAClE,MAAM;QACJvB,WADI;QAEJP,UAFI;QAGJC,aAHI;QAIJS;MAJI,IAKF,KAAKjB,KALT;MAOA,KAAKF,KAAL,CAAWlC,UAAX,CAAsBL,UAAU,CAAC,KAAKuC,KAAL,CAAWqB,QAAZ,CAAhC,EAAuD;QACrDC,KAAK,EAAEN,WAD8C;QAErDO,MAAM,EAAEd,UAAU,CAACb,KAFkC;QAGrD4B,QAAQ,EAAEd,aAH2C;QAIrDe,SAAS,EAAEN;MAJ0C,CAAvD;MAMAhC,KAAK,CAACK,OAAN,CACE,MAAC,KAAD;QACE,OAAO,MADT;QAEE,KAAK,EAAE,KAAKQ,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8BxD,QAAQ,CAACG,OAAvC,CAFT;QAGE,OAAO,EAAE,KAAKQ,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8BxD,QAAQ,CAACI,UAAvC,CAHX;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF;;MAOA,IAAI,CAAC2C,SAAS,CAAC7C,OAAV,CAAkB8C,GAAlB,CAAsBG,KAA3B,EAAkC;QAChC,KAAKjC,QAAL,CAAc;UACZQ,eAAe,EAAE;QADL,CAAd;MAGD;IACF;;IACD,IAAI,KAAKf,KAAL,CAAWT,OAAX,CAAmBuD,MAAnB,CAA0BR,OAA1B,IAAqCF,SAAS,CAAC7C,OAAV,CAAkBuD,MAAlB,CAAyBP,MAAlE,EAA0E;MACxE,MAAM;QACJvB,WADI;QAEJP,UAFI;QAGJC,aAHI;QAIJS;MAJI,IAKF,KAAKjB,KALT;MAOA,KAAKF,KAAL,CAAWlC,UAAX,CAAsBL,UAAU,CAAC,KAAKuC,KAAL,CAAWqB,QAAZ,CAAhC,EAAuD;QACrDC,KAAK,EAAEN,WAD8C;QAErDO,MAAM,EAAEd,UAAU,CAACb,KAFkC;QAGrD4B,QAAQ,EAAEd,aAH2C;QAIrDe,SAAS,EAAEN;MAJ0C,CAAvD;IAMD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACE4B,QAAQ,GAAG;IACT,KAAK/C,KAAL,CAAWgD,OAAX,CAAmBC,IAAnB,CAAwBvF,YAAY,CAAC,KAAKsC,KAAL,CAAWqB,QAAZ,CAApC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE6B,sBAAsB,CAACC,IAAD,EAAO;IAC3B,KAAK5C,QAAL,CAAc;MAAEE,UAAU,EAAE0C;IAAd,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,uBAAuB,CAAC9B,KAAD,EAAQ;IAC7B,KAAKf,QAAL,CAAc;MAAES,WAAW,EAAEM;IAAf,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACE+B,gBAAgB,CAACC,IAAD,EAAO;IACrB,KAAK/C,QAAL,CAAc;MAAEG,aAAa,EAAE4C;IAAjB,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,kBAAkB,GAAG;IACnB,MAAM;MAAEvC,WAAF;MAAeP,UAAf;MAA2BC,aAA3B;MAA0CS;IAA1C,IAA2D,KAAKjB,KAAtE;IACA,KAAKF,KAAL,CAAWlC,UAAX,CAAsBL,UAAU,CAAC,KAAKuC,KAAL,CAAWqB,QAAZ,CAAhC,EAAuD;MACrDC,KAAK,EAAEN,WAD8C;MAErDO,MAAM,EAAEd,UAAU,CAACb,KAFkC;MAGrD4B,QAAQ,EAAEd,aAH2C;MAIrDe,SAAS,EAAEN;IAJ0C,CAAvD;EAMD;EAED;AACF;AACA;AACA;AACA;;;EACEqC,kBAAkB,CAACC,GAAD,EAAM;IACtB,KAAKlD,QAAL,CAAc;MAAEI,UAAU,EAAE8C;IAAd,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,qBAAqB,CAACD,GAAD,EAAM;IACzB,KAAKlD,QAAL,CAAc;MAAEM,aAAa,EAAE4C;IAAjB,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,iBAAiB,GAAG;IAClB,IAAI,KAAKzD,KAAL,CAAWU,eAAX,IAA8B,KAAKV,KAAL,CAAWY,kBAA7C,EAAiE;MAC/D,KAAKd,KAAL,CAAWnC,UAAX,CAAsB,EAAtB,EAA0B;QACxBoC,KAAK,EAAE,CACL;UACEK,IAAI,EAAE,KAAKJ,KAAL,CAAWS,UADnB;UAEE,eAAe,KAAKT,KAAL,CAAWW;QAF5B,CADK;MADiB,CAA1B;MAQA,KAAKN,QAAL,CAAc;QAAEI,UAAU,EAAE,EAAd;QAAkBE,aAAa,EAAE;MAAjC,CAAd;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACE+C,gBAAgB,CAACC,KAAD,EAAQ;IACtB,MAAMtE,OAAO,GAAG,KAAKW,KAAL,CAAWC,eAA3B;;IACA,IAAIZ,OAAO,CAACuE,QAAR,CAAiBD,KAAjB,CAAJ,EAA6B;MAC3B,MAAME,KAAK,GAAGxE,OAAO,CAACyE,OAAR,CAAgBH,KAAhB,CAAd;;MACA,IAAIE,KAAK,GAAG,CAAC,CAAb,EAAgB;QACd,IAAIE,aAAa,GAAG1E,OAApB;QACA0E,aAAa,CAACC,MAAd,CAAqBH,KAArB,EAA4B,CAA5B;QACA,KAAKxD,QAAL,CAAc;UAAEJ,eAAe,EAAE8D;QAAnB,CAAd;MACD;IACF,CAPD,MAOO;MACL,KAAK1D,QAAL,CAAc;QACZJ,eAAe,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,eAAf,EAAgC0D,KAAhC;MADL,CAAd;IAGD;EACF;EAED;AACF;AACA;AACA;AACA;;;EAaE;AACF;AACA;AACA;AACA;EACEM,gBAAgB,CAACC,CAAD,QAAoB;IAAA,IAAhB;MAAEnD;IAAF,CAAgB;IAClC,KAAKV,QAAL,CAAc;MAAEU;IAAF,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEoD,kBAAkB,CAACD,CAAD,SAAe;IAAA,IAAX;MAAExE;IAAF,CAAW;IAC/B,KAAKW,QAAL,CAAc;MAAEY,YAAY,EAAEvB,KAAhB;MAAuBqB,UAAU,EAAE;IAAnC,CAAd;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEqD,MAAM,GAAG;IACP,OACE;MAAK,EAAE,EAAC,cAAR;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,MAAD;MAAQ,KAAK,EAAE,KAAKtE,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8BxD,QAAQ,CAACE,OAAvC,CAAf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,EAEE,MAAC,SAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAS,EAAE,EAAC,SAAZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD,CAAS,KAAT;MAAe,MAAM,MAArB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MAAS,SAAS,EAAC,SAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,gBADL;MAEE,cAAc,EAAC,gBAFjB;MAGE,MAAM,EAAE;QAAEgF,KAAK,EAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAAI,KAAKvE,KAAL,CAAWuE,KAAf;MAAT,CAHV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAQE,MAAC,IAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,iCADL;MAEE,cAAc,EAAC,iCAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE;MAAG,SAAS,EAAC,MAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,kLADL;MAEE,cAAc,EAAC,kLAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAPF,EAaE,MAAC,IAAD,CAAM,KAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD;MACE,EAAE,EAAC,uBADL;MAEE,IAAI,EAAC,sBAFP;MAGE,WAAW,EAAC,UAHd;MAIE,KAAK,EAAE,KAAKrE,KAAL,CAAWS,UAJpB;MAKE,QAAQ,EAAGyD,CAAD,IAAO,KAAKZ,kBAAL,CAAwBY,CAAC,CAACI,MAAF,CAAS5E,KAAjC,CALnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,EAQG,CAAC,KAAKM,KAAL,CAAWU,eAAZ,IACC,KAAKV,KAAL,CAAWS,UAAX,KAA0B,EAD3B,IAEG;MAAG,KAAK,EAAE;QAAE8D,KAAK,EAAE;MAAT,CAAV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,+CADL;MAEE,cAAc,EAAC,+CAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAVN,CAbF,EA+BE,MAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,wBADL;MAEE,cAAc,EAAC,wBAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CA/BF,EAqCE;MAAG,SAAS,EAAC,MAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,8IADL;MAEE,cAAc,EAAC,8IAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CArCF,EA2CE,MAAC,IAAD,CAAM,KAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD;MACE,EAAE,EAAC,kBADL;MAEE,IAAI,EAAC,iBAFP;MAGE,WAAW,EAAC,UAHd;MAIE,KAAK,EAAE,KAAKvE,KAAL,CAAWW,aAJpB;MAKE,QAAQ,EAAGuD,CAAD,IACR,KAAKV,qBAAL,CAA2BU,CAAC,CAACI,MAAF,CAAS5E,KAApC,CANJ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,EAUG,CAAC,KAAKM,KAAL,CAAWY,kBAAZ,IACC,KAAKZ,KAAL,CAAWW,aAAX,KAA6B,EAD9B,IAEG;MAAG,KAAK,EAAE;QAAE4D,KAAK,EAAE;MAAT,CAAV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,0CADL;MAEE,cAAc,EAAC,0CAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAZN,CA3CF,EA+DE,MAAC,MAAD;MACE,EAAE,EAAC,cADL;MAEE,OAAO,MAFT;MAGE,OAAO,EAAE,MAAM,KAAKd,iBAAL,EAHjB;MAIE,QAAQ,EACN,CAAC,KAAKzD,KAAL,CAAWU,eAAZ,IACA,CAAC,KAAKV,KAAL,CAAWY,kBADZ,IAEA,KAAKZ,KAAL,CAAWS,UAAX,KAA0B,EAF1B,IAGA,KAAKT,KAAL,CAAWW,aAAX,KAA6B,EARjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAWE,MAAC,gBAAD;MAAkB,EAAE,EAAC,KAArB;MAA2B,cAAc,EAAC,KAA1C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAXF,CA/DF,EA4EG,KAAKX,KAAL,CAAWa,eAAX,IACC,MAAC,OAAD;MAAS,KAAK,EAAC,KAAf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD,CAAS,MAAT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,aADL;MAEE,cAAc,EAAC,OAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI,KAAKb,KAAL,CAAWa,eAAf,CAPF,CA7EJ,CADF,CARF,EAkGE,MAAC,IAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MAAS,SAAS,EAAC,SAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,MAAD;MAAQ,IAAI,EAAC,QAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,6CADL;MAEE,cAAc,EAAC,6CAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE,MAAC,MAAD;MAAQ,IAAI,EAAC,OAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,kBADL;MAEE,cAAc,EAAC,kBAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAPF,EAaE,MAAC,IAAD,CAAM,KAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD;MACE,IAAI,EAAC,QADP;MAEE,WAAW,EAAC,UAFd;MAGE,KAAK,EAAE,KAAKb,KAAL,CAAWc,WAHpB;MAIE,QAAQ,EAAGoD,CAAD,IACR,KAAKhB,uBAAL,CAA6BgB,CAAC,CAACI,MAAF,CAAS5E,KAAtC,CALJ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAbF,EAuBE,MAAC,MAAD;MAAQ,IAAI,EAAC,OAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,kCADL;MAEE,cAAc,EAAC,kCAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAvBF,EA6BGF,aAAa,CAACU,GAAd,CAAkB,CAACsE,CAAD,EAAIC,CAAJ,KACjB,MAAC,IAAD,CAAM,KAAN;MAAY,GAAG,EAAEA,CAAjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD;MACE,KAAK,EAAED,CAAC,CAAC/E,KADX;MAEE,IAAI,EAAC,YAFP;MAGE,KAAK,EAAE+E,CAAC,CAAC9E,KAHX;MAIE,OAAO,EAAE,KAAKM,KAAL,CAAWO,UAAX,KAA0BiE,CAJrC;MAKE,QAAQ,EAAE,MAAM,KAAKxB,sBAAL,CAA4BwB,CAA5B,CALlB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADD,CA7BH,EAwCE,MAAC,IAAD,CAAM,KAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,cAAD;MACE,EAAE,EAAC,qBADL;MAEE,KAAK,EAAE,gBAFT;MAGE,QAAQ,EAAE,IAHZ;MAIE,KAAK,EAAE,KAAKxE,KAAL,CAAWQ,aAJpB;MAKE,QAAQ,EAAE,CAACkE,EAAD,EAAKhF,KAAL,KAAe;QACvB,KAAKyD,gBAAL,CAAsBzD,KAAtB;MACD,CAPH;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAxCF,EAmDE,MAAC,MAAD;MAAQ,OAAO,EAAE,MAAM,KAAK2D,kBAAL,EAAvB;MAAkD,OAAO,MAAzD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,YAnDF,EAsDE,MAAC,MAAD;MAAQ,IAAI,EAAC,OAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,kGADL;MAEE,cAAc,EAAC,kGAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAtDF,EA6DE,MAAC,KAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,GAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,UAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,QADL;MAEE,cAAc,EAAC,QAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAOE,MAAC,KAAD,CAAO,UAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,OAArB;MAA6B,cAAc,EAAC,OAA5C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAPF,EAUE,MAAC,KAAD,CAAO,UAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,QADL;MAEE,cAAc,EAAC,QAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAVF,EAgBE,MAAC,KAAD,CAAO,UAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,MAArB;MAA4B,cAAc,EAAC,MAA3C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAhBF,EAmBE,MAAC,KAAD,CAAO,UAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MACE,EAAE,EAAC,QADL;MAEE,cAAc,EAAC,QAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CAnBF,CADF,EA2BG,KAAKvD,KAAL,CAAWT,OAAX,CAAmBU,KAAnB,CAAyB4E,MAAzB,GAAkC,CAAlC,IACC,KAAK7E,KAAL,CAAWT,OAAX,CAAmBU,KAAnB,CAAyBG,GAAzB,CAA6B,CAACyD,KAAD,EAAQc,CAAR,KAC3B,MAAC,KAAD,CAAO,GAAP;MAAW,GAAG,EAAEA,CAAhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,QAAD;MACE,QAAQ,EAAE,CAACP,CAAD;QAAA,IAAI;UAAExE;QAAF,CAAJ;QAAA,OACR,KAAKgE,gBAAL,CAAsBhE,KAAtB,CADQ;MAAA,CADZ;MAIE,OAAO,EAAE,KAAKM,KAAL,CAAWC,eAAX,CAA2B2D,QAA3B,CACPD,KAAK,CAACvD,IADC,CAJX;MAOE,KAAK,EAAEuD,KAAK,CAACvD,IAPf;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,EAYE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIuD,KAAK,CAACvD,IAAV,CADF,CAZF,EAeE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIuD,KAAK,CAAC,aAAD,CAAT,CADF,CAfF,EAkBE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAIA,KAAK,CAACrC,QAAV,CADF,CAlBF,EAqBE,MAAC,KAAD,CAAO,IAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAK,GAAEqC,KAAK,CAACtC,MAAO,EAApB,CADF,CArBF,CADF,CA5BJ,CADF,CA7DF,EAuHE;MACE,KAAK,EAAE;QACLuD,OAAO,EAAE,MADJ;QAELC,QAAQ,EAAE,MAFL;QAGLC,UAAU,EAAE,QAHP;QAILC,YAAY,EAAE;MAJT,CADT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAQG,KAAK/E,KAAL,CAAWgB,KAAX,IACC,MAAC,UAAD;MACE,aAAa,EAAE,CADjB;MAEE,UAAU,EAAE,KAAKhB,KAAL,CAAWe,UAFzB;MAGE,YAAY,EAAE,IAHhB;MAIE,SAAS,EAAE,IAJb;MAKE,QAAQ,EAAE,IALZ;MAME,YAAY,EAAE,CANhB;MAOE,UAAU,EAAE,KAAKf,KAAL,CAAWgB,KAPzB;MAQE,YAAY,EAAE,CAACkD,CAAD,EAAIM,CAAJ,KAAU,KAAKP,gBAAL,CAAsBC,CAAtB,EAAyBM,CAAzB,CAR1B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EATJ,EAoBE,MAAC,IAAD,CAAM,IAAN;MACE,QAAQ,EAAC,OADX;MAEE,KAAK,EAAE;QAAEI,OAAO,EAAE,MAAX;QAAmBI,UAAU,EAAE;MAA/B,CAFT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAIE,MAAC,IAAD,CAAM,IAAN;MAAW,KAAK,EAAE;QAAET,KAAK,EAAE;MAAT,CAAlB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,gBAAD;MAAkB,EAAE,EAAC,MAArB;MAA4B,cAAc,EAAC,MAA3C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,MAJF,EAOG,KAAI5E,mBAAJ,EAA0BsF,IAAD,IACxB,MAAC,IAAD,CAAM,IAAN;MACE,KAAK,EAAE;QACLC,OAAO,EAAE,SADJ;QAELC,MAAM,EAAE,aAFH;QAGLC,MAAM,EAAE;MAHH,CADT;MAME,GAAG,EAAEH,IANP;MAOE,KAAK,EAAEA,IAPT;MAQE,MAAM,EAAEA,IAAI,KAAK,KAAKjF,KAAL,CAAWiB,YAR9B;MASE,OAAO,EAAE,CAACiD,CAAD,EAAIM,CAAJ,KAAU,KAAKL,kBAAL,CAAwBD,CAAxB,EAA2BM,CAA3B,CATrB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAWGS,IAXH,CADD,CAPH,CApBF,CAvHF,EAmKE,MAAC,MAAD;MACE,QAAQ,EAAE,KAAKjF,KAAL,CAAWC,eAAX,CAA2B0E,MAA3B,KAAsC,CADlD;MAEE,OAAO,EAAE,KAAKU,mBAFhB;MAGE,OAAO,MAHT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAKE,MAAC,gBAAD;MACE,EAAE,EAAC,iBADL;MAEE,cAAc,EAAC,iBAFjB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EALF,CAnKF,CADF,CAlGF,CADF,CADF,CAFF,EAyRG,KAAKrF,KAAL,CAAWM,QAAX,IACC,MAAC,MAAD;MAAQ,IAAI,EAAEgF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,OAAD;MACE,QAAQ,EAAE,KAAKzF,KAAL,CAAWqB,QADvB;MAEE,sBAAsB,MAFxB;MAGE,KAAK,EACH,MAAC,IAAD;QAAM,SAAS,EAAC,MAAhB;QAAuB,EAAE,EAAC,GAA1B;QAA8B,OAAO,EAAE,MAAM,KAAK0B,QAAL,EAA7C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,IAAD;QACE,IAAI,EAAE7D,OADR;QAEE,SAAS,EAAC,kBAFZ;QAGE,IAAI,EAAC,MAHP;QAIE,KAAK,EAAE,KAAKc,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8BxD,QAAQ,CAACC,IAAvC,CAJT;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CAJJ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CA1RJ,CADF;EA8SD;;AAtmB6B;;gBAA1BQ,O,eAMe;EACjBjC,UAAU,EAAER,SAAS,CAACqI,IAAV,CAAeC,UADV;EAEjB7H,UAAU,EAAET,SAAS,CAACqI,IAAV,CAAeC,UAFV;EAGjB/H,aAAa,EAAEP,SAAS,CAACqI,IAAV,CAAeC;AAHb,C;;AAmmBrB,eAAepI,OAAO,CACpBuB,UADoB,EAEpBxB,OAAO,CACL,CAAC4C,KAAD,EAAQF,KAAR,MAAmB;EACjBT,OAAO,EAAEW,KAAK,CAACX,OADE;EAEjB8B,QAAQ,EAAErB,KAAK,CAAC4F,QAAN,CAAevE;AAFR,CAAnB,CADK,EAKL;EAAExD,UAAF;EAAcC,UAAd;EAA0BF;AAA1B,CALK,CAFa,CAAP,CASbkC,OATa,CAAf"},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Success","defaultMessage":"Success"},{"id":"Alias has been added","defaultMessage":"Alias has been added"},{"id":"Alternative url path (Required)","defaultMessage":"Alternative url path (Required)"},{"id":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.","defaultMessage":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring."},{"id":"Alternative url path must start with a slash.","defaultMessage":"Alternative url path must start with a slash."},{"id":"Target Path (Required)","defaultMessage":"Target Path (Required)"},{"id":"Enter the absolute path of the target. The path must start with '/'. Target must exist or be an existing alternative url path to the target.","defaultMessage":"Enter the absolute path of the target. The path must start with '/'. Target must exist or be an existing alternative url path to the target."},{"id":"Target url path must start with a slash.","defaultMessage":"Target url path must start with a slash."},{"id":"Add","defaultMessage":"Add"},{"id":"ErrorHeader","defaultMessage":"Error"},{"id":"All existing alternative urls for this site","defaultMessage":"All existing alternative urls for this site"},{"id":"Filter by prefix","defaultMessage":"Filter by prefix"},{"id":"Manually or automatically added?","defaultMessage":"Manually or automatically added?"},{"id":"Alternative url path → target url path (date and time of creation, manually created yes/no)","defaultMessage":"Alternative url path → target url path (date and time of creation, manually created yes/no)"},{"id":"Select","defaultMessage":"Select"},{"id":"Alias","defaultMessage":"Alias"},{"id":"Target","defaultMessage":"Target"},{"id":"Date","defaultMessage":"Date"},{"id":"Manual","defaultMessage":"Manual"},{"id":"Show","defaultMessage":"Show"},{"id":"Remove selected","defaultMessage":"Remove selected"}]}},"sourceType":"module"}