{"ast":null,"code":"/**\n * Create a function that add X-Forwarded Headers to superagent requests\n * @function addHeadersFactory\n * @param {Object} req Original request object\n * @return {function} Superagent request function\n */\nconst HEADERS = ['range', 'if-range'];\nexport const addHeadersFactory = orig => {\n  return request => {\n    const x_forwarded_host = orig.headers['x-forwarded-host'] || orig.hostname;\n    const x_forwarded_for = orig.headers['x-forwarded-for'];\n    const remote_host = orig.connection.remoteAddress;\n\n    if (x_forwarded_for && remote_host) {\n      request.set('x-forwarded-for', x_forwarded_for + ', ' + remote_host);\n    } else if (remote_host) {\n      request.set('x-forwarded-for', remote_host);\n    } else if (x_forwarded_for) {\n      request.set('x-forwarded-for', x_forwarded_for);\n    }\n\n    x_forwarded_host && request.set('x-forwarded-host', x_forwarded_host); // forward additional headers\n\n    HEADERS.forEach(header => {\n      if (orig.headers[header]) {\n        request.set(header, orig.headers[header]);\n      }\n    });\n  };\n};","map":{"version":3,"names":["HEADERS","addHeadersFactory","orig","request","x_forwarded_host","headers","hostname","x_forwarded_for","remote_host","connection","remoteAddress","set","forEach","header"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Proxy/Proxy.js"],"sourcesContent":["/**\n * Create a function that add X-Forwarded Headers to superagent requests\n * @function addHeadersFactory\n * @param {Object} req Original request object\n * @return {function} Superagent request function\n */\n\nconst HEADERS = ['range', 'if-range'];\n\nexport const addHeadersFactory = (orig) => {\n  return (request) => {\n    const x_forwarded_host = orig.headers['x-forwarded-host'] || orig.hostname;\n    const x_forwarded_for = orig.headers['x-forwarded-for'];\n    const remote_host = orig.connection.remoteAddress;\n    if (x_forwarded_for && remote_host) {\n      request.set('x-forwarded-for', x_forwarded_for + ', ' + remote_host);\n    } else if (remote_host) {\n      request.set('x-forwarded-for', remote_host);\n    } else if (x_forwarded_for) {\n      request.set('x-forwarded-for', x_forwarded_for);\n    }\n    x_forwarded_host && request.set('x-forwarded-host', x_forwarded_host);\n    // forward additional headers\n    HEADERS.forEach((header) => {\n      if (orig.headers[header]) {\n        request.set(header, orig.headers[header]);\n      }\n    });\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAG,CAAC,OAAD,EAAU,UAAV,CAAhB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,IAAU;EACzC,OAAQC,OAAD,IAAa;IAClB,MAAMC,gBAAgB,GAAGF,IAAI,CAACG,OAAL,CAAa,kBAAb,KAAoCH,IAAI,CAACI,QAAlE;IACA,MAAMC,eAAe,GAAGL,IAAI,CAACG,OAAL,CAAa,iBAAb,CAAxB;IACA,MAAMG,WAAW,GAAGN,IAAI,CAACO,UAAL,CAAgBC,aAApC;;IACA,IAAIH,eAAe,IAAIC,WAAvB,EAAoC;MAClCL,OAAO,CAACQ,GAAR,CAAY,iBAAZ,EAA+BJ,eAAe,GAAG,IAAlB,GAAyBC,WAAxD;IACD,CAFD,MAEO,IAAIA,WAAJ,EAAiB;MACtBL,OAAO,CAACQ,GAAR,CAAY,iBAAZ,EAA+BH,WAA/B;IACD,CAFM,MAEA,IAAID,eAAJ,EAAqB;MAC1BJ,OAAO,CAACQ,GAAR,CAAY,iBAAZ,EAA+BJ,eAA/B;IACD;;IACDH,gBAAgB,IAAID,OAAO,CAACQ,GAAR,CAAY,kBAAZ,EAAgCP,gBAAhC,CAApB,CAXkB,CAYlB;;IACAJ,OAAO,CAACY,OAAR,CAAiBC,MAAD,IAAY;MAC1B,IAAIX,IAAI,CAACG,OAAL,CAAaQ,MAAb,CAAJ,EAA0B;QACxBV,OAAO,CAACQ,GAAR,CAAYE,MAAZ,EAAoBX,IAAI,CAACG,OAAL,CAAaQ,MAAb,CAApB;MACD;IACF,CAJD;EAKD,CAlBD;AAmBD,CApBM"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}