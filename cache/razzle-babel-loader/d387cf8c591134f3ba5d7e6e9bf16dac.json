{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _pull from \"lodash/pull\";\nimport _map from \"lodash/map\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport { createGroup, deleteGroup, listGroups, getControlpanel, listRoles, updateGroup, authenticatedRole } from '@plone/volto/actions';\nimport { Icon, ModalForm, Toast, Toolbar, RenderGroups, Pagination, Error } from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport { Confirm, Container, Button, Form, Input, Segment, Table } from 'semantic-ui-react';\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\n\nclass GroupsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fetchData\", async () => {\n      await this.props.getControlpanel('usergroup');\n      await this.props.listRoles();\n\n      if (!this.props.many_groups) {\n        await this.props.listGroups();\n        this.setState({\n          groupEntries: this.props.groups\n        });\n      }\n    });\n\n    _defineProperty(this, \"updateGroupRoleSubmit\", e => {\n      e.stopPropagation();\n      this.state.groupEntries.forEach(item => {\n        this.props.updateGroup(item.id, item);\n      });\n      this.props.authenticatedRole(this.state.authenticatedRole);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.updateGroups),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }\n      }));\n    });\n\n    _defineProperty(this, \"onChangePage\", (event, _ref) => {\n      let {\n        value\n      } = _ref;\n      this.setState({\n        currentPage: value\n      });\n    });\n\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteGroupRequest.loading && nextProps.deleteGroupRequest.loaded || this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n      this.props.listGroups(this.state.search);\n    }\n\n    if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n      this.onAddGroupSuccess();\n    }\n\n    if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.error) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n\n    if (this.props.loadRolesRequest.loading && nextProps.loadRolesRequest.error) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error\n      });\n    }\n  }\n\n  getGroupFromProps(value) {\n    return _find(this.props.groups, ['@id', value]);\n  }\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n\n\n  onSearchGroups(event) {\n    event.preventDefault();\n    this.props.listGroups(this.state.search);\n  }\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n\n\n  deleteGroup(event, _ref2) {\n    let {\n      value\n    } = _ref2;\n\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value)\n      });\n    }\n  }\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n\n\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n      this.setState({\n        showDelete: false,\n        groupToDelete: undefined\n      });\n    }\n  }\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n\n\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: []\n    });\n  }\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n\n\n  updateGroupRole(name, value) {\n    this.setState(prevState => ({\n      groupEntries: _map(this.state.groupEntries, entry => _objectSpread(_objectSpread({}, entry), {}, {\n        roles: entry.id === name && !entry.roles.includes(value) ? [...entry.roles, value] : entry.id !== name ? entry.roles : _pull(entry.roles, value)\n      })),\n      authenticatedRole: name === 'AuthenticatedUsers' && !prevState.authenticatedRole.includes(value) ? [...prevState.authenticatedRole, value] : name !== 'AuthenticatedUsers' ? prevState.authenticatedRole : _pull(prevState.authenticatedRole, value)\n    }));\n  }\n  /**\n   * @param {*} event\n   * @memberof GroupsControlpanel\n   */\n\n\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback\n    });\n  }\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n\n\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups\n      });\n    }\n  }\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n\n\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined\n    });\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.groupCreated),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }\n    }));\n  }\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$state$groupEntr;\n\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 14\n        }\n      });\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n\n\n    let groupNameToDelete = this.state.groupToDelete ? this.state.groupToDelete.id : '';\n    return __jsx(Container, {\n      className: \"users-control-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.groups),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }\n    }, __jsx(Confirm, {\n      open: this.state.showDelete,\n      header: this.props.intl.formatMessage(messages.deleteGroupConfirmTitle),\n      content: __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 15\n        }\n      }, __jsx(\"ul\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Do you really want to delete the group {groupname}?\",\n        defaultMessage: \"Do you really want to delete the group {groupname}?\",\n        values: {\n          groupname: __jsx(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 34\n            }\n          }, groupNameToDelete)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 19\n        }\n      }))),\n      onCancel: this.onDeleteCancel,\n      onConfirm: this.onDeleteOk,\n      size: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }), this.state.showAddGroup ? __jsx(ModalForm, {\n      open: this.state.showAddGroup,\n      className: \"modal\",\n      onSubmit: this.onAddGroupSubmit,\n      submitError: this.state.addGroupError,\n      onCancel: () => this.setState({\n        showAddGroup: false\n      }),\n      title: this.props.intl.formatMessage(messages.addGroupsFormTitle),\n      loading: this.props.createGroupRequest.loading,\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: 'FIXME: Group Data',\n          fields: ['title', 'description', 'groupname', 'email', 'roles']\n        }],\n        properties: {\n          title: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormTitleTitle),\n            type: 'string',\n            description: ''\n          },\n          description: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormDescriptionTitle),\n            type: 'string',\n            description: ''\n          },\n          groupname: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormGroupNameTitle),\n            type: 'string',\n            description: 'A unique identifier for the group. Can not be changed after creation.'\n          },\n          email: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormEmailTitle),\n            type: 'string',\n            description: '',\n            widget: 'email'\n          },\n          roles: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormRolesTitle),\n            type: 'array',\n            choices: this.props.roles.map(role => [role.id, role.id]),\n            noValueOption: false,\n            description: ''\n          }\n        },\n        required: ['groupname']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 13\n      }\n    }) : null), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groups\",\n      defaultMessage: \"Groups\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n      defaultMessage: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n      values: {\n        plone_svg: __jsx(Icon, {\n          name: ploneSVG,\n          size: \"20px\",\n          color: \"#007EB1\",\n          title: 'plone-svg',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 19\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSearchGroups,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 13\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      name: \"SearchableText\",\n      action: {\n        icon: 'search'\n      },\n      placeholder: this.props.intl.formatMessage(messages.searchGroups),\n      onChange: this.onChangeSearch,\n      id: \"group-search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      padded: true,\n      striped: true,\n      attached: true,\n      unstackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groupname\",\n      defaultMessage: \"Groupname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 23\n      }\n    })), this.props.roles.map(role => __jsx(Table.HeaderCell, {\n      key: role.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 23\n      }\n    }, role.id)), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Actions\",\n      defaultMessage: \"Actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 23\n      }\n    })))), __jsx(Table.Body, {\n      \"data-group\": \"groups\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 17\n      }\n    }, this.state.groupEntries.slice(this.state.currentPage * 10, this.state.pageSize * (this.state.currentPage + 1)).map(group => __jsx(RenderGroups, {\n      key: group.id,\n      onDelete: this.deleteGroup,\n      roles: this.props.roles,\n      group: group,\n      updateGroups: this.updateGroupRole,\n      inheritedRole: this.state.authenticatedRole,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 23\n      }\n    }))))), __jsx(\"div\", {\n      className: \"contents-pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 13\n      }\n    }, __jsx(Pagination, {\n      current: this.state.currentPage,\n      total: Math.ceil(((_this$state$groupEntr = this.state.groupEntries) === null || _this$state$groupEntr === void 0 ? void 0 : _this$state$groupEntr.length) / this.state.pageSize),\n      onChangePage: this.onChangePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 15\n      }\n    })))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: this.updateGroupRoleSubmit,\n        loading: this.props.createGroupRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 21\n        }\n      })), __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"cancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }\n      })), __jsx(Button, {\n        id: \"toolbar-add\",\n        \"aria-label\": this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n        onClick: () => {\n          this.setState({\n            showAddGroup: true\n          });\n        },\n        loading: this.props.createGroupRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: addUserSvg,\n        size: \"45px\",\n        color: \"#826A6A\",\n        title: this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(GroupsControlpanel, \"propTypes\", {\n  listRoles: PropTypes.func.isRequired,\n  listGroups: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    '@type': PropTypes.string,\n    id: PropTypes.string\n  })).isRequired,\n  groups: PropTypes.arrayOf(PropTypes.shape({\n    Title: PropTypes.string,\n    Description: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string),\n    groupname: PropTypes.string\n  })).isRequired\n});\n\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$controlpanels, _state$controlpanels$, _state$controlpanels$2, _state$controlpanels2, _state$controlpanels3, _state$controlpanels4;\n\n  return {\n    roles: state.roles.roles,\n    groups: state.groups.groups,\n    description: state.description,\n    many_users: (_state$controlpanels = state.controlpanels) === null || _state$controlpanels === void 0 ? void 0 : (_state$controlpanels$ = _state$controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users,\n    many_groups: (_state$controlpanels2 = state.controlpanels) === null || _state$controlpanels2 === void 0 ? void 0 : (_state$controlpanels3 = _state$controlpanels2.controlpanel) === null || _state$controlpanels3 === void 0 ? void 0 : (_state$controlpanels4 = _state$controlpanels3.data) === null || _state$controlpanels4 === void 0 ? void 0 : _state$controlpanels4.many_groups,\n    pathname: props.location.pathname,\n    deleteGroupRequest: state.groups.delete,\n    createGroupRequest: state.groups.create,\n    loadRolesRequest: state.roles,\n    inheritedRole: state.authRole.authenticatedRole\n  };\n}, dispatch => bindActionCreators({\n  listRoles,\n  listGroups,\n  deleteGroup,\n  getControlpanel,\n  createGroup,\n  updateGroup,\n  authenticatedRole\n}, dispatch)))(GroupsControlpanel);","map":{"version":3,"names":["createGroup","deleteGroup","listGroups","getControlpanel","listRoles","updateGroup","authenticatedRole","Icon","ModalForm","Toast","Toolbar","RenderGroups","Pagination","Error","Link","Helmet","messages","clearSVG","addUserSvg","saveSVG","ploneSVG","PropTypes","React","Component","FormattedMessage","injectIntl","Portal","connect","toast","bindActionCreators","compose","Confirm","Container","Button","Form","Input","Segment","Table","GroupsControlpanel","constructor","props","many_groups","setState","groupEntries","groups","e","stopPropagation","state","forEach","item","id","success","intl","formatMessage","updateGroups","event","value","currentPage","onChangeSearch","bind","onSearchGroups","onDeleteOk","onDeleteCancel","onAddGroupSubmit","onAddGroupError","onAddGroupSuccess","updateGroupRole","search","addGroupError","showDelete","groupToDelete","undefined","showAddGroup","isClient","inheritedRole","pageSize","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","deleteGroupRequest","loading","loaded","createGroupRequest","error","loadRolesRequest","getGroupFromProps","preventDefault","target","itemsToDelete","name","prevState","entry","roles","includes","data","callback","addGroupSetFormDataCallback","response","body","message","componentDidUpdate","prevProps","groupCreated","render","groupNameToDelete","deleteGroupConfirmTitle","groupname","addGroupsFormTitle","fieldsets","title","fields","properties","addGroupsFormTitleTitle","type","description","addGroupsFormDescriptionTitle","addGroupsFormGroupNameTitle","email","addGroupsFormEmailTitle","widget","addGroupsFormRolesTitle","choices","map","role","noValueOption","required","plone_svg","icon","searchGroups","slice","group","Math","ceil","length","onChangePage","document","getElementById","pathname","save","updateGroupRoleSubmit","cancel","addGroupsButtonTitle","func","isRequired","string","arrayOf","shape","Title","Description","many_users","controlpanels","controlpanel","location","delete","create","authRole","dispatch"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createGroup,\n  deleteGroup,\n  listGroups,\n  getControlpanel,\n  listRoles,\n  updateGroup,\n  authenticatedRole,\n} from '@plone/volto/actions';\nimport {\n  Icon,\n  ModalForm,\n  Toast,\n  Toolbar,\n  RenderGroups,\n  Pagination,\n  Error,\n} from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport { find, map, pull } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\n\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Confirm,\n  Container,\n  Button,\n  Form,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nclass GroupsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        Title: PropTypes.string,\n        Description: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n        groupname: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10,\n    };\n  }\n\n  fetchData = async () => {\n    await this.props.getControlpanel('usergroup');\n    await this.props.listRoles();\n    if (!this.props.many_groups) {\n      await this.props.listGroups();\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  };\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteGroupRequest.loading &&\n        nextProps.deleteGroupRequest.loaded) ||\n      (this.props.createGroupRequest.loading &&\n        nextProps.createGroupRequest.loaded)\n    ) {\n      this.props.listGroups(this.state.search);\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.loaded\n    ) {\n      this.onAddGroupSuccess();\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.error\n    ) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n    if (\n      this.props.loadRolesRequest.loading &&\n      nextProps.loadRolesRequest.error\n    ) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error,\n      });\n    }\n  }\n\n  getGroupFromProps(value) {\n    return find(this.props.groups, ['@id', value]);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    event.preventDefault();\n    this.props.listGroups(this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n      this.setState({\n        showDelete: false,\n        groupToDelete: undefined,\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState((prevState) => ({\n      groupEntries: map(this.state.groupEntries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name && !entry.roles.includes(value)\n            ? [...entry.roles, value]\n            : entry.id !== name\n            ? entry.roles\n            : pull(entry.roles, value),\n      })),\n      authenticatedRole:\n        name === 'AuthenticatedUsers' &&\n        !prevState.authenticatedRole.includes(value)\n          ? [...prevState.authenticatedRole, value]\n          : name !== 'AuthenticatedUsers'\n          ? prevState.authenticatedRole\n          : pull(prevState.authenticatedRole, value),\n    }));\n  }\n  /**\n   * @param {*} event\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRoleSubmit = (e) => {\n    e.stopPropagation();\n    this.state.groupEntries.forEach((item) => {\n      this.props.updateGroup(item.id, item);\n    });\n    this.props.authenticatedRole(this.state.authenticatedRole);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.updateGroups)}\n      />,\n    );\n  };\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  }\n\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.groupCreated)}\n      />,\n    );\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage = (event, { value }) => {\n    this.setState({\n      currentPage: value,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n    let groupNameToDelete = this.state.groupToDelete\n      ? this.state.groupToDelete.id\n      : '';\n\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet title={this.props.intl.formatMessage(messages.groups)} />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(\n              messages.deleteGroupConfirmTitle,\n            )}\n            content={\n              <div className=\"content\">\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the group {groupname}?\"\n                    defaultMessage=\"Do you really want to delete the group {groupname}?\"\n                    values={{\n                      groupname: <b>{groupNameToDelete}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddGroup ? (\n            <ModalForm\n              open={this.state.showAddGroup}\n              className=\"modal\"\n              onSubmit={this.onAddGroupSubmit}\n              submitError={this.state.addGroupError}\n              onCancel={() => this.setState({ showAddGroup: false })}\n              title={this.props.intl.formatMessage(messages.addGroupsFormTitle)}\n              loading={this.props.createGroupRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: Group Data',\n                    fields: [\n                      'title',\n                      'description',\n                      'groupname',\n                      'email',\n                      'roles',\n                    ],\n                  },\n                ],\n                properties: {\n                  title: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormTitleTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  description: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormDescriptionTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  groupname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormGroupNameTitle,\n                    ),\n                    type: 'string',\n                    description:\n                      'A unique identifier for the group. Can not be changed after creation.',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                    widget: 'email',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [role.id, role.id]),\n                    noValueOption: false,\n                    description: '',\n                  },\n                },\n                required: ['groupname'],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage id=\"Groups\" defaultMessage=\"Groups\" />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              defaultMessage=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              values={{\n                plone_svg: (\n                  <Icon\n                    name={ploneSVG}\n                    size=\"20px\"\n                    color=\"#007EB1\"\n                    title={'plone-svg'}\n                  />\n                ),\n              }}\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearchGroups}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchGroups,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"group-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Groupname\"\n                        defaultMessage=\"Groupname\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.id}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body data-group=\"groups\">\n                  {this.state.groupEntries\n                    .slice(\n                      this.state.currentPage * 10,\n                      this.state.pageSize * (this.state.currentPage + 1),\n                    )\n                    .map((group) => (\n                      <RenderGroups\n                        key={group.id}\n                        onDelete={this.deleteGroup}\n                        roles={this.props.roles}\n                        group={group}\n                        updateGroups={this.updateGroupRole}\n                        inheritedRole={this.state.authenticatedRole}\n                      />\n                    ))}\n                </Table.Body>\n              </Table>\n            </div>\n            <div className=\"contents-pagination\">\n              <Pagination\n                current={this.state.currentPage}\n                total={Math.ceil(\n                  this.state.groupEntries?.length / this.state.pageSize,\n                )}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={this.updateGroupRoleSubmit}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Link to=\"/controlpanel\" className=\"cancel\">\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Link>\n                  <Button\n                    id=\"toolbar-add\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.addGroupsButtonTitle,\n                    )}\n                    onClick={() => {\n                      this.setState({ showAddGroup: true });\n                    }}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={addUserSvg}\n                      size=\"45px\"\n                      color=\"#826A6A\"\n                      title={this.props.intl.formatMessage(\n                        messages.addGroupsButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      roles: state.roles.roles,\n      groups: state.groups.groups,\n      description: state.description,\n      many_users: state.controlpanels?.controlpanel?.data?.many_users,\n      many_groups: state.controlpanels?.controlpanel?.data?.many_groups,\n      pathname: props.location.pathname,\n      deleteGroupRequest: state.groups.delete,\n      createGroupRequest: state.groups.create,\n      loadRolesRequest: state.roles,\n      inheritedRole: state.authRole.authenticatedRole,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listGroups,\n          deleteGroup,\n          getControlpanel,\n          createGroup,\n          updateGroup,\n          authenticatedRole,\n        },\n        dispatch,\n      ),\n  ),\n)(GroupsControlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Do you really want to delete the group {groupname}?","defaultMessage":"Do you really want to delete the group {groupname}?"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.","defaultMessage":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group."},{"id":"Groupname","defaultMessage":"Groupname"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module"}