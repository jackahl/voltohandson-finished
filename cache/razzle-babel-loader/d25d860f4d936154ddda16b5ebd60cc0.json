{"ast":null,"code":"import { toggleList, unwrapList } from './utils';\nimport { isBlockActive } from '@plone/volto-slate/utils';\nimport { UL, OL, LI } from '@plone/volto-slate/constants';\n/**\n * Uses the old toggleList function to toggle lists on or off or from a type to another.\n * @param {Editor} editor The editor to which to apply the change.\n * @param {string} format A list type.\n */\n\nexport const localToggleList = (editor, format) => {\n  toggleList(editor, {\n    typeList: format,\n    isBulletedActive: !!isBlockActive(editor, UL),\n    isNumberedActive: !!isBlockActive(editor, OL)\n  });\n};\n/**\n * @summary Turns off any list type.\n * @param {Editor} editor The editor to which to apply the change.\n * @returns The result of the inner call to the function `unwrapList`.\n */\n\nconst preFormat = editor => {\n  return unwrapList(editor, false, {\n    unwrapFromList: false\n  });\n};\n/**\n * The autoformat rules created by this plugin for the Markdown language.\n *\n * @todo Use constants instead of the remaining hard-coded types (h2, h3 etc.).\n */\n\n\nexport const autoformatRules = [{\n  type: 'h2',\n  markup: '#' // preFormat,\n\n}, {\n  type: 'h3',\n  markup: '##' // preFormat,\n\n}, {\n  type: LI,\n  markup: ['*', '-', '+'],\n  preFormat,\n  format: editor => {\n    localToggleList(editor, 'ul');\n  }\n}, {\n  type: LI,\n  markup: ['1.', '1)'],\n  preFormat,\n  format: editor => {\n    localToggleList(editor, 'ol');\n  }\n}, {\n  type: 'blockquote',\n  markup: ['>'] // preFormat,\n\n}, {\n  type: 'bold',\n  between: ['**', '**'],\n  mode: 'inline',\n  insertTrigger: true\n}, {\n  type: 'bold',\n  between: ['__', '__'],\n  mode: 'inline',\n  insertTrigger: true\n}, {\n  type: 'italic',\n  between: ['*', '*'],\n  mode: 'inline',\n  insertTrigger: true\n}, {\n  type: 'italic',\n  between: ['_', '_'],\n  mode: 'inline',\n  insertTrigger: true\n}, {\n  type: 'strikethrough',\n  between: ['~~', '~~'],\n  mode: 'inline',\n  insertTrigger: true\n}];","map":{"version":3,"names":["toggleList","unwrapList","isBlockActive","UL","OL","LI","localToggleList","editor","format","typeList","isBulletedActive","isNumberedActive","preFormat","unwrapFromList","autoformatRules","type","markup","between","mode","insertTrigger"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/Markdown/constants.js"],"sourcesContent":["import { toggleList, unwrapList } from './utils';\nimport { isBlockActive } from '@plone/volto-slate/utils';\nimport { UL, OL, LI } from '@plone/volto-slate/constants';\n\n/**\n * Uses the old toggleList function to toggle lists on or off or from a type to another.\n * @param {Editor} editor The editor to which to apply the change.\n * @param {string} format A list type.\n */\nexport const localToggleList = (editor, format) => {\n  toggleList(editor, {\n    typeList: format,\n    isBulletedActive: !!isBlockActive(editor, UL),\n    isNumberedActive: !!isBlockActive(editor, OL),\n  });\n};\n\n/**\n * @summary Turns off any list type.\n * @param {Editor} editor The editor to which to apply the change.\n * @returns The result of the inner call to the function `unwrapList`.\n */\nconst preFormat = (editor) => {\n  return unwrapList(editor, false, {\n    unwrapFromList: false,\n  });\n};\n\n/**\n * The autoformat rules created by this plugin for the Markdown language.\n *\n * @todo Use constants instead of the remaining hard-coded types (h2, h3 etc.).\n */\nexport const autoformatRules = [\n  {\n    type: 'h2',\n    markup: '#',\n    // preFormat,\n  },\n  {\n    type: 'h3',\n    markup: '##',\n    // preFormat,\n  },\n  {\n    type: LI,\n    markup: ['*', '-', '+'],\n    preFormat,\n    format: (editor) => {\n      localToggleList(editor, 'ul');\n    },\n  },\n  {\n    type: LI,\n    markup: ['1.', '1)'],\n    preFormat,\n    format: (editor) => {\n      localToggleList(editor, 'ol');\n    },\n  },\n  {\n    type: 'blockquote',\n    markup: ['>'],\n    // preFormat,\n  },\n  {\n    type: 'bold',\n    between: ['**', '**'],\n    mode: 'inline',\n    insertTrigger: true,\n  },\n  {\n    type: 'bold',\n    between: ['__', '__'],\n    mode: 'inline',\n    insertTrigger: true,\n  },\n  {\n    type: 'italic',\n    between: ['*', '*'],\n    mode: 'inline',\n    insertTrigger: true,\n  },\n  {\n    type: 'italic',\n    between: ['_', '_'],\n    mode: 'inline',\n    insertTrigger: true,\n  },\n  {\n    type: 'strikethrough',\n    between: ['~~', '~~'],\n    mode: 'inline',\n    insertTrigger: true,\n  },\n];\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,SAAvC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,EAAT,EAAaC,EAAb,EAAiBC,EAAjB,QAA2B,8BAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;EACjDR,UAAU,CAACO,MAAD,EAAS;IACjBE,QAAQ,EAAED,MADO;IAEjBE,gBAAgB,EAAE,CAAC,CAACR,aAAa,CAACK,MAAD,EAASJ,EAAT,CAFhB;IAGjBQ,gBAAgB,EAAE,CAAC,CAACT,aAAa,CAACK,MAAD,EAASH,EAAT;EAHhB,CAAT,CAAV;AAKD,CANM;AAQP;AACA;AACA;AACA;AACA;;AACA,MAAMQ,SAAS,GAAIL,MAAD,IAAY;EAC5B,OAAON,UAAU,CAACM,MAAD,EAAS,KAAT,EAAgB;IAC/BM,cAAc,EAAE;EADe,CAAhB,CAAjB;AAGD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,eAAe,GAAG,CAC7B;EACEC,IAAI,EAAE,IADR;EAEEC,MAAM,EAAE,GAFV,CAGE;;AAHF,CAD6B,EAM7B;EACED,IAAI,EAAE,IADR;EAEEC,MAAM,EAAE,IAFV,CAGE;;AAHF,CAN6B,EAW7B;EACED,IAAI,EAAEV,EADR;EAEEW,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFV;EAGEJ,SAHF;EAIEJ,MAAM,EAAGD,MAAD,IAAY;IAClBD,eAAe,CAACC,MAAD,EAAS,IAAT,CAAf;EACD;AANH,CAX6B,EAmB7B;EACEQ,IAAI,EAAEV,EADR;EAEEW,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAFV;EAGEJ,SAHF;EAIEJ,MAAM,EAAGD,MAAD,IAAY;IAClBD,eAAe,CAACC,MAAD,EAAS,IAAT,CAAf;EACD;AANH,CAnB6B,EA2B7B;EACEQ,IAAI,EAAE,YADR;EAEEC,MAAM,EAAE,CAAC,GAAD,CAFV,CAGE;;AAHF,CA3B6B,EAgC7B;EACED,IAAI,EAAE,MADR;EAEEE,OAAO,EAAE,CAAC,IAAD,EAAO,IAAP,CAFX;EAGEC,IAAI,EAAE,QAHR;EAIEC,aAAa,EAAE;AAJjB,CAhC6B,EAsC7B;EACEJ,IAAI,EAAE,MADR;EAEEE,OAAO,EAAE,CAAC,IAAD,EAAO,IAAP,CAFX;EAGEC,IAAI,EAAE,QAHR;EAIEC,aAAa,EAAE;AAJjB,CAtC6B,EA4C7B;EACEJ,IAAI,EAAE,QADR;EAEEE,OAAO,EAAE,CAAC,GAAD,EAAM,GAAN,CAFX;EAGEC,IAAI,EAAE,QAHR;EAIEC,aAAa,EAAE;AAJjB,CA5C6B,EAkD7B;EACEJ,IAAI,EAAE,QADR;EAEEE,OAAO,EAAE,CAAC,GAAD,EAAM,GAAN,CAFX;EAGEC,IAAI,EAAE,QAHR;EAIEC,aAAa,EAAE;AAJjB,CAlD6B,EAwD7B;EACEJ,IAAI,EAAE,eADR;EAEEE,OAAO,EAAE,CAAC,IAAD,EAAO,IAAP,CAFX;EAGEC,IAAI,EAAE,QAHR;EAIEC,aAAa,EAAE;AAJjB,CAxD6B,CAAxB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}