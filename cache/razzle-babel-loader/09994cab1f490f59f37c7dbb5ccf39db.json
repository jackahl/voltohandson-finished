{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/AlbumView.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Album view component.\n * @module components/theme/View/AlbumView\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, GridColumn, Segment } from 'semantic-ui-react';\nimport { Button, Modal, Grid } from 'semantic-ui-react';\nimport { Icon, UniversalLink, PreviewImage } from '@plone/volto/components';\nimport openSVG from '@plone/volto/icons/open.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n/**\n * Album view component class.\n * @function AlbumView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\n\nclass AlbumView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openIndex: undefined\n    };\n    this.closeModal = this.closeModal.bind(this);\n    this.nextImage = this.nextImage.bind(this);\n    this.prevImage = this.prevImage.bind(this);\n  }\n\n  closeModal() {\n    this.setState({\n      openIndex: -1\n    });\n  }\n\n  nextImage() {\n    const openIndex = (this.state.openIndex + 1) % this.props.content.items.length;\n    this.setState({\n      openIndex\n    });\n  }\n\n  prevImage() {\n    const openIndex = (this.state.openIndex - 1) % this.props.content.items.length;\n    this.setState({\n      openIndex\n    });\n  }\n\n  render() {\n    const {\n      content\n    } = this.props;\n    return __jsx(Container, {\n      className: \"view-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, __jsx(\"article\", {\n      id: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, __jsx(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, __jsx(\"h1\", {\n      className: \"documentFirstHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, content.title), content.description && __jsx(\"p\", {\n      className: \"documentDescription\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, content.description)), __jsx(\"section\", {\n      id: \"content-core\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, __jsx(Grid, {\n      doubling: true,\n      stackable: true,\n      columns: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, content.items && content.items.map((item, index) => __jsx(React.Fragment, {\n      key: item.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    }, item.image_field && __jsx(Modal, {\n      className: \"gallery\",\n      onClose: this.closeModal,\n      open: this.state.openIndex === index,\n      trigger: __jsx(Grid.Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 27\n        }\n      }, __jsx(Segment, {\n        className: \"imageborder\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }\n      }, __jsx(PreviewImage, {\n        item: item,\n        alt: item.image_caption ? item.image_caption : item.title,\n        onClick: () => {\n          this.setState({\n            openIndex: index\n          });\n        },\n        className: \"ui middle aligned image\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 31\n        }\n      }))),\n      closeIcon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 23\n      }\n    }, __jsx(Modal.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 27\n      }\n    }, __jsx(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, __jsx(GridColumn, {\n      width: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 31\n      }\n    }, item.title), __jsx(GridColumn, {\n      width: 2,\n      textAlign: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 31\n      }\n    }, __jsx(UniversalLink, {\n      href: item.url,\n      title: item['@type'],\n      onClick: this.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 33\n      }\n    }, __jsx(Icon, {\n      size: \"30px\",\n      fitted: true,\n      name: openSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 35\n      }\n    })))))), __jsx(Grid, {\n      centered: true,\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }\n    }, __jsx(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 27\n      }\n    }, __jsx(Grid.Column, {\n      width: 2,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, __jsx(Button, {\n      className: \"gallery noborder\",\n      onClick: this.nextImage,\n      style: {\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 31\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"circled\",\n      size: \"30px\",\n      style: {\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 33\n      }\n    }))), __jsx(Grid.Column, {\n      width: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, __jsx(Modal.Content, {\n      image: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 31\n      }\n    }, __jsx(PreviewImage, {\n      item: item,\n      alt: item.image_caption ? item.image_caption : item.title,\n      onClick: () => {\n        this.setState({\n          openIndex: index\n        });\n      },\n      size: \"large\",\n      className: \"ui image\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 33\n      }\n    }), __jsx(Modal.Description, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 33\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 35\n      }\n    }, item.description)))), __jsx(Grid.Column, {\n      width: 2,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, __jsx(Button, {\n      onClick: this.nextImage,\n      className: \"gallery noborder\",\n      style: {\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 31\n      }\n    }, __jsx(Icon, {\n      name: aheadSVG,\n      className: \"circled\",\n      size: \"30px\",\n      style: {\n        margin: 0\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }))))))))))));\n  }\n\n}\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\nAlbumView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(PropTypes.shape({\n      /**\n       * Title of the item\n       */\n      title: PropTypes.string,\n\n      /**\n       * Description of the item\n       */\n      description: PropTypes.string,\n\n      /**\n       * Url of the item\n       */\n      url: PropTypes.string,\n\n      /**\n       * Image of the item\n       */\n      image: PropTypes.object,\n\n      /**\n       * Image caption of the item\n       */\n      image_caption: PropTypes.string,\n\n      /**\n       * Type of the item\n       */\n      '@type': PropTypes.string\n    }))\n  }).isRequired\n};\nexport default AlbumView;","map":{"version":3,"names":["React","Component","PropTypes","Container","GridColumn","Segment","Button","Modal","Grid","Icon","UniversalLink","PreviewImage","openSVG","aheadSVG","backSVG","AlbumView","constructor","props","state","openIndex","undefined","closeModal","bind","nextImage","prevImage","setState","content","items","length","render","title","description","map","item","index","url","image_field","image_caption","margin","propTypes","shape","string","arrayOf","image","object","isRequired"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/View/AlbumView.jsx"],"sourcesContent":["/**\n * Album view component.\n * @module components/theme/View/AlbumView\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Container, GridColumn, Segment } from 'semantic-ui-react';\nimport { Button, Modal, Grid } from 'semantic-ui-react';\nimport { Icon, UniversalLink, PreviewImage } from '@plone/volto/components';\n\nimport openSVG from '@plone/volto/icons/open.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\n/**\n * Album view component class.\n * @function AlbumView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nclass AlbumView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openIndex: undefined,\n    };\n\n    this.closeModal = this.closeModal.bind(this);\n    this.nextImage = this.nextImage.bind(this);\n    this.prevImage = this.prevImage.bind(this);\n  }\n\n  closeModal() {\n    this.setState({\n      openIndex: -1,\n    });\n  }\n\n  nextImage() {\n    const openIndex =\n      (this.state.openIndex + 1) % this.props.content.items.length;\n    this.setState({\n      openIndex,\n    });\n  }\n\n  prevImage() {\n    const openIndex =\n      (this.state.openIndex - 1) % this.props.content.items.length;\n    this.setState({\n      openIndex,\n    });\n  }\n\n  render() {\n    const { content } = this.props;\n    return (\n      <Container className=\"view-wrapper\">\n        <article id=\"content\">\n          <header>\n            <h1 className=\"documentFirstHeading\">{content.title}</h1>\n            {content.description && (\n              <p className=\"documentDescription\">{content.description}</p>\n            )}\n          </header>\n          <section id=\"content-core\">\n            <Grid doubling stackable columns={4}>\n              {content.items &&\n                content.items.map((item, index) => (\n                  <React.Fragment key={item.url}>\n                    {item.image_field && (\n                      <Modal\n                        className=\"gallery\"\n                        onClose={this.closeModal}\n                        open={this.state.openIndex === index}\n                        trigger={\n                          <Grid.Column>\n                            <Segment className=\"imageborder\">\n                              <PreviewImage\n                                item={item}\n                                alt={\n                                  item.image_caption\n                                    ? item.image_caption\n                                    : item.title\n                                }\n                                onClick={() => {\n                                  this.setState({\n                                    openIndex: index,\n                                  });\n                                }}\n                                className=\"ui middle aligned image\"\n                              />\n                            </Segment>\n                          </Grid.Column>\n                        }\n                        closeIcon\n                      >\n                        <Modal.Header>\n                          <Grid>\n                            <Grid.Row>\n                              <GridColumn width={10}>{item.title}</GridColumn>\n                              <GridColumn width={2} textAlign=\"right\">\n                                <UniversalLink\n                                  href={item.url}\n                                  title={item['@type']}\n                                  onClick={this.closeModal}\n                                >\n                                  <Icon size=\"30px\" fitted name={openSVG} />\n                                </UniversalLink>\n                              </GridColumn>\n                            </Grid.Row>\n                          </Grid>\n                        </Modal.Header>\n                        <Grid centered verticalAlign=\"middle\">\n                          <Grid.Row>\n                            <Grid.Column width={2} textAlign=\"center\">\n                              <Button\n                                className=\"gallery noborder\"\n                                onClick={this.nextImage}\n                                style={{ margin: 0 }}\n                              >\n                                <Icon\n                                  name={backSVG}\n                                  className=\"circled\"\n                                  size=\"30px\"\n                                  style={{ margin: 0 }}\n                                />\n                              </Button>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                              <Modal.Content image>\n                                <PreviewImage\n                                  item={item}\n                                  alt={\n                                    item.image_caption\n                                      ? item.image_caption\n                                      : item.title\n                                  }\n                                  onClick={() => {\n                                    this.setState({\n                                      openIndex: index,\n                                    });\n                                  }}\n                                  size=\"large\"\n                                  className=\"ui image\"\n                                />\n\n                                <Modal.Description>\n                                  <p>{item.description}</p>\n                                </Modal.Description>\n                              </Modal.Content>\n                            </Grid.Column>\n                            <Grid.Column width={2} textAlign=\"center\">\n                              <Button\n                                onClick={this.nextImage}\n                                className=\"gallery noborder\"\n                                style={{ margin: 0 }}\n                              >\n                                <Icon\n                                  name={aheadSVG}\n                                  className=\"circled\"\n                                  size=\"30px\"\n                                  style={{ margin: 0 }}\n                                />\n                              </Button>\n                            </Grid.Column>\n                          </Grid.Row>\n                        </Grid>\n                      </Modal>\n                    )}\n                  </React.Fragment>\n                ))}\n            </Grid>\n          </section>\n        </article>\n      </Container>\n    );\n  }\n}\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nAlbumView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Child items of the object\n     */\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        /**\n         * Title of the item\n         */\n        title: PropTypes.string,\n        /**\n         * Description of the item\n         */\n        description: PropTypes.string,\n        /**\n         * Url of the item\n         */\n        url: PropTypes.string,\n        /**\n         * Image of the item\n         */\n        image: PropTypes.object,\n        /**\n         * Image caption of the item\n         */\n        image_caption: PropTypes.string,\n        /**\n         * Type of the item\n         */\n        '@type': PropTypes.string,\n      }),\n    ),\n  }).isRequired,\n};\n\nexport default AlbumView;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,OAAhC,QAA+C,mBAA/C;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,mBAApC;AACA,SAASC,IAAT,EAAeC,aAAf,EAA8BC,YAA9B,QAAkD,yBAAlD;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBd,SAAxB,CAAkC;EAChCe,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IAEA,KAAKC,KAAL,GAAa;MACXC,SAAS,EAAEC;IADA,CAAb;IAIA,KAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;IACA,KAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;EACD;;EAEDD,UAAU,GAAG;IACX,KAAKI,QAAL,CAAc;MACZN,SAAS,EAAE,CAAC;IADA,CAAd;EAGD;;EAEDI,SAAS,GAAG;IACV,MAAMJ,SAAS,GACb,CAAC,KAAKD,KAAL,CAAWC,SAAX,GAAuB,CAAxB,IAA6B,KAAKF,KAAL,CAAWS,OAAX,CAAmBC,KAAnB,CAAyBC,MADxD;IAEA,KAAKH,QAAL,CAAc;MACZN;IADY,CAAd;EAGD;;EAEDK,SAAS,GAAG;IACV,MAAML,SAAS,GACb,CAAC,KAAKD,KAAL,CAAWC,SAAX,GAAuB,CAAxB,IAA6B,KAAKF,KAAL,CAAWS,OAAX,CAAmBC,KAAnB,CAAyBC,MADxD;IAEA,KAAKH,QAAL,CAAc;MACZN;IADY,CAAd;EAGD;;EAEDU,MAAM,GAAG;IACP,MAAM;MAAEH;IAAF,IAAc,KAAKT,KAAzB;IACA,OACE,MAAC,SAAD;MAAW,SAAS,EAAC,cAArB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAS,EAAE,EAAC,SAAZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAI,SAAS,EAAC,sBAAd;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAsCS,OAAO,CAACI,KAA9C,CADF,EAEGJ,OAAO,CAACK,WAAR,IACC;MAAG,SAAS,EAAC,qBAAb;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAoCL,OAAO,CAACK,WAA5C,CAHJ,CADF,EAOE;MAAS,EAAE,EAAC,cAAZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD;MAAM,QAAQ,MAAd;MAAe,SAAS,MAAxB;MAAyB,OAAO,EAAE,CAAlC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGL,OAAO,CAACC,KAAR,IACCD,OAAO,CAACC,KAAR,CAAcK,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAChB,MAAC,KAAD,CAAO,QAAP;MAAgB,GAAG,EAAED,IAAI,CAACE,GAA1B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGF,IAAI,CAACG,WAAL,IACC,MAAC,KAAD;MACE,SAAS,EAAC,SADZ;MAEE,OAAO,EAAE,KAAKf,UAFhB;MAGE,IAAI,EAAE,KAAKH,KAAL,CAAWC,SAAX,KAAyBe,KAHjC;MAIE,OAAO,EACL,MAAC,IAAD,CAAM,MAAN;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,OAAD;QAAS,SAAS,EAAC,aAAnB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,YAAD;QACE,IAAI,EAAED,IADR;QAEE,GAAG,EACDA,IAAI,CAACI,aAAL,GACIJ,IAAI,CAACI,aADT,GAEIJ,IAAI,CAACH,KALb;QAOE,OAAO,EAAE,MAAM;UACb,KAAKL,QAAL,CAAc;YACZN,SAAS,EAAEe;UADC,CAAd;QAGD,CAXH;QAYE,SAAS,EAAC,yBAZZ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CADF,CALJ;MAwBE,SAAS,MAxBX;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GA0BE,MAAC,KAAD,CAAO,MAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD,CAAM,GAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,UAAD;MAAY,KAAK,EAAE,EAAnB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAwBD,IAAI,CAACH,KAA7B,CADF,EAEE,MAAC,UAAD;MAAY,KAAK,EAAE,CAAnB;MAAsB,SAAS,EAAC,OAAhC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,aAAD;MACE,IAAI,EAAEG,IAAI,CAACE,GADb;MAEE,KAAK,EAAEF,IAAI,CAAC,OAAD,CAFb;MAGE,OAAO,EAAE,KAAKZ,UAHhB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAKE,MAAC,IAAD;MAAM,IAAI,EAAC,MAAX;MAAkB,MAAM,MAAxB;MAAyB,IAAI,EAAET,OAA/B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EALF,CADF,CAFF,CADF,CADF,CA1BF,EA0CE,MAAC,IAAD;MAAM,QAAQ,MAAd;MAAe,aAAa,EAAC,QAA7B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD,CAAM,GAAN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,IAAD,CAAM,MAAN;MAAa,KAAK,EAAE,CAApB;MAAuB,SAAS,EAAC,QAAjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,MAAD;MACE,SAAS,EAAC,kBADZ;MAEE,OAAO,EAAE,KAAKW,SAFhB;MAGE,KAAK,EAAE;QAAEe,MAAM,EAAE;MAAV,CAHT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAKE,MAAC,IAAD;MACE,IAAI,EAAExB,OADR;MAEE,SAAS,EAAC,SAFZ;MAGE,IAAI,EAAC,MAHP;MAIE,KAAK,EAAE;QAAEwB,MAAM,EAAE;MAAV,CAJT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EALF,CADF,CADF,EAeE,MAAC,IAAD,CAAM,MAAN;MAAa,KAAK,EAAE,CAApB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,KAAD,CAAO,OAAP;MAAe,KAAK,MAApB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,YAAD;MACE,IAAI,EAAEL,IADR;MAEE,GAAG,EACDA,IAAI,CAACI,aAAL,GACIJ,IAAI,CAACI,aADT,GAEIJ,IAAI,CAACH,KALb;MAOE,OAAO,EAAE,MAAM;QACb,KAAKL,QAAL,CAAc;UACZN,SAAS,EAAEe;QADC,CAAd;MAGD,CAXH;MAYE,IAAI,EAAC,OAZP;MAaE,SAAS,EAAC,UAbZ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,EAiBE,MAAC,KAAD,CAAO,WAAP;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAID,IAAI,CAACF,WAAT,CADF,CAjBF,CADF,CAfF,EAsCE,MAAC,IAAD,CAAM,MAAN;MAAa,KAAK,EAAE,CAApB;MAAuB,SAAS,EAAC,QAAjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,MAAD;MACE,OAAO,EAAE,KAAKR,SADhB;MAEE,SAAS,EAAC,kBAFZ;MAGE,KAAK,EAAE;QAAEe,MAAM,EAAE;MAAV,CAHT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAKE,MAAC,IAAD;MACE,IAAI,EAAEzB,QADR;MAEE,SAAS,EAAC,SAFZ;MAGE,IAAI,EAAC,MAHP;MAIE,KAAK,EAAE;QAAEyB,MAAM,EAAE;MAAV,CAJT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EALF,CADF,CAtCF,CADF,CA1CF,CAFJ,CADF,CAFJ,CADF,CAPF,CADF,CADF;EAyHD;;AA9J+B;AAiKlC;AACA;AACA;AACA;AACA;;;AACAvB,SAAS,CAACwB,SAAV,GAAsB;EACpB;AACF;AACA;EACEb,OAAO,EAAExB,SAAS,CAACsC,KAAV,CAAgB;IACvB;AACJ;AACA;IACIV,KAAK,EAAE5B,SAAS,CAACuC,MAJM;;IAKvB;AACJ;AACA;IACIV,WAAW,EAAE7B,SAAS,CAACuC,MARA;;IASvB;AACJ;AACA;IACId,KAAK,EAAEzB,SAAS,CAACwC,OAAV,CACLxC,SAAS,CAACsC,KAAV,CAAgB;MACd;AACR;AACA;MACQV,KAAK,EAAE5B,SAAS,CAACuC,MAJH;;MAKd;AACR;AACA;MACQV,WAAW,EAAE7B,SAAS,CAACuC,MART;;MASd;AACR;AACA;MACQN,GAAG,EAAEjC,SAAS,CAACuC,MAZD;;MAad;AACR;AACA;MACQE,KAAK,EAAEzC,SAAS,CAAC0C,MAhBH;;MAiBd;AACR;AACA;MACQP,aAAa,EAAEnC,SAAS,CAACuC,MApBX;;MAqBd;AACR;AACA;MACQ,SAASvC,SAAS,CAACuC;IAxBL,CAAhB,CADK;EAZgB,CAAhB,EAwCNI;AA5CiB,CAAtB;AA+CA,eAAe9B,SAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}