{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { save, load } from 'redux-localstorage-simple';\nimport config from '@plone/volto/registry';\nimport reducers from '@root/reducers';\nimport { api, crashReporter, blacklistRoutes, protectLoadStart, protectLoadEnd, loadProtector } from '@plone/volto/middleware';\n\nconst configureStore = (initialState, history, apiHelper) => {\n  let stack = [blacklistRoutes, protectLoadStart, routerMiddleware(history), crashReporter, thunk, ...(apiHelper ? [api(apiHelper)] : []), protectLoadEnd, ...(__CLIENT__ ? [save({\n    states: config.settings.persistentReducers,\n    debounce: 500\n  })] : [])];\n  stack = config.settings.storeExtenders.reduce((acc, extender) => extender(acc), stack);\n  const middlewares = composeWithDevTools(applyMiddleware(...stack));\n  const store = createStore(combineReducers(_objectSpread(_objectSpread(_objectSpread({\n    router: connectRouter(history)\n  }, reducers), config.addonReducers), {}, {\n    loadProtector\n  })), _objectSpread(_objectSpread({}, initialState), __CLIENT__ ? load({\n    states: config.settings.persistentReducers\n  }) : {}), middlewares);\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"names":["combineReducers","createStore","applyMiddleware","thunk","composeWithDevTools","connectRouter","routerMiddleware","save","load","config","reducers","api","crashReporter","blacklistRoutes","protectLoadStart","protectLoadEnd","loadProtector","configureStore","initialState","history","apiHelper","stack","__CLIENT__","states","settings","persistentReducers","debounce","storeExtenders","reduce","acc","extender","middlewares","store","router","addonReducers"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/store.js"],"sourcesContent":["import { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { save, load } from 'redux-localstorage-simple';\n\nimport config from '@plone/volto/registry';\nimport reducers from '@root/reducers';\n\nimport {\n  api,\n  crashReporter,\n  blacklistRoutes,\n  protectLoadStart,\n  protectLoadEnd,\n  loadProtector,\n} from '@plone/volto/middleware';\n\nconst configureStore = (initialState, history, apiHelper) => {\n  let stack = [\n    blacklistRoutes,\n    protectLoadStart,\n    routerMiddleware(history),\n    crashReporter,\n    thunk,\n    ...(apiHelper ? [api(apiHelper)] : []),\n    protectLoadEnd,\n    ...(__CLIENT__\n      ? [save({ states: config.settings.persistentReducers, debounce: 500 })]\n      : []),\n  ];\n  stack = config.settings.storeExtenders.reduce(\n    (acc, extender) => extender(acc),\n    stack,\n  );\n  const middlewares = composeWithDevTools(applyMiddleware(...stack));\n  const store = createStore(\n    combineReducers({\n      router: connectRouter(history),\n      ...reducers,\n      ...config.addonReducers,\n      loadProtector,\n    }),\n    {\n      ...initialState,\n      ...(__CLIENT__\n        ? load({ states: config.settings.persistentReducers })\n        : {}),\n    },\n    middlewares,\n  );\n\n  return store;\n};\n\nexport default configureStore;\n"],"mappings":";;;;;;AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,SACEC,GADF,EAEEC,aAFF,EAGEC,eAHF,EAIEC,gBAJF,EAKEC,cALF,EAMEC,aANF,QAOO,yBAPP;;AASA,MAAMC,cAAc,GAAG,CAACC,YAAD,EAAeC,OAAf,EAAwBC,SAAxB,KAAsC;EAC3D,IAAIC,KAAK,GAAG,CACVR,eADU,EAEVC,gBAFU,EAGVR,gBAAgB,CAACa,OAAD,CAHN,EAIVP,aAJU,EAKVT,KALU,EAMV,IAAIiB,SAAS,GAAG,CAACT,GAAG,CAACS,SAAD,CAAJ,CAAH,GAAsB,EAAnC,CANU,EAOVL,cAPU,EAQV,IAAIO,UAAU,GACV,CAACf,IAAI,CAAC;IAAEgB,MAAM,EAAEd,MAAM,CAACe,QAAP,CAAgBC,kBAA1B;IAA8CC,QAAQ,EAAE;EAAxD,CAAD,CAAL,CADU,GAEV,EAFJ,CARU,CAAZ;EAYAL,KAAK,GAAGZ,MAAM,CAACe,QAAP,CAAgBG,cAAhB,CAA+BC,MAA/B,CACN,CAACC,GAAD,EAAMC,QAAN,KAAmBA,QAAQ,CAACD,GAAD,CADrB,EAENR,KAFM,CAAR;EAIA,MAAMU,WAAW,GAAG3B,mBAAmB,CAACF,eAAe,CAAC,GAAGmB,KAAJ,CAAhB,CAAvC;EACA,MAAMW,KAAK,GAAG/B,WAAW,CACvBD,eAAe;IACbiC,MAAM,EAAE5B,aAAa,CAACc,OAAD;EADR,GAEVT,QAFU,GAGVD,MAAM,CAACyB,aAHG;IAIblB;EAJa,GADQ,kCAQlBE,YARkB,GASjBI,UAAU,GACVd,IAAI,CAAC;IAAEe,MAAM,EAAEd,MAAM,CAACe,QAAP,CAAgBC;EAA1B,CAAD,CADM,GAEV,EAXiB,GAavBM,WAbuB,CAAzB;EAgBA,OAAOC,KAAP;AACD,CAnCD;;AAqCA,eAAef,cAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}