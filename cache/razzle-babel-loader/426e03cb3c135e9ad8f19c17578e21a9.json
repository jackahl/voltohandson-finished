{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport cx from 'classnames';\nimport { buildStyleClassNamesFromData } from '@plone/volto/helpers';\n\nconst StyleWrapper = props => {\n  const {\n    children,\n    data = {}\n  } = props;\n  const styles = buildStyleClassNamesFromData(data.styles);\n  const rewrittenChildren = React.Children.map(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      const childProps = _objectSpread(_objectSpread({}, props), {}, {\n        className: cx([child.props.className, ...styles])\n      });\n\n      return /*#__PURE__*/React.cloneElement(child, childProps);\n    }\n\n    return child;\n  });\n  return rewrittenChildren;\n};\n\nexport default StyleWrapper;","map":{"version":3,"names":["React","cx","buildStyleClassNamesFromData","StyleWrapper","props","children","data","styles","rewrittenChildren","Children","map","child","isValidElement","childProps","className","cloneElement"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Block/StyleWrapper.jsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport { buildStyleClassNamesFromData } from '@plone/volto/helpers';\n\nconst StyleWrapper = (props) => {\n  const { children, data = {} } = props;\n  const styles = buildStyleClassNamesFromData(data.styles);\n  const rewrittenChildren = React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      const childProps = {\n        ...props,\n        className: cx([child.props.className, ...styles]),\n      };\n      return React.cloneElement(child, childProps);\n    }\n    return child;\n  });\n\n  return rewrittenChildren;\n};\n\nexport default StyleWrapper;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,4BAAT,QAA6C,sBAA7C;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAC9B,MAAM;IAAEC,QAAF;IAAYC,IAAI,GAAG;EAAnB,IAA0BF,KAAhC;EACA,MAAMG,MAAM,GAAGL,4BAA4B,CAACI,IAAI,CAACC,MAAN,CAA3C;EACA,MAAMC,iBAAiB,GAAGR,KAAK,CAACS,QAAN,CAAeC,GAAf,CAAmBL,QAAnB,EAA8BM,KAAD,IAAW;IAChE,kBAAIX,KAAK,CAACY,cAAN,CAAqBD,KAArB,CAAJ,EAAiC;MAC/B,MAAME,UAAU,mCACXT,KADW;QAEdU,SAAS,EAAEb,EAAE,CAAC,CAACU,KAAK,CAACP,KAAN,CAAYU,SAAb,EAAwB,GAAGP,MAA3B,CAAD;MAFC,EAAhB;;MAIA,oBAAOP,KAAK,CAACe,YAAN,CAAmBJ,KAAnB,EAA0BE,UAA1B,CAAP;IACD;;IACD,OAAOF,KAAP;EACD,CATyB,CAA1B;EAWA,OAAOH,iBAAP;AACD,CAfD;;AAiBA,eAAeL,YAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}