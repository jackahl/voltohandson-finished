{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _omit from \"lodash/omit\";\nimport _mapKeys from \"lodash/mapKeys\";\nimport _map from \"lodash/map\";\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { CREATE_CONTENT, DELETE_CONTENT, GET_CONTENT, LOCK_CONTENT, UNLOCK_CONTENT, ORDER_CONTENT, RESET_CONTENT, UPDATE_CONTENT, UPDATECOLUMNS_CONTENT } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  create: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  order: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  updatecolumns: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  lock: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  unlock: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  data: null,\n  subrequests: {}\n};\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\n\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\n\n\nexport default function content() {\n  var _action$sort, _action$sort2, _action$sort3, _action$sort4;\n\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let {\n    result\n  } = action;\n\n  switch (action.type) {\n    case `${UPDATECOLUMNS_CONTENT}`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          idx: action.indexcolumns\n        }\n      });\n\n    case `${CREATE_CONTENT}_PENDING`:\n    case `${LOCK_CONTENT}_PENDING`:\n    case `${DELETE_CONTENT}_PENDING`:\n    case `${UNLOCK_CONTENT}_PENDING`:\n    case `${UPDATE_CONTENT}_PENDING`:\n    case `${GET_CONTENT}_PENDING`:\n    case `${ORDER_CONTENT}_PENDING`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, {\n          [action.subrequest]: _objectSpread(_objectSpread({}, state.subrequests[action.subrequest] || {\n            data: null\n          }), {}, {\n            loaded: false,\n            loading: true,\n            error: null\n          })\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n\n    case `${CREATE_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        _map(result['@static_behaviors'], behavior => {\n          result = _objectSpread(_objectSpread({}, _omit(result, behavior)), _mapKeys(result[behavior], (value, key) => `${behavior}.${key}`));\n        });\n      }\n\n      const data = action.subrequest ? Array.isArray(result) ? result.map(item => _objectSpread(_objectSpread({}, item), {}, {\n        url: flattenToAppURL(item['@id'])\n      })) : _objectSpread(_objectSpread({}, result), {}, {\n        items: action.result && action.result.items && action.result.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n          url: flattenToAppURL(item['@id'])\n        }))\n      }) : _objectSpread(_objectSpread({}, result), {}, {\n        items: action.result && action.result.items && action.result.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n          url: flattenToAppURL(item['@id'])\n        }))\n      });\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, {\n          [action.subrequest]: {\n            loading: false,\n            loaded: true,\n            error: null,\n            data\n          }\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        data,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    case `${GET_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        _map(result['@static_behaviors'], behavior => {\n          result = _objectSpread(_objectSpread({}, _omit(result, behavior)), _mapKeys(result[behavior], (value, key) => `${behavior}.${key}`));\n        });\n      }\n\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, {\n          [action.subrequest]: {\n            loading: false,\n            loaded: true,\n            error: null,\n            data: _objectSpread(_objectSpread({}, result), {}, {\n              items: action.result && action.result.items && action.result.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n                url: flattenToAppURL(item['@id'])\n              }))\n            })\n          }\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        data: _objectSpread(_objectSpread({}, result), {}, {\n          items: action.result && action.result.items && action.result.items.map(item => _objectSpread(_objectSpread({}, item), {}, {\n            url: flattenToAppURL(item['@id'])\n          }))\n        }),\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    case `${DELETE_CONTENT}_SUCCESS`:\n    case `${ORDER_CONTENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          sort: {\n            on: (_action$sort = action.sort) === null || _action$sort === void 0 ? void 0 : _action$sort.on,\n            order: (_action$sort2 = action.sort) === null || _action$sort2 === void 0 ? void 0 : _action$sort2.order\n          },\n          index: action.index\n        }\n      });\n\n    case `${UNLOCK_CONTENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        },\n        data: _objectSpread(_objectSpread({}, state.data), {}, {\n          lock: _objectSpread({}, result)\n        })\n      });\n\n    case `${UPDATE_CONTENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          sort: {\n            on: (_action$sort3 = action.sort) === null || _action$sort3 === void 0 ? void 0 : _action$sort3.on,\n            order: (_action$sort4 = action.sort) === null || _action$sort4 === void 0 ? void 0 : _action$sort4.order\n          }\n        }\n      });\n\n    case `${LOCK_CONTENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        },\n        data: _objectSpread(_objectSpread({}, state.data), {}, {\n          lock: _objectSpread({}, result)\n        })\n      });\n\n    case `${CREATE_CONTENT}_FAIL`:\n    case `${LOCK_CONTENT}_FAIL`:\n    case `${DELETE_CONTENT}_FAIL`:\n    case `${UNLOCK_CONTENT}_FAIL`:\n    case `${GET_CONTENT}_FAIL`:\n    case `${ORDER_CONTENT}_FAIL`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, {\n          [action.subrequest]: {\n            data: null,\n            loading: false,\n            loaded: false,\n            error: action.error\n          }\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        data: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n\n    case `${UPDATE_CONTENT}_FAIL`:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, {\n          [action.subrequest]: {\n            loading: false,\n            loaded: false,\n            error: action.error\n          }\n        })\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n\n    case RESET_CONTENT:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _omit(state.subrequests, action.subrequest)\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        get: {\n          loaded: false\n        },\n        data: null\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["flattenToAppURL","CREATE_CONTENT","DELETE_CONTENT","GET_CONTENT","LOCK_CONTENT","UNLOCK_CONTENT","ORDER_CONTENT","RESET_CONTENT","UPDATE_CONTENT","UPDATECOLUMNS_CONTENT","initialState","create","loaded","loading","error","delete","get","order","update","updatecolumns","lock","unlock","data","subrequests","getRequestKey","actionType","split","toLowerCase","content","state","action","result","type","idx","indexcolumns","subrequest","behavior","value","key","Array","isArray","map","item","url","items","sort","on","index"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/reducers/content/content.js"],"sourcesContent":["/**\n * Content reducer.\n * @module reducers/content/content\n */\n\nimport { map, mapKeys, omit } from 'lodash';\n\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport {\n  CREATE_CONTENT,\n  DELETE_CONTENT,\n  GET_CONTENT,\n  LOCK_CONTENT,\n  UNLOCK_CONTENT,\n  ORDER_CONTENT,\n  RESET_CONTENT,\n  UPDATE_CONTENT,\n  UPDATECOLUMNS_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  create: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  order: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  updatecolumns: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  lock: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  unlock: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  data: null,\n  subrequests: {},\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content(state = initialState, action = {}) {\n  let { result } = action;\n  switch (action.type) {\n    case `${UPDATECOLUMNS_CONTENT}`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          idx: action.indexcolumns,\n        },\n      };\n    case `${CREATE_CONTENT}_PENDING`:\n    case `${LOCK_CONTENT}_PENDING`:\n    case `${DELETE_CONTENT}_PENDING`:\n    case `${UNLOCK_CONTENT}_PENDING`:\n    case `${UPDATE_CONTENT}_PENDING`:\n    case `${GET_CONTENT}_PENDING`:\n    case `${ORDER_CONTENT}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                ...(state.subrequests[action.subrequest] || {\n                  data: null,\n                }),\n                loaded: false,\n                loading: true,\n                error: null,\n              },\n            },\n          }\n        : {\n            ...state,\n            [getRequestKey(action.type)]: {\n              loading: true,\n              loaded: false,\n              error: null,\n            },\n          };\n    case `${CREATE_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        map(result['@static_behaviors'], (behavior) => {\n          result = {\n            ...omit(result, behavior),\n            ...mapKeys(result[behavior], (value, key) => `${behavior}.${key}`),\n          };\n        });\n      }\n      const data = action.subrequest\n        ? Array.isArray(result)\n          ? result.map((item) => ({\n              ...item,\n              url: flattenToAppURL(item['@id']),\n            }))\n          : {\n              ...result,\n              items:\n                action.result &&\n                action.result.items &&\n                action.result.items.map((item) => ({\n                  ...item,\n                  url: flattenToAppURL(item['@id']),\n                })),\n            }\n        : {\n            ...result,\n            items:\n              action.result &&\n              action.result.items &&\n              action.result.items.map((item) => ({\n                ...item,\n                url: flattenToAppURL(item['@id']),\n              })),\n          };\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                loading: false,\n                loaded: true,\n                error: null,\n                data,\n              },\n            },\n          }\n        : {\n            ...state,\n            data,\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: true,\n              error: null,\n            },\n          };\n    case `${GET_CONTENT}_SUCCESS`:\n      if (result['@static_behaviors']) {\n        map(result['@static_behaviors'], (behavior) => {\n          result = {\n            ...omit(result, behavior),\n            ...mapKeys(result[behavior], (value, key) => `${behavior}.${key}`),\n          };\n        });\n      }\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                loading: false,\n                loaded: true,\n                error: null,\n                data: {\n                  ...result,\n                  items:\n                    action.result &&\n                    action.result.items &&\n                    action.result.items.map((item) => ({\n                      ...item,\n                      url: flattenToAppURL(item['@id']),\n                    })),\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            data: {\n              ...result,\n              items:\n                action.result &&\n                action.result.items &&\n                action.result.items.map((item) => ({\n                  ...item,\n                  url: flattenToAppURL(item['@id']),\n                })),\n            },\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: true,\n              error: null,\n            },\n          };\n    case `${DELETE_CONTENT}_SUCCESS`:\n    case `${ORDER_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          sort: {\n            on: action.sort?.on,\n            order: action.sort?.order,\n          },\n          index: action.index,\n        },\n      };\n    case `${UNLOCK_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n        data: {\n          ...state.data,\n          lock: {\n            ...result,\n          },\n        },\n      };\n    case `${UPDATE_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n          sort: {\n            on: action.sort?.on,\n            order: action.sort?.order,\n          },\n        },\n      };\n    case `${LOCK_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n        data: {\n          ...state.data,\n          lock: {\n            ...result,\n          },\n        },\n      };\n    case `${CREATE_CONTENT}_FAIL`:\n    case `${LOCK_CONTENT}_FAIL`:\n    case `${DELETE_CONTENT}_FAIL`:\n    case `${UNLOCK_CONTENT}_FAIL`:\n    case `${GET_CONTENT}_FAIL`:\n    case `${ORDER_CONTENT}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                data: null,\n                loading: false,\n                loaded: false,\n                error: action.error,\n              },\n            },\n          }\n        : {\n            ...state,\n            data: null,\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: false,\n              error: action.error,\n            },\n          };\n    case `${UPDATE_CONTENT}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                loading: false,\n                loaded: false,\n                error: action.error,\n              },\n            },\n          }\n        : {\n            ...state,\n            [getRequestKey(action.type)]: {\n              loading: false,\n              loaded: false,\n              error: action.error,\n            },\n          };\n    case RESET_CONTENT:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: omit(state.subrequests, action.subrequest),\n          }\n        : {\n            ...state,\n            get: {\n              loaded: false,\n            },\n            data: null,\n          };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}