{"ast":null,"code":"const _excluded = [\"condition\", \"to\", \"item\"];\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/ConditionalLink/ConditionalLink.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { UniversalLink } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\n\nconst ConditionalLink = _ref => {\n  let {\n    condition,\n    to,\n    item\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  if (condition) {\n    return __jsx(UniversalLink, _extends({\n      href: to,\n      item: item\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 7\n      }\n    }), props.children);\n  } else {\n    return props.children;\n  }\n};\n\nConditionalLink.propTypes = {\n  condition: PropTypes.bool,\n  to: PropTypes.string,\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    remoteUrl: PropTypes.string //of plone @type 'Link'\n\n  }),\n  children: PropTypes.node\n};\nexport default ConditionalLink;","map":{"version":3,"names":["React","UniversalLink","PropTypes","ConditionalLink","condition","to","item","props","children","propTypes","bool","string","shape","remoteUrl","node"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/ConditionalLink/ConditionalLink.jsx"],"sourcesContent":["import React from 'react';\nimport { UniversalLink } from '@plone/volto/components';\nimport PropTypes from 'prop-types';\n\nconst ConditionalLink = ({ condition, to, item, ...props }) => {\n  if (condition) {\n    return (\n      <UniversalLink href={to} item={item} {...props}>\n        {props.children}\n      </UniversalLink>\n    );\n  } else {\n    return props.children;\n  }\n};\n\nConditionalLink.propTypes = {\n  condition: PropTypes.bool,\n  to: PropTypes.string,\n  item: PropTypes.shape({\n    '@id': PropTypes.string,\n    remoteUrl: PropTypes.string, //of plone @type 'Link'\n  }),\n  children: PropTypes.node,\n};\n\nexport default ConditionalLink;\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,eAAe,GAAG,QAAuC;EAAA,IAAtC;IAAEC,SAAF;IAAaC,EAAb;IAAiBC;EAAjB,CAAsC;EAAA,IAAZC,KAAY;;EAC7D,IAAIH,SAAJ,EAAe;IACb,OACE,MAAC,aAAD;MAAe,IAAI,EAAEC,EAArB;MAAyB,IAAI,EAAEC;IAA/B,GAAyCC,KAAzC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IACGA,KAAK,CAACC,QADT,CADF;EAKD,CAND,MAMO;IACL,OAAOD,KAAK,CAACC,QAAb;EACD;AACF,CAVD;;AAYAL,eAAe,CAACM,SAAhB,GAA4B;EAC1BL,SAAS,EAAEF,SAAS,CAACQ,IADK;EAE1BL,EAAE,EAAEH,SAAS,CAACS,MAFY;EAG1BL,IAAI,EAAEJ,SAAS,CAACU,KAAV,CAAgB;IACpB,OAAOV,SAAS,CAACS,MADG;IAEpBE,SAAS,EAAEX,SAAS,CAACS,MAFD,CAES;;EAFT,CAAhB,CAHoB;EAO1BH,QAAQ,EAAEN,SAAS,CAACY;AAPM,CAA5B;AAUA,eAAeX,eAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}