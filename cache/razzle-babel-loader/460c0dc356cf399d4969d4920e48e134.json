{"ast":null,"code":"import config from '@plone/volto/registry';\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetByFieldId\n * @param {string} id Id\n * @returns {string} Widget component.\n */\n\nconst getWidgetByFieldId = id => config.widgets.views.id[id] || null;\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\n\n\nconst getWidgetByName = widget => typeof widget === 'string' ? config.widgets.views.widget[widget] : null;\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\n\n\nconst getWidgetByVocabulary = vocabulary => vocabulary && vocabulary['@id'] ? config.widgets.views.vocabulary[vocabulary['@id'].replace(`${config.settings.apiPath}/@vocabularies/`, '')] : null;\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\n\n\nconst getWidgetByVocabularyFromHint = props => props.widgetOptions && props.widgetOptions.vocabulary ? config.widgets.views.vocabulary[props.widgetOptions.vocabulary['@id'].replace(`${config.settings.apiPath}/@vocabularies/`, '')] : null;\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\n\n\nconst getWidgetByChoices = props => {\n  if (props.choices) {\n    return config.widgets.views.choices;\n  }\n\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.views.choices;\n  }\n\n  return null;\n};\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\n\n\nconst getWidgetByType = type => config.widgets.views.type[type] || null;\n/**\n * Get default widget\n * @method getWidgetDefault\n * @returns {string} Widget component.\n */\n\n\nconst getWidgetDefault = () => config.widgets.views.default;\n/**\n * Get Widget View\n * @method getWidgetView\n * @param {dict} props Props\n * @returns {string} Widget component.\n */\n\n\nexport const getWidgetView = props => getWidgetByFieldId(props.id) || getWidgetByName(props.widget) || getWidgetByChoices(props) || getWidgetByVocabulary(props.vocabulary) || getWidgetByVocabularyFromHint(props) || getWidgetByType(props.type) || getWidgetDefault();","map":{"version":3,"names":["config","getWidgetByFieldId","id","widgets","views","getWidgetByName","widget","getWidgetByVocabulary","vocabulary","replace","settings","apiPath","getWidgetByVocabularyFromHint","props","widgetOptions","getWidgetByChoices","choices","getWidgetByType","type","getWidgetDefault","default","getWidgetView"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Widget/widget.js"],"sourcesContent":["import config from '@plone/volto/registry';\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetByFieldId\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFieldId = (id) => config.widgets.views.id[id] || null;\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByName = (widget) =>\n  typeof widget === 'string' ? config.widgets.views.widget[widget] : null;\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabulary = (vocabulary) =>\n  vocabulary && vocabulary['@id']\n    ? config.widgets.views.vocabulary[\n        vocabulary['@id'].replace(\n          `${config.settings.apiPath}/@vocabularies/`,\n          '',\n        )\n      ]\n    : null;\n\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabularyFromHint = (props) =>\n  props.widgetOptions && props.widgetOptions.vocabulary\n    ? config.widgets.views.vocabulary[\n        props.widgetOptions.vocabulary['@id'].replace(\n          `${config.settings.apiPath}/@vocabularies/`,\n          '',\n        )\n      ]\n    : null;\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByChoices = (props) => {\n  if (props.choices) {\n    return config.widgets.views.choices;\n  }\n\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.views.choices;\n  }\n\n  return null;\n};\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nconst getWidgetByType = (type) => config.widgets.views.type[type] || null;\n\n/**\n * Get default widget\n * @method getWidgetDefault\n * @returns {string} Widget component.\n */\nconst getWidgetDefault = () => config.widgets.views.default;\n\n/**\n * Get Widget View\n * @method getWidgetView\n * @param {dict} props Props\n * @returns {string} Widget component.\n */\nexport const getWidgetView = (props) =>\n  getWidgetByFieldId(props.id) ||\n  getWidgetByName(props.widget) ||\n  getWidgetByChoices(props) ||\n  getWidgetByVocabulary(props.vocabulary) ||\n  getWidgetByVocabularyFromHint(props) ||\n  getWidgetByType(props.type) ||\n  getWidgetDefault();\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAIC,EAAD,IAAQF,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBF,EAArB,CAAwBA,EAAxB,KAA+B,IAAlE;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,eAAe,GAAIC,MAAD,IACtB,OAAOA,MAAP,KAAkB,QAAlB,GAA6BN,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBE,MAArB,CAA4BA,MAA5B,CAA7B,GAAmE,IADrE;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,qBAAqB,GAAIC,UAAD,IAC5BA,UAAU,IAAIA,UAAU,CAAC,KAAD,CAAxB,GACIR,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBI,UAArB,CACEA,UAAU,CAAC,KAAD,CAAV,CAAkBC,OAAlB,CACG,GAAET,MAAM,CAACU,QAAP,CAAgBC,OAAQ,iBAD7B,EAEE,EAFF,CADF,CADJ,GAOI,IARN;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,6BAA6B,GAAIC,KAAD,IACpCA,KAAK,CAACC,aAAN,IAAuBD,KAAK,CAACC,aAAN,CAAoBN,UAA3C,GACIR,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBI,UAArB,CACEK,KAAK,CAACC,aAAN,CAAoBN,UAApB,CAA+B,KAA/B,EAAsCC,OAAtC,CACG,GAAET,MAAM,CAACU,QAAP,CAAgBC,OAAQ,iBAD7B,EAEE,EAFF,CADF,CADJ,GAOI,IARN;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,kBAAkB,GAAIF,KAAD,IAAW;EACpC,IAAIA,KAAK,CAACG,OAAV,EAAmB;IACjB,OAAOhB,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBY,OAA5B;EACD;;EAED,IAAIH,KAAK,CAACL,UAAV,EAAsB;IACpB;IACA;IACA;IACA,OAAOR,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBY,OAA5B;EACD;;EAED,OAAO,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAIC,IAAD,IAAUlB,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBc,IAArB,CAA0BA,IAA1B,KAAmC,IAArE;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,MAAMnB,MAAM,CAACG,OAAP,CAAeC,KAAf,CAAqBgB,OAApD;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,aAAa,GAAIR,KAAD,IAC3BZ,kBAAkB,CAACY,KAAK,CAACX,EAAP,CAAlB,IACAG,eAAe,CAACQ,KAAK,CAACP,MAAP,CADf,IAEAS,kBAAkB,CAACF,KAAD,CAFlB,IAGAN,qBAAqB,CAACM,KAAK,CAACL,UAAP,CAHrB,IAIAI,6BAA6B,CAACC,KAAD,CAJ7B,IAKAI,eAAe,CAACJ,KAAK,CAACK,IAAP,CALf,IAMAC,gBAAgB,EAPX"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}