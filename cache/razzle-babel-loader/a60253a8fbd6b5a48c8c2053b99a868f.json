{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/PasswordReset/PasswordReset.jsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Form } from '@plone/volto/components';\nimport { setInitialPassword } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Set your password\",\n    \"defaultMessage\": \"Set your password\"\n  },\n  description: {\n    \"id\": \"Please fill out the form below to set your password.\",\n    \"defaultMessage\": \"Please fill out the form below to set your password.\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  usernameTitle: {\n    \"id\": \"My username is\",\n    \"defaultMessage\": \"My username is\"\n  },\n  emailTitle: {\n    \"id\": \"My email is\",\n    \"defaultMessage\": \"My email is\"\n  },\n  usernameDescription: {\n    \"id\": \"Enter your username for verification.\",\n    \"defaultMessage\": \"Enter your username for verification.\"\n  },\n  emailDescription: {\n    \"id\": \"Enter your email for verification.\",\n    \"defaultMessage\": \"Enter your email for verification.\"\n  },\n  passwordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  passwordDescription: {\n    \"id\": \"Enter your new password. Minimum 5 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 5 characters.\"\n  },\n  passwordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  passwordsDoNotMatch: {\n    \"id\": \"Passwords do not match.\",\n    \"defaultMessage\": \"Passwords do not match.\"\n  },\n  mailDoNotMatch: {\n    \"id\": \"E-mail addresses do not match.\",\n    \"defaultMessage\": \"E-mail addresses do not match.\"\n  },\n  passwordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  setMyPassword: {\n    \"id\": \"Set my password\",\n    \"defaultMessage\": \"Set my password\"\n  },\n  successRedirectToLoginTitle: {\n    \"id\": \"Account activation completed\",\n    \"defaultMessage\": \"Account activation completed\"\n  },\n  successRedirectToLoginBody: {\n    \"id\": \"Your password has been set successfully. You may now {link} with your new password.\",\n    \"defaultMessage\": \"Your password has been set successfully. You may now {link} with your new password.\"\n  },\n  passwordReset: {\n    \"id\": \"Password reset\",\n    \"defaultMessage\": \"Password reset\"\n  }\n});\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\n\nclass PasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false\n    };\n    this.identifierField = config.settings.useEmailAsLogin ? 'email' : 'username';\n    this.identifierTitle = this.identifierField === 'email' ? this.props.intl.formatMessage(messages.emailTitle) : this.props.intl.formatMessage(messages.usernameTitle);\n    this.identifierDescription = this.identifierField === 'email' ? this.props.intl.formatMessage(messages.emailDescription) : this.props.intl.formatMessage(messages.usernameDescription);\n  }\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({\n        isSuccessful: true\n      });\n    }\n  }\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(data[this.identifierField], this.props.token, data.password);\n      this.setState({\n        error: null\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch)\n        }\n      });\n    }\n  }\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n\n\n  onCancel() {\n    this.props.history.goBack();\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    if (this.state.isSuccessful) {\n      return __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 9\n        }\n      }, __jsx(\"h1\", {\n        className: \"documentFirstHeading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Account activation completed\",\n        defaultMessage: \"Account activation completed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }\n      })), __jsx(\"p\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Your password has been set successfully. You may now {link} with your new password.\",\n        defaultMessage: \"Your password has been set successfully. You may now {link} with your new password.\",\n        values: {\n          link: __jsx(Link, {\n            to: \"/login\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 19\n            }\n          }, this.props.intl.formatMessage({\n            id: 'Log In'\n          }))\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    if (this.props.token) {\n      return __jsx(\"div\", {\n        id: \"page-password-reset\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.passwordReset),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }\n      }), __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }\n      }, __jsx(Form, {\n        title: this.props.intl.formatMessage(messages.title),\n        description: this.props.intl.formatMessage(messages.description),\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        error: this.state.error || this.props.error,\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages.default),\n            fields: [this.identifierField, 'password', 'passwordRepeat']\n          }],\n          properties: {\n            [this.identifierField]: {\n              type: 'string',\n              title: this.identifierTitle,\n              description: this.identifierDescription\n            },\n            password: {\n              description: this.props.intl.formatMessage(messages.passwordDescription),\n              title: this.props.intl.formatMessage(messages.passwordTitle),\n              type: 'string',\n              widget: 'password'\n            },\n            passwordRepeat: {\n              description: this.props.intl.formatMessage(messages.passwordRepeatDescription),\n              title: this.props.intl.formatMessage(messages.passwordRepeatTitle),\n              type: 'string',\n              widget: 'password'\n            }\n          },\n          submitLabel: this.props.intl.formatMessage(messages.setMyPassword),\n          required: [this.identifierField, 'password', 'passwordRepeat']\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\n_defineProperty(PasswordReset, \"propTypes\", {\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  token: PropTypes.string.isRequired,\n  setInitialPassword: PropTypes.func.isRequired\n});\n\n_defineProperty(PasswordReset, \"defaultProps\", {\n  error: null\n});\n\nexport default compose(withRouter, injectIntl, connect((state, props) => ({\n  loading: state.users.initial.loading,\n  loaded: state.users.initial.loaded,\n  error: state.users.initial.error,\n  token: props.match.params.token\n}), {\n  setInitialPassword\n}))(PasswordReset);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","withRouter","Helmet","Container","FormattedMessage","defineMessages","injectIntl","Form","setInitialPassword","config","messages","title","description","default","usernameTitle","emailTitle","usernameDescription","emailDescription","passwordTitle","passwordDescription","passwordRepeatTitle","passwordsDoNotMatch","mailDoNotMatch","passwordRepeatDescription","setMyPassword","successRedirectToLoginTitle","successRedirectToLoginBody","passwordReset","PasswordReset","constructor","props","onCancel","bind","onSubmit","state","error","isSuccessful","identifierField","settings","useEmailAsLogin","identifierTitle","intl","formatMessage","identifierDescription","UNSAFE_componentWillReceiveProps","nextProps","loading","loaded","setState","data","password","passwordRepeat","token","message","history","goBack","render","link","id","fieldsets","fields","properties","type","widget","submitLabel","required","bool","isRequired","string","func","users","initial","match","params"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/PasswordReset/PasswordReset.jsx"],"sourcesContent":["/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Form } from '@plone/volto/components';\nimport { setInitialPassword } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Set your password',\n    defaultMessage: 'Set your password',\n  },\n  description: {\n    id: 'Please fill out the form below to set your password.',\n    defaultMessage: 'Please fill out the form below to set your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  usernameTitle: {\n    id: 'My username is',\n    defaultMessage: 'My username is',\n  },\n  emailTitle: {\n    id: 'My email is',\n    defaultMessage: 'My email is',\n  },\n  usernameDescription: {\n    id: 'Enter your username for verification.',\n    defaultMessage: 'Enter your username for verification.',\n  },\n  emailDescription: {\n    id: 'Enter your email for verification.',\n    defaultMessage: 'Enter your email for verification.',\n  },\n  passwordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  passwordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  passwordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  passwordsDoNotMatch: {\n    id: 'Passwords do not match.',\n    defaultMessage: 'Passwords do not match.',\n  },\n  mailDoNotMatch: {\n    id: 'E-mail addresses do not match.',\n    defaultMessage: 'E-mail addresses do not match.',\n  },\n  passwordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  setMyPassword: {\n    id: 'Set my password',\n    defaultMessage: 'Set my password',\n  },\n  successRedirectToLoginTitle: {\n    id: 'Account activation completed',\n    defaultMessage: 'Account activation completed',\n  },\n  successRedirectToLoginBody: {\n    id:\n      'Your password has been set successfully. You may now {link} with your new password.',\n    defaultMessage:\n      'Your password has been set successfully. You may now {link} with your new password.',\n  },\n  passwordReset: {\n    id: 'Password reset',\n    defaultMessage: 'Password reset',\n  },\n});\n\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nclass PasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    token: PropTypes.string.isRequired,\n    setInitialPassword: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n\n    this.identifierField = config.settings.useEmailAsLogin\n      ? 'email'\n      : 'username';\n\n    this.identifierTitle =\n      this.identifierField === 'email'\n        ? this.props.intl.formatMessage(messages.emailTitle)\n        : this.props.intl.formatMessage(messages.usernameTitle);\n\n    this.identifierDescription =\n      this.identifierField === 'email'\n        ? this.props.intl.formatMessage(messages.emailDescription)\n        : this.props.intl.formatMessage(messages.usernameDescription);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(\n        data[this.identifierField],\n        this.props.token,\n        data.password,\n      );\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"Account activation completed\"\n              defaultMessage=\"Account activation completed\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"Your password has been set successfully. You may now {link} with your new password.\"\n              defaultMessage=\"Your password has been set successfully. You may now {link} with your new password.\"\n              values={{\n                link: (\n                  <Link to=\"/login\">\n                    {this.props.intl.formatMessage({ id: 'Log In' })}\n                  </Link>\n                ),\n              }}\n            />\n          </p>\n        </Container>\n      );\n    }\n    if (this.props.token) {\n      return (\n        <div id=\"page-password-reset\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.passwordReset)}\n          />\n          <Container>\n            <Form\n              title={this.props.intl.formatMessage(messages.title)}\n              description={this.props.intl.formatMessage(messages.description)}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              error={this.state.error || this.props.error}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: this.props.intl.formatMessage(messages.default),\n                    fields: [\n                      this.identifierField,\n                      'password',\n                      'passwordRepeat',\n                    ],\n                  },\n                ],\n                properties: {\n                  [this.identifierField]: {\n                    type: 'string',\n                    title: this.identifierTitle,\n                    description: this.identifierDescription,\n                  },\n                  password: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                  passwordRepeat: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordRepeatDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordRepeatTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                },\n                submitLabel: this.props.intl.formatMessage(\n                  messages.setMyPassword,\n                ),\n                required: [this.identifierField, 'password', 'passwordRepeat'],\n              }}\n            />\n          </Container>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      loading: state.users.initial.loading,\n      loaded: state.users.initial.loaded,\n      error: state.users.initial.error,\n      token: props.match.params.token,\n    }),\n    { setInitialPassword },\n  ),\n)(PasswordReset);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Set your password","defaultMessage":"Set your password"},{"id":"Please fill out the form below to set your password.","defaultMessage":"Please fill out the form below to set your password."},{"id":"Default","defaultMessage":"Default"},{"id":"My username is","defaultMessage":"My username is"},{"id":"My email is","defaultMessage":"My email is"},{"id":"Enter your username for verification.","defaultMessage":"Enter your username for verification."},{"id":"Enter your email for verification.","defaultMessage":"Enter your email for verification."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 5 characters.","defaultMessage":"Enter your new password. Minimum 5 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Passwords do not match.","defaultMessage":"Passwords do not match."},{"id":"E-mail addresses do not match.","defaultMessage":"E-mail addresses do not match."},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Set my password","defaultMessage":"Set my password"},{"id":"Account activation completed","defaultMessage":"Account activation completed"},{"id":"Your password has been set successfully. You may now {link} with your new password.","defaultMessage":"Your password has been set successfully. You may now {link} with your new password."},{"id":"Password reset","defaultMessage":"Password reset"}]}},"sourceType":"module"}