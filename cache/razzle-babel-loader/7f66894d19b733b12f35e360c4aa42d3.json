{"ast":null,"code":"import _map from \"lodash/map\";\nimport _find from \"lodash/find\";\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/LanguageSelector/LanguageSelector.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport { Helmet, langmap, flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { defineMessages, useIntl } from 'react-intl';\nconst messages = defineMessages({\n  switchLanguageTo: {\n    \"id\": \"Switch to\",\n    \"defaultMessage\": \"Switch to\"\n  }\n});\n\nconst LanguageSelector = props => {\n  _s();\n\n  const intl = useIntl();\n  const currentLang = useSelector(state => state.intl.locale);\n  const translations = useSelector(state => {\n    var _state$content$data, _state$content$data$, _state$content$data$$;\n\n    return (_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : (_state$content$data$ = _state$content$data['@components']) === null || _state$content$data$ === void 0 ? void 0 : (_state$content$data$$ = _state$content$data$.translations) === null || _state$content$data$$ === void 0 ? void 0 : _state$content$data$$.items;\n  });\n  const {\n    settings\n  } = config;\n  return settings.isMultilingual ? __jsx(\"div\", {\n    className: \"language-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, _map(settings.supportedLanguages, lang => {\n    const translation = _find(translations, {\n      language: lang\n    });\n\n    return __jsx(Link, {\n      \"aria-label\": `${intl.formatMessage(messages.switchLanguageTo)} ${langmap[lang].nativeName.toLowerCase()}`,\n      className: cx({\n        selected: lang === currentLang\n      }),\n      to: translation ? flattenToAppURL(translation['@id']) : `/${lang}`,\n      title: langmap[lang].nativeName,\n      onClick: () => {\n        props.onClickAction();\n      },\n      key: `language-selector-${lang}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, langmap[lang].nativeName);\n  })) : __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"html\", {\n    lang: settings.defaultLanguage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(LanguageSelector, \"8jVtpbgBiXGv1VPla2i+k/0lzNY=\", false, function () {\n  return [useIntl, useSelector, useSelector];\n});\n\n_c = LanguageSelector;\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func\n};\nLanguageSelector.defaultProps = {\n  onClickAction: () => {}\n};\nexport default LanguageSelector;\n\nvar _c;\n\n$RefreshReg$(_c, \"LanguageSelector\");","map":{"version":3,"names":["React","PropTypes","Link","useSelector","cx","Helmet","langmap","flattenToAppURL","config","defineMessages","useIntl","messages","switchLanguageTo","LanguageSelector","props","intl","currentLang","state","locale","translations","content","data","items","settings","isMultilingual","supportedLanguages","lang","translation","language","formatMessage","nativeName","toLowerCase","selected","onClickAction","defaultLanguage","propTypes","func","defaultProps"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/theme/LanguageSelector/LanguageSelector.js"],"sourcesContent":["/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport { find, map } from 'lodash';\n\nimport { Helmet, langmap, flattenToAppURL } from '@plone/volto/helpers';\n\nimport config from '@plone/volto/registry';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  switchLanguageTo: {\n    id: 'Switch to',\n    defaultMessage: 'Switch to',\n  },\n});\n\nconst LanguageSelector = (props) => {\n  const intl = useIntl();\n  const currentLang = useSelector((state) => state.intl.locale);\n  const translations = useSelector(\n    (state) => state.content.data?.['@components']?.translations?.items,\n  );\n\n  const { settings } = config;\n\n  return settings.isMultilingual ? (\n    <div className=\"language-selector\">\n      {map(settings.supportedLanguages, (lang) => {\n        const translation = find(translations, { language: lang });\n        return (\n          <Link\n            aria-label={`${intl.formatMessage(\n              messages.switchLanguageTo,\n            )} ${langmap[lang].nativeName.toLowerCase()}`}\n            className={cx({ selected: lang === currentLang })}\n            to={translation ? flattenToAppURL(translation['@id']) : `/${lang}`}\n            title={langmap[lang].nativeName}\n            onClick={() => {\n              props.onClickAction();\n            }}\n            key={`language-selector-${lang}`}\n          >\n            {langmap[lang].nativeName}\n          </Link>\n        );\n      })}\n    </div>\n  ) : (\n    <Helmet>\n      <html lang={settings.defaultLanguage} />\n    </Helmet>\n  );\n};\n\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func,\n};\n\nLanguageSelector.defaultProps = {\n  onClickAction: () => {},\n};\n\nexport default LanguageSelector;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,EAAP,MAAe,YAAf;AAGA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,eAA1B,QAAiD,sBAAjD;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,SAASC,cAAT,EAAyBC,OAAzB,QAAwC,YAAxC;AAEA,MAAMC,QAAQ,GAAGF,cAAc,CAAC;EAC9BG,gBAAgB;IAAA;IAAA;EAAA;AADc,CAAD,CAA/B;;AAOA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;EAAA;;EAClC,MAAMC,IAAI,GAAGL,OAAO,EAApB;EACA,MAAMM,WAAW,GAAGb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACF,IAAN,CAAWG,MAAvB,CAA/B;EACA,MAAMC,YAAY,GAAGhB,WAAW,CAC7Bc,KAAD;IAAA;;IAAA,8BAAWA,KAAK,CAACG,OAAN,CAAcC,IAAzB,gFAAW,oBAAqB,aAArB,CAAX,kFAAW,qBAAqCF,YAAhD,0DAAW,sBAAmDG,KAA9D;EAAA,CAD8B,CAAhC;EAIA,MAAM;IAAEC;EAAF,IAAef,MAArB;EAEA,OAAOe,QAAQ,CAACC,cAAT,GACL;IAAK,SAAS,EAAC,mBAAf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACG,KAAID,QAAQ,CAACE,kBAAb,EAAkCC,IAAD,IAAU;IAC1C,MAAMC,WAAW,GAAG,MAAKR,YAAL,EAAmB;MAAES,QAAQ,EAAEF;IAAZ,CAAnB,CAApB;;IACA,OACE,MAAC,IAAD;MACE,cAAa,GAAEX,IAAI,CAACc,aAAL,CACblB,QAAQ,CAACC,gBADI,CAEb,IAAGN,OAAO,CAACoB,IAAD,CAAP,CAAcI,UAAd,CAAyBC,WAAzB,EAAuC,EAH9C;MAIE,SAAS,EAAE3B,EAAE,CAAC;QAAE4B,QAAQ,EAAEN,IAAI,KAAKV;MAArB,CAAD,CAJf;MAKE,EAAE,EAAEW,WAAW,GAAGpB,eAAe,CAACoB,WAAW,CAAC,KAAD,CAAZ,CAAlB,GAA0C,IAAGD,IAAK,EALnE;MAME,KAAK,EAAEpB,OAAO,CAACoB,IAAD,CAAP,CAAcI,UANvB;MAOE,OAAO,EAAE,MAAM;QACbhB,KAAK,CAACmB,aAAN;MACD,CATH;MAUE,GAAG,EAAG,qBAAoBP,IAAK,EAVjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAYGpB,OAAO,CAACoB,IAAD,CAAP,CAAcI,UAZjB,CADF;EAgBD,CAlBA,CADH,CADK,GAuBL,MAAC,MAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE;IAAM,IAAI,EAAEP,QAAQ,CAACW,eAArB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,CAvBF;AA2BD,CApCD;;GAAMrB,gB;UACSH,O,EACOP,W,EACCA,W;;;KAHjBU,gB;AAsCNA,gBAAgB,CAACsB,SAAjB,GAA6B;EAC3BF,aAAa,EAAEhC,SAAS,CAACmC;AADE,CAA7B;AAIAvB,gBAAgB,CAACwB,YAAjB,GAAgC;EAC9BJ,aAAa,EAAE,MAAM,CAAE;AADO,CAAhC;AAIA,eAAepB,gBAAf"},"metadata":{"react-intl":{"messages":[{"id":"Switch to","defaultMessage":"Switch to"}]}},"sourceType":"module"}