{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Multilingual/CompareLanguages.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { langmap, useDetectClickOutside } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport translateSVG from '@plone/volto/icons/translate.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  compare_to: {\n    \"id\": \"compare_to\",\n    \"defaultMessage\": \"Compare to language\"\n  },\n  stop_compare: {\n    \"id\": \"Stop compare\",\n    \"defaultMessage\": \"Stop compare\"\n  }\n});\n\nconst CompareLanguagesMenu = ({\n  theToolbar,\n  translations,\n  comparingLanguage,\n  setComparingLanguage,\n  closeMenu\n}) => {\n  const intl = useIntl();\n\n  const ClickOutsideListener = () => {\n    closeMenu();\n  };\n\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape']\n  });\n  return __jsx(\"div\", {\n    className: \"toolbar-content show compare-languages\",\n    ref: ref,\n    style: {\n      flex: theToolbar.current ? `0 0 ${theToolbar.current.getBoundingClientRect().width}px` : null\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"pastanaga-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.compare_to)), __jsx(\"div\", {\n    className: \"pastanaga-menu-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, translations.map(t => __jsx(\"li\", {\n    key: t['@id'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, comparingLanguage === t.language ? __jsx(\"button\", {\n    \"aria-label\": `${intl.formatMessage(messages.stop_compare)} ${langmap[t.language].nativeName}`,\n    title: `${intl.formatMessage(messages.stop_compare)} ${langmap[t.language].nativeName}`,\n    onClick: () => {\n      setComparingLanguage(null);\n      closeMenu();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }, langmap[t.language].nativeName, __jsx(Icon, {\n    name: clearSVG,\n    size: \"30px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  })) : __jsx(\"button\", {\n    \"aria-label\": `${intl.formatMessage(messages.compare_to)} ${langmap[t.language].nativeName.toLowerCase()}`,\n    title: `${intl.formatMessage(messages.compare_to)} ${langmap[t.language].nativeName.toLowerCase()}`,\n    onClick: () => {\n      setComparingLanguage(t.language);\n      closeMenu();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, langmap[t.language].nativeName)))))));\n};\n\nconst CompareLanguages = /*#__PURE__*/React.forwardRef((props, ref) => {\n  var _content$Components, _content$Components$t;\n\n  const {\n    content,\n    comparingLanguage,\n    setComparingLanguage,\n    pathname,\n    toolbarRef\n  } = props;\n  const intl = useIntl();\n  const {\n    0: viewMenu,\n    1: setViewMenu\n  } = useState(false);\n  const translations = config.settings.isMultilingual ? (content === null || content === void 0 ? void 0 : (_content$Components = content['@components']) === null || _content$Components === void 0 ? void 0 : (_content$Components$t = _content$Components.translations) === null || _content$Components$t === void 0 ? void 0 : _content$Components$t.items) || [] : [];\n  const translationsObject = {};\n  translations.forEach(t => {\n    translationsObject[t.language] = t['@id'];\n  });\n\n  if (config.settings.isMultilingual && translations.length > 0) {\n    return __jsx(\"div\", {\n      className: \"toolbar-compare-translations-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"toolbar-button-spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), __jsx(Button, {\n      \"aria-label\": intl.formatMessage(messages.compare_to),\n      title: intl.formatMessage(messages.compare_to),\n      onClick: () => {\n        setViewMenu(!viewMenu);\n      },\n      id: \"toolbar-compare-translations\",\n      className: \"toolbar-button-compare-translations\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, __jsx(Icon, {\n      className: \"mobile hidden\",\n      name: translateSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }), viewMenu ? __jsx(Icon, {\n      className: \"mobile only\",\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }) : __jsx(Icon, {\n      className: \"mobile only\",\n      name: translateSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    })), viewMenu && __jsx(CompareLanguagesMenu, {\n      pathname: pathname,\n      theToolbar: toolbarRef,\n      key: `compareLanguagesComponent`,\n      closeMenu: () => setViewMenu(false),\n      translations: translations,\n      setComparingLanguage: value => {\n        setComparingLanguage(value, translationsObject[value]);\n      },\n      comparingLanguage: comparingLanguage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return null;\n  }\n});\nexport default CompareLanguages;","map":{"version":3,"names":["React","useState","defineMessages","useIntl","config","langmap","useDetectClickOutside","Icon","Button","translateSVG","clearSVG","messages","compare_to","stop_compare","CompareLanguagesMenu","theToolbar","translations","comparingLanguage","setComparingLanguage","closeMenu","intl","ClickOutsideListener","ref","onTriggered","triggerKeys","flex","current","getBoundingClientRect","width","formatMessage","map","t","language","nativeName","toLowerCase","CompareLanguages","forwardRef","props","content","pathname","toolbarRef","viewMenu","setViewMenu","settings","isMultilingual","items","translationsObject","forEach","length","value"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Multilingual/CompareLanguages.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { langmap, useDetectClickOutside } from '@plone/volto/helpers';\n\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport translateSVG from '@plone/volto/icons/translate.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  compare_to: {\n    id: 'compare_to',\n    defaultMessage: 'Compare to language',\n  },\n  stop_compare: {\n    id: 'Stop compare',\n    defaultMessage: 'Stop compare',\n  },\n});\n\nconst CompareLanguagesMenu = ({\n  theToolbar,\n  translations,\n  comparingLanguage,\n  setComparingLanguage,\n  closeMenu,\n}) => {\n  const intl = useIntl();\n\n  const ClickOutsideListener = () => {\n    closeMenu();\n  };\n\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n  });\n\n  return (\n    <div\n      className=\"toolbar-content show compare-languages\"\n      ref={ref}\n      style={{\n        flex: theToolbar.current\n          ? `0 0 ${theToolbar.current.getBoundingClientRect().width}px`\n          : null,\n      }}\n    >\n      <div className=\"pastanaga-menu\">\n        <header>{intl.formatMessage(messages.compare_to)}</header>\n        <div className=\"pastanaga-menu-list\">\n          <ul>\n            {translations.map((t) => (\n              <li key={t['@id']}>\n                {comparingLanguage === t.language ? (\n                  <button\n                    aria-label={`${intl.formatMessage(messages.stop_compare)} ${\n                      langmap[t.language].nativeName\n                    }`}\n                    title={`${intl.formatMessage(messages.stop_compare)} ${\n                      langmap[t.language].nativeName\n                    }`}\n                    onClick={() => {\n                      setComparingLanguage(null);\n                      closeMenu();\n                    }}\n                  >\n                    {langmap[t.language].nativeName}\n                    <Icon name={clearSVG} size=\"30px\" />\n                  </button>\n                ) : (\n                  <button\n                    aria-label={`${intl.formatMessage(\n                      messages.compare_to,\n                    )} ${langmap[t.language].nativeName.toLowerCase()}`}\n                    title={`${intl.formatMessage(\n                      messages.compare_to,\n                    )} ${langmap[t.language].nativeName.toLowerCase()}`}\n                    onClick={() => {\n                      setComparingLanguage(t.language);\n                      closeMenu();\n                    }}\n                  >\n                    {langmap[t.language].nativeName}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CompareLanguages = React.forwardRef((props, ref) => {\n  const {\n    content,\n    comparingLanguage,\n    setComparingLanguage,\n    pathname,\n    toolbarRef,\n  } = props;\n\n  const intl = useIntl();\n  const [viewMenu, setViewMenu] = useState(false);\n  const translations = config.settings.isMultilingual\n    ? content?.['@components']?.translations?.items || []\n    : [];\n\n  const translationsObject = {};\n  translations.forEach((t) => {\n    translationsObject[t.language] = t['@id'];\n  });\n\n  if (config.settings.isMultilingual && translations.length > 0) {\n    return (\n      <div className=\"toolbar-compare-translations-wrapper\">\n        <div className=\"toolbar-button-spacer\" />\n\n        <Button\n          aria-label={intl.formatMessage(messages.compare_to)}\n          title={intl.formatMessage(messages.compare_to)}\n          onClick={() => {\n            setViewMenu(!viewMenu);\n          }}\n          id=\"toolbar-compare-translations\"\n          className=\"toolbar-button-compare-translations\"\n        >\n          <Icon className=\"mobile hidden\" name={translateSVG} size=\"30px\" />\n          {viewMenu ? (\n            <Icon className=\"mobile only\" name={clearSVG} size=\"30px\" />\n          ) : (\n            <Icon className=\"mobile only\" name={translateSVG} size=\"30px\" />\n          )}\n        </Button>\n\n        {viewMenu && (\n          <CompareLanguagesMenu\n            pathname={pathname}\n            theToolbar={toolbarRef}\n            key={`compareLanguagesComponent`}\n            closeMenu={() => setViewMenu(false)}\n            translations={translations}\n            setComparingLanguage={(value) => {\n              setComparingLanguage(value, translationsObject[value]);\n            }}\n            comparingLanguage={comparingLanguage}\n          />\n        )}\n      </div>\n    );\n  } else {\n    return null;\n  }\n});\n\nexport default CompareLanguages;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"compare_to","defaultMessage":"Compare to language"},{"id":"Stop compare","defaultMessage":"Stop compare"}]}},"sourceType":"module"}