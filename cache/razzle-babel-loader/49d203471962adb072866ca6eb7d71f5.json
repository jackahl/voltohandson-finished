{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _merge from \"lodash/merge\";\nimport _mapKeys from \"lodash/mapKeys\";\nimport _map from \"lodash/map\";\nimport _isArray from \"lodash/isArray\";\nimport _pickBy from \"lodash/pickBy\";\nimport _keys from \"lodash/keys\";\nimport _flatten from \"lodash/flatten\";\nimport { GET_SCHEMA, POST_SCHEMA, PUT_SCHEMA, UPDATE_SCHEMA } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null\n  }\n};\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\n\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\n\n\nexport default function schema() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: true,\n        loaded: false\n      });\n\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n\n    /** SUCCESS */\n\n    case `${GET_SCHEMA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: _objectSpread(_objectSpread({}, action.result), {}, {\n          required: [...action.result.required, ..._flatten(_map(_keys(_pickBy(action.result.properties, _isArray)), fieldset => _map(action.result.definitions[fieldset].required, required => `${fieldset}.${required}`)))],\n          properties: _objectSpread(_objectSpread({}, action.result.properties), _merge(..._map(_keys(_pickBy(action.result.properties, _isArray)), fieldset => _mapKeys(action.result.definitions[fieldset].properties, (value, key) => `${fieldset}.${key}`))))\n        })\n      });\n\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    /** FAIL */\n\n    case `${GET_SCHEMA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null\n      });\n\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_SCHEMA","POST_SCHEMA","PUT_SCHEMA","UPDATE_SCHEMA","initialState","error","loaded","loading","schema","post","update","put","getRequestKey","actionType","split","toLowerCase","state","action","type","result","required","properties","fieldset","definitions","value","key"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/reducers/schema/schema.js"],"sourcesContent":["/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport { flatten, keys, pickBy, isArray, map, mapKeys, merge } from 'lodash';\n\nimport {\n  GET_SCHEMA,\n  POST_SCHEMA,\n  PUT_SCHEMA,\n  UPDATE_SCHEMA,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: {\n          ...action.result,\n          required: [\n            ...action.result.required,\n            ...flatten(\n              map(keys(pickBy(action.result.properties, isArray)), (fieldset) =>\n                map(\n                  action.result.definitions[fieldset].required,\n                  (required) => `${fieldset}.${required}`,\n                ),\n              ),\n            ),\n          ],\n          properties: {\n            ...action.result.properties,\n            ...merge(\n              ...map(\n                keys(pickBy(action.result.properties, isArray)),\n                (fieldset) =>\n                  mapKeys(\n                    action.result.definitions[fieldset].properties,\n                    (value, key) => `${fieldset}.${key}`,\n                  ),\n              ),\n            ),\n          },\n        },\n      };\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null,\n      };\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}