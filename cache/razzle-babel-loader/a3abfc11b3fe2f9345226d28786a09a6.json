{"ast":null,"code":"import _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nimport _map from \"lodash/map\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_MESSAGE, REMOVE_MESSAGE, PURGE_MESSAGES } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  messages: []\n};\n/**\n * Messages reducer.\n * @function messages\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\n\nexport default function messages(state = initialState, action = {}) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        messages: _concat([{\n          id: action.id,\n          title: action.title,\n          body: action.body,\n          level: action.level,\n          show: action.show\n        }], state.messages)\n      };\n\n    case REMOVE_MESSAGE:\n      return {\n        messages: _filter(state.messages, (message, index) => action.index === -1 ? index !== state.messages.length - 1 : index !== action.index)\n      };\n\n    case PURGE_MESSAGES:\n      return {\n        messages: _map(_filter(state.messages, message => message.show), message => _objectSpread(_objectSpread({}, message), {}, {\n          show: false\n        }))\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_MESSAGE","REMOVE_MESSAGE","PURGE_MESSAGES","initialState","messages","state","action","type","id","title","body","level","show","message","index","length"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/reducers/messages/messages.js"],"sourcesContent":["/**\n * Messages reducer.\n * @module reducers/messages/messages\n */\nimport { map, concat, filter } from 'lodash';\n\nimport {\n  ADD_MESSAGE,\n  REMOVE_MESSAGE,\n  PURGE_MESSAGES,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  messages: [],\n};\n\n/**\n * Messages reducer.\n * @function messages\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function messages(state = initialState, action = {}) {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        messages: concat(\n          [\n            {\n              id: action.id,\n              title: action.title,\n              body: action.body,\n              level: action.level,\n              show: action.show,\n            },\n          ],\n          state.messages,\n        ),\n      };\n    case REMOVE_MESSAGE:\n      return {\n        messages: filter(state.messages, (message, index) =>\n          action.index === -1\n            ? index !== state.messages.length - 1\n            : index !== action.index,\n        ),\n      };\n    case PURGE_MESSAGES:\n      return {\n        messages: map(\n          filter(state.messages, (message) => message.show),\n          (message) => ({\n            ...message,\n            show: false,\n          }),\n        ),\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;;;;;;;;AAMA,SACEA,WADF,EAEEC,cAFF,EAGEC,cAHF,QAIO,oCAJP;AAMA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE;AADS,CAArB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASA,QAAT,CAAkBC,KAAK,GAAGF,YAA1B,EAAwCG,MAAM,GAAG,EAAjD,EAAqD;EAClE,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKP,WAAL;MACE,OAAO;QACLI,QAAQ,EAAE,QACR,CACE;UACEI,EAAE,EAAEF,MAAM,CAACE,EADb;UAEEC,KAAK,EAAEH,MAAM,CAACG,KAFhB;UAGEC,IAAI,EAAEJ,MAAM,CAACI,IAHf;UAIEC,KAAK,EAAEL,MAAM,CAACK,KAJhB;UAKEC,IAAI,EAAEN,MAAM,CAACM;QALf,CADF,CADQ,EAURP,KAAK,CAACD,QAVE;MADL,CAAP;;IAcF,KAAKH,cAAL;MACE,OAAO;QACLG,QAAQ,EAAE,QAAOC,KAAK,CAACD,QAAb,EAAuB,CAACS,OAAD,EAAUC,KAAV,KAC/BR,MAAM,CAACQ,KAAP,KAAiB,CAAC,CAAlB,GACIA,KAAK,KAAKT,KAAK,CAACD,QAAN,CAAeW,MAAf,GAAwB,CADtC,GAEID,KAAK,KAAKR,MAAM,CAACQ,KAHb;MADL,CAAP;;IAOF,KAAKZ,cAAL;MACE,OAAO;QACLE,QAAQ,EAAE,KACR,QAAOC,KAAK,CAACD,QAAb,EAAwBS,OAAD,IAAaA,OAAO,CAACD,IAA5C,CADQ,EAEPC,OAAD,oCACKA,OADL;UAEED,IAAI,EAAE;QAFR,EAFQ;MADL,CAAP;;IASF;MACE,OAAOP,KAAP;EAnCJ;AAqCD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}