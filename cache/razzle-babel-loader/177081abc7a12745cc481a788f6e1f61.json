{"ast":null,"code":"import _keys from \"lodash/keys\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/server.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint no-console: 0 */\nimport '@plone/volto/config'; // This is the bootstrap for the global config - server side\n\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { resetServerContext } from 'react-beautiful-dnd';\nimport { CookiesProvider } from 'react-cookie';\nimport cookiesMiddleware from 'universal-cookie-express';\nimport debug from 'debug';\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\nimport { flattenToAppURL, Html, Api, persistAuthToken, normalizeLanguageName, toLangUnderscoreRegion } from '@plone/volto/helpers';\nimport { changeLanguage } from '@plone/volto/actions';\nimport userSession from '@plone/volto/reducers/userSession/userSession';\nimport ErrorPage from '@plone/volto/error';\nimport languages from '@plone/volto/constants/Languages';\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach(lang => {\n    const langFileName = normalizeLanguageName(lang);\n    import('@root/../locales/' + langFileName + '.json').then(locale => {\n      locales = _objectSpread(_objectSpread({}, locales), {}, {\n        [lang]: locale.default\n      });\n    });\n  });\n}\n\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\n\nconst supported = new locale.Locales(_keys(languages), 'en');\nconst server = express().disable('x-powered-by').use(express.static(process.env.BUILD_DIR ? path.join(process.env.BUILD_DIR, 'public') : process.env.RAZZLE_PUBLIC_DIR)).head('/*', function (req, res) {\n  // Support for HEAD requests. Required by start-test utility in CI.\n  res.send('');\n}).use(cookiesMiddleware());\nconst middleware = (config.settings.expressMiddleware || []).filter(m => m);\nserver.all('*', setupServer);\nif (middleware.length) server.use('/', middleware);\nserver.use(function (err, req, res, next) {\n  if (err) {\n    const {\n      store\n    } = res.locals;\n\n    const errorPage = __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, __jsx(StaticRouter, {\n      context: {},\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, __jsx(ErrorPage, {\n      message: err.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform'\n    });\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(err.status)) console.error(err);\n    res.status(err.status || 500) // If error happens in Volto code itself error status is undefined\n    .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n});\n\nfunction setupServer(req, res, next) {\n  const api = new Api(req);\n  const lang = new locale.Locales(req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language']).best(supported).toString(); // Minimum initial state for the fake Redux store instance\n\n  const initialState = {\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang]\n    }\n  };\n  const history = createMemoryHistory({\n    initialEntries: [req.url]\n  }); // Create a fake Redux store instance for the `errorHandler` to render\n  // and for being used by the rest of the middlewares, if required\n\n  const store = configureStore(initialState, history, api);\n\n  function errorHandler(error) {\n    const errorPage = __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, __jsx(StaticRouter, {\n      context: {},\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, __jsx(ErrorPage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    })));\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform'\n    });\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(error.status)) console.error(error);\n    res.status(error.status || 500) // If error happens in Volto code itself error status is undefined\n    .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n\n  if (!process.env.RAZZLE_API_PATH && req.headers.host) {\n    res.locals.detectedHost = `${req.headers['x-forwarded-proto'] || req.protocol}://${req.headers.host}`;\n    config.settings.apiPath = res.locals.detectedHost;\n    config.settings.publicURL = res.locals.detectedHost;\n  }\n\n  res.locals = _objectSpread(_objectSpread({}, res.locals), {}, {\n    store,\n    api,\n    errorHandler\n  });\n  next();\n}\n\nserver.get('/*', (req, res) => {\n  const {\n    errorHandler\n  } = res.locals;\n  const api = new Api(req);\n  const browserdetect = detect(req.headers['user-agent']);\n  const lang = new locale.Locales(req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language']).best(supported).toString();\n  const authToken = req.universalCookies.get('auth_token');\n  const initialState = {\n    userSession: _objectSpread(_objectSpread({}, userSession()), {}, {\n      token: authToken\n    }),\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang]\n    },\n    browserdetect\n  };\n  const history = createMemoryHistory({\n    initialEntries: [req.url]\n  }); // Create a new Redux store instance\n\n  const store = configureStore(initialState, history, api);\n  persistAuthToken(store, req); // @loadable/server extractor\n\n  const buildDir = process.env.BUILD_DIR || 'build';\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve(path.join(buildDir, 'loadable-stats.json')),\n    entrypoints: ['client']\n  });\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n  loadOnServer({\n    store,\n    location,\n    routes,\n    api\n  }).then(() => {\n    var _store$getState$conte, _store$getState$conte2;\n\n    // The content info is in the store at this point thanks to the asynconnect\n    // features, then we can force the current language info into the store when\n    // coming from an SSR request\n    const contentLang = ((_store$getState$conte = store.getState().content.data) === null || _store$getState$conte === void 0 ? void 0 : (_store$getState$conte2 = _store$getState$conte.language) === null || _store$getState$conte2 === void 0 ? void 0 : _store$getState$conte2.token) || config.settings.defaultLanguage;\n    const cookie_lang = req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language'];\n\n    if (cookie_lang !== contentLang) {\n      const newLocale = toLangUnderscoreRegion(new locale.Locales(contentLang).best(supported).toString());\n      store.dispatch(changeLanguage(newLocale, locales[newLocale], req));\n    }\n\n    const context = {};\n    resetServerContext();\n    const markup = renderToString(__jsx(ChunkExtractorManager, {\n      extractor: extractor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }, __jsx(CookiesProvider, {\n      cookies: req.universalCookies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, __jsx(StaticRouter, {\n      context: context,\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    }, __jsx(ReduxAsyncConnect, {\n      routes: routes,\n      helpers: api,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }))))));\n    const readCriticalCss = config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n\n    if (context.url) {\n      res.redirect(flattenToAppURL(context.url));\n    } else if (context.error_code) {\n      var _config$settings$serv;\n\n      res.set({\n        'Cache-Control': 'no-cache'\n      });\n      res.status(context.error_code).send(`<!doctype html>\n              ${renderToString(__jsx(Html, {\n        extractor: extractor,\n        markup: markup,\n        store: store,\n        extractScripts: ((_config$settings$serv = config.settings.serverConfig.extractScripts) === null || _config$settings$serv === void 0 ? void 0 : _config$settings$serv.errorPages) || true,\n        criticalCss: readCriticalCss(req),\n        apiPath: res.locals.detectedHost || config.settings.apiPath,\n        publicURL: res.locals.detectedHost || config.settings.publicURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }\n      }))}\n            `);\n    } else {\n      res.status(200).send(`<!doctype html>\n              ${renderToString(__jsx(Html, {\n        extractor: extractor,\n        markup: markup,\n        store: store,\n        criticalCss: readCriticalCss(req),\n        apiPath: res.locals.detectedHost || config.settings.apiPath,\n        publicURL: res.locals.detectedHost || config.settings.publicURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 17\n        }\n      }))}\n            `);\n    }\n  }, errorHandler).catch(errorHandler);\n});\nexport const defaultReadCriticalCss = () => {\n  const {\n    criticalCssPath\n  } = config.settings.serverConfig;\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n  return readFileSync(criticalCssPath, {\n    encoding: 'utf-8'\n  });\n}; // Exposed for the console bootstrap info messages\n\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\nserver.publicURL = config.settings.publicURL;\nexport default server;","map":{"version":3,"names":["existsSync","lstatSync","readFileSync","React","StaticRouter","Provider","express","renderToString","createMemoryHistory","parse","parseUrl","locale","detect","path","ChunkExtractor","ChunkExtractorManager","resetServerContext","CookiesProvider","cookiesMiddleware","debug","routes","config","flattenToAppURL","Html","Api","persistAuthToken","normalizeLanguageName","toLangUnderscoreRegion","changeLanguage","userSession","ErrorPage","languages","configureStore","ReduxAsyncConnect","loadOnServer","locales","settings","supportedLanguages","forEach","lang","langFileName","then","default","reactIntlErrorHandler","error","supported","Locales","server","disable","use","static","process","env","BUILD_DIR","join","RAZZLE_PUBLIC_DIR","head","req","res","send","middleware","expressMiddleware","filter","m","all","setupServer","length","err","next","store","locals","errorPage","url","message","set","ignoredErrors","includes","status","console","api","universalCookies","get","defaultLanguage","headers","best","toString","initialState","intl","defaultLocale","messages","history","initialEntries","errorHandler","RAZZLE_API_PATH","host","detectedHost","protocol","apiPath","publicURL","browserdetect","authToken","token","form","body","buildDir","extractor","statsFile","resolve","entrypoints","originalUrl","location","contentLang","getState","content","data","language","cookie_lang","newLocale","dispatch","context","markup","readCriticalCss","serverConfig","defaultReadCriticalCss","redirect","error_code","extractScripts","errorPages","catch","criticalCssPath","e","f","isFile","encoding","devProxyToApiPath"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/server.jsx"],"sourcesContent":["/* eslint no-console: 0 */\nimport '@plone/volto/config'; // This is the bootstrap for the global config - server side\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport { keys } from 'lodash';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { resetServerContext } from 'react-beautiful-dnd';\nimport { CookiesProvider } from 'react-cookie';\nimport cookiesMiddleware from 'universal-cookie-express';\nimport debug from 'debug';\n\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\n\nimport {\n  flattenToAppURL,\n  Html,\n  Api,\n  persistAuthToken,\n  normalizeLanguageName,\n  toLangUnderscoreRegion,\n} from '@plone/volto/helpers';\nimport { changeLanguage } from '@plone/volto/actions';\n\nimport userSession from '@plone/volto/reducers/userSession/userSession';\n\nimport ErrorPage from '@plone/volto/error';\n\nimport languages from '@plone/volto/constants/Languages';\n\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    const langFileName = normalizeLanguageName(lang);\n    import('@root/../locales/' + langFileName + '.json').then((locale) => {\n      locales = { ...locales, [lang]: locale.default };\n    });\n  });\n}\n\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\n\nconst supported = new locale.Locales(keys(languages), 'en');\n\nconst server = express()\n  .disable('x-powered-by')\n  .use(\n    express.static(\n      process.env.BUILD_DIR\n        ? path.join(process.env.BUILD_DIR, 'public')\n        : process.env.RAZZLE_PUBLIC_DIR,\n    ),\n  )\n  .head('/*', function (req, res) {\n    // Support for HEAD requests. Required by start-test utility in CI.\n    res.send('');\n  })\n  .use(cookiesMiddleware());\n\nconst middleware = (config.settings.expressMiddleware || []).filter((m) => m);\n\nserver.all('*', setupServer);\nif (middleware.length) server.use('/', middleware);\n\nserver.use(function (err, req, res, next) {\n  if (err) {\n    const { store } = res.locals;\n    const errorPage = (\n      <Provider store={store} onError={reactIntlErrorHandler}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={err.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(err.status)) console.error(err);\n\n    res\n      .status(err.status || 500) // If error happens in Volto code itself error status is undefined\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n});\n\nfunction setupServer(req, res, next) {\n  const api = new Api(req);\n\n  const lang = new locale.Locales(\n    req.universalCookies.get('I18N_LANGUAGE') ||\n      config.settings.defaultLanguage ||\n      req.headers['accept-language'],\n  )\n    .best(supported)\n    .toString();\n\n  // Minimum initial state for the fake Redux store instance\n  const initialState = {\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a fake Redux store instance for the `errorHandler` to render\n  // and for being used by the rest of the middlewares, if required\n  const store = configureStore(initialState, history, api);\n\n  function errorHandler(error) {\n    const errorPage = (\n      <Provider store={store} onError={reactIntlErrorHandler}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={error.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(error.status)) console.error(error);\n\n    res\n      .status(error.status || 500) // If error happens in Volto code itself error status is undefined\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n\n  if (!process.env.RAZZLE_API_PATH && req.headers.host) {\n    res.locals.detectedHost = `${\n      req.headers['x-forwarded-proto'] || req.protocol\n    }://${req.headers.host}`;\n    config.settings.apiPath = res.locals.detectedHost;\n    config.settings.publicURL = res.locals.detectedHost;\n  }\n\n  res.locals = {\n    ...res.locals,\n    store,\n    api,\n    errorHandler,\n  };\n\n  next();\n}\n\nserver.get('/*', (req, res) => {\n  const { errorHandler } = res.locals;\n\n  const api = new Api(req);\n\n  const browserdetect = detect(req.headers['user-agent']);\n\n  const lang = new locale.Locales(\n    req.universalCookies.get('I18N_LANGUAGE') ||\n      config.settings.defaultLanguage ||\n      req.headers['accept-language'],\n  )\n    .best(supported)\n    .toString();\n\n  const authToken = req.universalCookies.get('auth_token');\n  const initialState = {\n    userSession: { ...userSession(), token: authToken },\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n    browserdetect,\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a new Redux store instance\n  const store = configureStore(initialState, history, api);\n\n  persistAuthToken(store, req);\n\n  // @loadable/server extractor\n  const buildDir = process.env.BUILD_DIR || 'build';\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve(path.join(buildDir, 'loadable-stats.json')),\n    entrypoints: ['client'],\n  });\n\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n\n  loadOnServer({ store, location, routes, api })\n    .then(() => {\n      // The content info is in the store at this point thanks to the asynconnect\n      // features, then we can force the current language info into the store when\n      // coming from an SSR request\n      const contentLang =\n        store.getState().content.data?.language?.token ||\n        config.settings.defaultLanguage;\n\n      const cookie_lang =\n        req.universalCookies.get('I18N_LANGUAGE') ||\n        config.settings.defaultLanguage ||\n        req.headers['accept-language'];\n\n      if (cookie_lang !== contentLang) {\n        const newLocale = toLangUnderscoreRegion(\n          new locale.Locales(contentLang).best(supported).toString(),\n        );\n        store.dispatch(changeLanguage(newLocale, locales[newLocale], req));\n      }\n\n      const context = {};\n      resetServerContext();\n      const markup = renderToString(\n        <ChunkExtractorManager extractor={extractor}>\n          <CookiesProvider cookies={req.universalCookies}>\n            <Provider store={store} onError={reactIntlErrorHandler}>\n              <StaticRouter context={context} location={req.url}>\n                <ReduxAsyncConnect routes={routes} helpers={api} />\n              </StaticRouter>\n            </Provider>\n          </CookiesProvider>\n        </ChunkExtractorManager>,\n      );\n\n      const readCriticalCss =\n        config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n\n      if (context.url) {\n        res.redirect(flattenToAppURL(context.url));\n      } else if (context.error_code) {\n        res.set({\n          'Cache-Control': 'no-cache',\n        });\n\n        res.status(context.error_code).send(\n          `<!doctype html>\n              ${renderToString(\n                <Html\n                  extractor={extractor}\n                  markup={markup}\n                  store={store}\n                  extractScripts={\n                    config.settings.serverConfig.extractScripts?.errorPages ||\n                    process.env.NODE_ENV !== 'production'\n                  }\n                  criticalCss={readCriticalCss(req)}\n                  apiPath={res.locals.detectedHost || config.settings.apiPath}\n                  publicURL={\n                    res.locals.detectedHost || config.settings.publicURL\n                  }\n                />,\n              )}\n            `,\n        );\n      } else {\n        res.status(200).send(\n          `<!doctype html>\n              ${renderToString(\n                <Html\n                  extractor={extractor}\n                  markup={markup}\n                  store={store}\n                  criticalCss={readCriticalCss(req)}\n                  apiPath={res.locals.detectedHost || config.settings.apiPath}\n                  publicURL={\n                    res.locals.detectedHost || config.settings.publicURL\n                  }\n                />,\n              )}\n            `,\n        );\n      }\n    }, errorHandler)\n    .catch(errorHandler);\n});\n\nexport const defaultReadCriticalCss = () => {\n  const { criticalCssPath } = config.settings.serverConfig;\n\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n\n  return readFileSync(criticalCssPath, { encoding: 'utf-8' });\n};\n\n// Exposed for the console bootstrap info messages\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\nserver.publicURL = config.settings.publicURL;\n\nexport default server;\n"],"mappings":";;;;;;;;;;AAAA;AACA,OAAO,qBAAP,C,CAA8B;;AAC9B,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,IAApD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,KAAK,IAAIC,QAAlB,QAAkC,KAAlC;AAEA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,kBAAtD;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AACA,SAASC,eAAT,QAAgC,cAAhC;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,SACEC,eADF,EAEEC,IAFF,EAGEC,GAHF,EAIEC,gBAJF,EAKEC,qBALF,EAMEC,sBANF,QAOO,sBAPP;AAQA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,OAAOC,WAAP,MAAwB,+CAAxB;AAEA,OAAOC,SAAP,MAAsB,oBAAtB;AAEA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,SAASC,iBAAT,EAA4BC,YAA5B,QAAgD,wBAAhD;AAEA,IAAIC,OAAO,GAAG,EAAd;;AAEA,IAAId,MAAM,CAACe,QAAX,EAAqB;EACnBf,MAAM,CAACe,QAAP,CAAgBC,kBAAhB,CAAmCC,OAAnC,CAA4CC,IAAD,IAAU;IACnD,MAAMC,YAAY,GAAGd,qBAAqB,CAACa,IAAD,CAA1C;IACA,OAAO,sBAAsBC,YAAtB,GAAqC,OAA5C,EAAqDC,IAArD,CAA2D9B,MAAD,IAAY;MACpEwB,OAAO,mCAAQA,OAAR;QAAiB,CAACI,IAAD,GAAQ5B,MAAM,CAAC+B;MAAhC,EAAP;IACD,CAFD;EAGD,CALD;AAMD;;AAED,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;EACpCzB,KAAK,CAAC,MAAD,CAAL,CAAcyB,KAAd;AACD;;AAED,MAAMC,SAAS,GAAG,IAAIlC,MAAM,CAACmC,OAAX,CAAmB,MAAKf,SAAL,CAAnB,EAAoC,IAApC,CAAlB;AAEA,MAAMgB,MAAM,GAAGzC,OAAO,GACnB0C,OADY,CACJ,cADI,EAEZC,GAFY,CAGX3C,OAAO,CAAC4C,MAAR,CACEC,OAAO,CAACC,GAAR,CAAYC,SAAZ,GACIxC,IAAI,CAACyC,IAAL,CAAUH,OAAO,CAACC,GAAR,CAAYC,SAAtB,EAAiC,QAAjC,CADJ,GAEIF,OAAO,CAACC,GAAR,CAAYG,iBAHlB,CAHW,EASZC,IATY,CASP,IATO,EASD,UAAUC,GAAV,EAAeC,GAAf,EAAoB;EAC9B;EACAA,GAAG,CAACC,IAAJ,CAAS,EAAT;AACD,CAZY,EAaZV,GAbY,CAaR/B,iBAAiB,EAbT,CAAf;AAeA,MAAM0C,UAAU,GAAG,CAACvC,MAAM,CAACe,QAAP,CAAgByB,iBAAhB,IAAqC,EAAtC,EAA0CC,MAA1C,CAAkDC,CAAD,IAAOA,CAAxD,CAAnB;AAEAhB,MAAM,CAACiB,GAAP,CAAW,GAAX,EAAgBC,WAAhB;AACA,IAAIL,UAAU,CAACM,MAAf,EAAuBnB,MAAM,CAACE,GAAP,CAAW,GAAX,EAAgBW,UAAhB;AAEvBb,MAAM,CAACE,GAAP,CAAW,UAAUkB,GAAV,EAAeV,GAAf,EAAoBC,GAApB,EAAyBU,IAAzB,EAA+B;EACxC,IAAID,GAAJ,EAAS;IACP,MAAM;MAAEE;IAAF,IAAYX,GAAG,CAACY,MAAtB;;IACA,MAAMC,SAAS,GACb,MAAC,QAAD;MAAU,KAAK,EAAEF,KAAjB;MAAwB,OAAO,EAAE1B,qBAAjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,YAAD;MAAc,OAAO,EAAE,EAAvB;MAA2B,QAAQ,EAAEc,GAAG,CAACe,GAAzC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,SAAD;MAAW,OAAO,EAAEL,GAAG,CAACM,OAAxB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,CADF;;IAQAf,GAAG,CAACgB,GAAJ,CAAQ;MACN,iBAAiB;IADX,CAAR;IAIA;AACJ;AACA;AACA;;IACI,MAAMC,aAAa,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAtB;IACA,IAAI,CAACA,aAAa,CAACC,QAAd,CAAuBT,GAAG,CAACU,MAA3B,CAAL,EAAyCC,OAAO,CAAClC,KAAR,CAAcuB,GAAd;IAEzCT,GAAG,CACAmB,MADH,CACUV,GAAG,CAACU,MAAJ,IAAc,GADxB,EAC6B;IAD7B,CAEGlB,IAFH,CAES,mBAAkBpD,cAAc,CAACgE,SAAD,CAAY,EAFrD;EAGD;AACF,CA1BD;;AA4BA,SAASN,WAAT,CAAqBR,GAArB,EAA0BC,GAA1B,EAA+BU,IAA/B,EAAqC;EACnC,MAAMW,GAAG,GAAG,IAAIvD,GAAJ,CAAQiC,GAAR,CAAZ;EAEA,MAAMlB,IAAI,GAAG,IAAI5B,MAAM,CAACmC,OAAX,CACXW,GAAG,CAACuB,gBAAJ,CAAqBC,GAArB,CAAyB,eAAzB,KACE5D,MAAM,CAACe,QAAP,CAAgB8C,eADlB,IAEEzB,GAAG,CAAC0B,OAAJ,CAAY,iBAAZ,CAHS,EAKVC,IALU,CAKLvC,SALK,EAMVwC,QANU,EAAb,CAHmC,CAWnC;;EACA,MAAMC,YAAY,GAAG;IACnBC,IAAI,EAAE;MACJC,aAAa,EAAE,IADX;MAEJ7E,MAAM,EAAE4B,IAFJ;MAGJkD,QAAQ,EAAEtD,OAAO,CAACI,IAAD;IAHb;EADa,CAArB;EAQA,MAAMmD,OAAO,GAAGlF,mBAAmB,CAAC;IAClCmF,cAAc,EAAE,CAAClC,GAAG,CAACe,GAAL;EADkB,CAAD,CAAnC,CApBmC,CAwBnC;EACA;;EACA,MAAMH,KAAK,GAAGrC,cAAc,CAACsD,YAAD,EAAeI,OAAf,EAAwBX,GAAxB,CAA5B;;EAEA,SAASa,YAAT,CAAsBhD,KAAtB,EAA6B;IAC3B,MAAM2B,SAAS,GACb,MAAC,QAAD;MAAU,KAAK,EAAEF,KAAjB;MAAwB,OAAO,EAAE1B,qBAAjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,YAAD;MAAc,OAAO,EAAE,EAAvB;MAA2B,QAAQ,EAAEc,GAAG,CAACe,GAAzC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,SAAD;MAAW,OAAO,EAAE5B,KAAK,CAAC6B,OAA1B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,CADF;;IAQAf,GAAG,CAACgB,GAAJ,CAAQ;MACN,iBAAiB;IADX,CAAR;IAIA;AACJ;AACA;AACA;;IACI,MAAMC,aAAa,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAtB;IACA,IAAI,CAACA,aAAa,CAACC,QAAd,CAAuBhC,KAAK,CAACiC,MAA7B,CAAL,EAA2CC,OAAO,CAAClC,KAAR,CAAcA,KAAd;IAE3Cc,GAAG,CACAmB,MADH,CACUjC,KAAK,CAACiC,MAAN,IAAgB,GAD1B,EAC+B;IAD/B,CAEGlB,IAFH,CAES,mBAAkBpD,cAAc,CAACgE,SAAD,CAAY,EAFrD;EAGD;;EAED,IAAI,CAACpB,OAAO,CAACC,GAAR,CAAYyC,eAAb,IAAgCpC,GAAG,CAAC0B,OAAJ,CAAYW,IAAhD,EAAsD;IACpDpC,GAAG,CAACY,MAAJ,CAAWyB,YAAX,GAA2B,GACzBtC,GAAG,CAAC0B,OAAJ,CAAY,mBAAZ,KAAoC1B,GAAG,CAACuC,QACzC,MAAKvC,GAAG,CAAC0B,OAAJ,CAAYW,IAAK,EAFvB;IAGAzE,MAAM,CAACe,QAAP,CAAgB6D,OAAhB,GAA0BvC,GAAG,CAACY,MAAJ,CAAWyB,YAArC;IACA1E,MAAM,CAACe,QAAP,CAAgB8D,SAAhB,GAA4BxC,GAAG,CAACY,MAAJ,CAAWyB,YAAvC;EACD;;EAEDrC,GAAG,CAACY,MAAJ,mCACKZ,GAAG,CAACY,MADT;IAEED,KAFF;IAGEU,GAHF;IAIEa;EAJF;EAOAxB,IAAI;AACL;;AAEDrB,MAAM,CAACkC,GAAP,CAAW,IAAX,EAAiB,CAACxB,GAAD,EAAMC,GAAN,KAAc;EAC7B,MAAM;IAAEkC;EAAF,IAAmBlC,GAAG,CAACY,MAA7B;EAEA,MAAMS,GAAG,GAAG,IAAIvD,GAAJ,CAAQiC,GAAR,CAAZ;EAEA,MAAM0C,aAAa,GAAGvF,MAAM,CAAC6C,GAAG,CAAC0B,OAAJ,CAAY,YAAZ,CAAD,CAA5B;EAEA,MAAM5C,IAAI,GAAG,IAAI5B,MAAM,CAACmC,OAAX,CACXW,GAAG,CAACuB,gBAAJ,CAAqBC,GAArB,CAAyB,eAAzB,KACE5D,MAAM,CAACe,QAAP,CAAgB8C,eADlB,IAEEzB,GAAG,CAAC0B,OAAJ,CAAY,iBAAZ,CAHS,EAKVC,IALU,CAKLvC,SALK,EAMVwC,QANU,EAAb;EAQA,MAAMe,SAAS,GAAG3C,GAAG,CAACuB,gBAAJ,CAAqBC,GAArB,CAAyB,YAAzB,CAAlB;EACA,MAAMK,YAAY,GAAG;IACnBzD,WAAW,kCAAOA,WAAW,EAAlB;MAAsBwE,KAAK,EAAED;IAA7B,EADQ;IAEnBE,IAAI,EAAE7C,GAAG,CAAC8C,IAFS;IAGnBhB,IAAI,EAAE;MACJC,aAAa,EAAE,IADX;MAEJ7E,MAAM,EAAE4B,IAFJ;MAGJkD,QAAQ,EAAEtD,OAAO,CAACI,IAAD;IAHb,CAHa;IAQnB4D;EARmB,CAArB;EAWA,MAAMT,OAAO,GAAGlF,mBAAmB,CAAC;IAClCmF,cAAc,EAAE,CAAClC,GAAG,CAACe,GAAL;EADkB,CAAD,CAAnC,CA3B6B,CA+B7B;;EACA,MAAMH,KAAK,GAAGrC,cAAc,CAACsD,YAAD,EAAeI,OAAf,EAAwBX,GAAxB,CAA5B;EAEAtD,gBAAgB,CAAC4C,KAAD,EAAQZ,GAAR,CAAhB,CAlC6B,CAoC7B;;EACA,MAAM+C,QAAQ,GAAGrD,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyB,OAA1C;EACA,MAAMoD,SAAS,GAAG,IAAI3F,cAAJ,CAAmB;IACnC4F,SAAS,EAAE7F,IAAI,CAAC8F,OAAL,CAAa9F,IAAI,CAACyC,IAAL,CAAUkD,QAAV,EAAoB,qBAApB,CAAb,CADwB;IAEnCI,WAAW,EAAE,CAAC,QAAD;EAFsB,CAAnB,CAAlB;EAKA,MAAMpC,GAAG,GAAGf,GAAG,CAACoD,WAAJ,IAAmBpD,GAAG,CAACe,GAAnC;EACA,MAAMsC,QAAQ,GAAGpG,QAAQ,CAAC8D,GAAD,CAAzB;EAEAtC,YAAY,CAAC;IAAEmC,KAAF;IAASyC,QAAT;IAAmB1F,MAAnB;IAA2B2D;EAA3B,CAAD,CAAZ,CACGtC,IADH,CACQ,MAAM;IAAA;;IACV;IACA;IACA;IACA,MAAMsE,WAAW,GACf,0BAAA1C,KAAK,CAAC2C,QAAN,GAAiBC,OAAjB,CAAyBC,IAAzB,0GAA+BC,QAA/B,kFAAyCd,KAAzC,KACAhF,MAAM,CAACe,QAAP,CAAgB8C,eAFlB;IAIA,MAAMkC,WAAW,GACf3D,GAAG,CAACuB,gBAAJ,CAAqBC,GAArB,CAAyB,eAAzB,KACA5D,MAAM,CAACe,QAAP,CAAgB8C,eADhB,IAEAzB,GAAG,CAAC0B,OAAJ,CAAY,iBAAZ,CAHF;;IAKA,IAAIiC,WAAW,KAAKL,WAApB,EAAiC;MAC/B,MAAMM,SAAS,GAAG1F,sBAAsB,CACtC,IAAIhB,MAAM,CAACmC,OAAX,CAAmBiE,WAAnB,EAAgC3B,IAAhC,CAAqCvC,SAArC,EAAgDwC,QAAhD,EADsC,CAAxC;MAGAhB,KAAK,CAACiD,QAAN,CAAe1F,cAAc,CAACyF,SAAD,EAAYlF,OAAO,CAACkF,SAAD,CAAnB,EAAgC5D,GAAhC,CAA7B;IACD;;IAED,MAAM8D,OAAO,GAAG,EAAhB;IACAvG,kBAAkB;IAClB,MAAMwG,MAAM,GAAGjH,cAAc,CAC3B,MAAC,qBAAD;MAAuB,SAAS,EAAEkG,SAAlC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,eAAD;MAAiB,OAAO,EAAEhD,GAAG,CAACuB,gBAA9B;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,QAAD;MAAU,KAAK,EAAEX,KAAjB;MAAwB,OAAO,EAAE1B,qBAAjC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,YAAD;MAAc,OAAO,EAAE4E,OAAvB;MAAgC,QAAQ,EAAE9D,GAAG,CAACe,GAA9C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACE,MAAC,iBAAD;MAAmB,MAAM,EAAEpD,MAA3B;MAAmC,OAAO,EAAE2D,GAA5C;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF,CADF,CADF,CADF,CAD2B,CAA7B;IAYA,MAAM0C,eAAe,GACnBpG,MAAM,CAACe,QAAP,CAAgBsF,YAAhB,CAA6BD,eAA7B,IAAgDE,sBADlD;;IAGA,IAAIJ,OAAO,CAAC/C,GAAZ,EAAiB;MACfd,GAAG,CAACkE,QAAJ,CAAatG,eAAe,CAACiG,OAAO,CAAC/C,GAAT,CAA5B;IACD,CAFD,MAEO,IAAI+C,OAAO,CAACM,UAAZ,EAAwB;MAAA;;MAC7BnE,GAAG,CAACgB,GAAJ,CAAQ;QACN,iBAAiB;MADX,CAAR;MAIAhB,GAAG,CAACmB,MAAJ,CAAW0C,OAAO,CAACM,UAAnB,EAA+BlE,IAA/B,CACG;AACX,gBAAgBpD,cAAc,CACd,MAAC,IAAD;QACE,SAAS,EAAEkG,SADb;QAEE,MAAM,EAAEe,MAFV;QAGE,KAAK,EAAEnD,KAHT;QAIE,cAAc,EACZ,0BAAAhD,MAAM,CAACe,QAAP,CAAgBsF,YAAhB,CAA6BI,cAA7B,gFAA6CC,UAA7C,SALJ;QAQE,WAAW,EAAEN,eAAe,CAAChE,GAAD,CAR9B;QASE,OAAO,EAAEC,GAAG,CAACY,MAAJ,CAAWyB,YAAX,IAA2B1E,MAAM,CAACe,QAAP,CAAgB6D,OATtD;QAUE,SAAS,EACPvC,GAAG,CAACY,MAAJ,CAAWyB,YAAX,IAA2B1E,MAAM,CAACe,QAAP,CAAgB8D,SAX/C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADc,CAed;AAChB,aAlBQ;IAoBD,CAzBM,MAyBA;MACLxC,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBlB,IAAhB,CACG;AACX,gBAAgBpD,cAAc,CACd,MAAC,IAAD;QACE,SAAS,EAAEkG,SADb;QAEE,MAAM,EAAEe,MAFV;QAGE,KAAK,EAAEnD,KAHT;QAIE,WAAW,EAAEoD,eAAe,CAAChE,GAAD,CAJ9B;QAKE,OAAO,EAAEC,GAAG,CAACY,MAAJ,CAAWyB,YAAX,IAA2B1E,MAAM,CAACe,QAAP,CAAgB6D,OALtD;QAME,SAAS,EACPvC,GAAG,CAACY,MAAJ,CAAWyB,YAAX,IAA2B1E,MAAM,CAACe,QAAP,CAAgB8D,SAP/C;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADc,CAWd;AAChB,aAdQ;IAgBD;EACF,CAnFH,EAmFKN,YAnFL,EAoFGoC,KApFH,CAoFSpC,YApFT;AAqFD,CAnID;AAqIA,OAAO,MAAM+B,sBAAsB,GAAG,MAAM;EAC1C,MAAM;IAAEM;EAAF,IAAsB5G,MAAM,CAACe,QAAP,CAAgBsF,YAA5C;EAEA,MAAMQ,CAAC,GAAGlI,UAAU,CAACiI,eAAD,CAApB;EACA,IAAI,CAACC,CAAL,EAAQ;EAER,MAAMC,CAAC,GAAGlI,SAAS,CAACgI,eAAD,CAAnB;EACA,IAAI,CAACE,CAAC,CAACC,MAAF,EAAL,EAAiB;EAEjB,OAAOlI,YAAY,CAAC+H,eAAD,EAAkB;IAAEI,QAAQ,EAAE;EAAZ,CAAlB,CAAnB;AACD,CAVM,C,CAYP;;AACAtF,MAAM,CAACkD,OAAP,GAAiB5E,MAAM,CAACe,QAAP,CAAgB6D,OAAjC;AACAlD,MAAM,CAACuF,iBAAP,GAA2BjH,MAAM,CAACe,QAAP,CAAgBkG,iBAA3C;AACAvF,MAAM,CAACmD,SAAP,GAAmB7E,MAAM,CAACe,QAAP,CAAgB8D,SAAnC;AAEA,eAAenD,MAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}