{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Sidebar reducer.\n * @module reducers/sidebar/sidebar\n */\nimport { SET_SIDEBAR_TAB } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  tab: 0\n};\n/**\n * Sidebar reducer.\n * @function sidebar\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\n\nexport default function sidebar(state = initialState, action = {}) {\n  switch (action.type) {\n    case SET_SIDEBAR_TAB:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tab: action.index\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["SET_SIDEBAR_TAB","initialState","tab","sidebar","state","action","type","index"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/reducers/sidebar/sidebar.js"],"sourcesContent":["/**\n * Sidebar reducer.\n * @module reducers/sidebar/sidebar\n */\n\nimport { SET_SIDEBAR_TAB } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  tab: 0,\n};\n\n/**\n * Sidebar reducer.\n * @function sidebar\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function sidebar(state = initialState, action = {}) {\n  switch (action.type) {\n    case SET_SIDEBAR_TAB:\n      return {\n        ...state,\n        tab: action.index,\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAEA,SAASA,eAAT,QAAgC,oCAAhC;AAEA,MAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE;AADc,CAArB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGH,YAAzB,EAAuCI,MAAM,GAAG,EAAhD,EAAoD;EACjE,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKN,eAAL;MACE,uCACKI,KADL;QAEEF,GAAG,EAAEG,MAAM,CAACE;MAFd;;IAIF;MACE,OAAOH,KAAP;EAPJ;AASD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}