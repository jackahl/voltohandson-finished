{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\";\nimport _without from \"lodash/without\";\nimport _pickBy from \"lodash/pickBy\";\nimport _mapValues from \"lodash/mapValues\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _findIndex from \"lodash/findIndex\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Form/Form.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Form component.\n * @module components/manage/Form/Form\n */\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport { difference, FormValidation, getBlocksFieldname, getBlocksLayoutFieldname, messages } from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { Button, Container, Form as UiForm, Message, Segment, Tab } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar, UndoToolbar } from '@plone/volto/components';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\n\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getOnlyFormModifiedValues\", () => {\n      const fieldsModified = Object.keys(difference(this.state.formData, this.state.initialFormData));\n      return _objectSpread(_objectSpread({}, _pickBy(this.state.formData, (value, key) => fieldsModified.includes(key))), this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': this.state.formData['@static_behaviors']\n      });\n    });\n\n    _defineProperty(this, \"removeBlocksLayoutFields\", schema => {\n      const newSchema = _objectSpread({}, schema);\n\n      const layoutFieldsetIndex = _findIndex(newSchema.fieldsets, fieldset => fieldset.id === 'layout');\n\n      if (layoutFieldsetIndex > -1) {\n        const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n        newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(field => field !== 'blocks' && field !== 'blocks_layout');\n\n        if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n          newSchema.fieldsets = [...newSchema.fieldsets.slice(0, layoutFieldsetIndex), ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1)];\n        }\n      }\n\n      return newSchema;\n    });\n\n    const ids = {\n      title: uuid(),\n      text: uuid()\n    };\n    let {\n      formData\n    } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = _objectSpread(_objectSpread({}, _mapValues(props.schema.properties, 'default')), formData);\n    } // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n\n\n    if (formData.hasOwnProperty(blocksFieldname) && formData.hasOwnProperty(blocksLayoutFieldname)) {\n      if (!formData[blocksLayoutFieldname] || _isEmpty(formData[blocksLayoutFieldname].items)) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text]\n        };\n      }\n\n      if (!formData[blocksFieldname] || _isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title'\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType\n          }\n        };\n      }\n    }\n\n    let selectedBlock = null;\n\n    if (formData.hasOwnProperty(blocksLayoutFieldname) && formData[blocksLayoutFieldname].items.length > 0) {\n      var _config$blocks, _config$blocks$initia;\n\n      selectedBlock = formData[blocksLayoutFieldname].items[0];\n\n      if ((_config$blocks = config.blocks) !== null && _config$blocks !== void 0 && (_config$blocks$initia = _config$blocks.initialBlocksFocus) !== null && _config$blocks$initia !== void 0 && _config$blocks$initia[this.props.type]) {\n        //Default selected is not the first block, but the one from config.\n        Object.keys(formData[blocksFieldname]).forEach(b_key => {\n          var _config$blocks2, _config$blocks2$initi;\n\n          if (formData[blocksFieldname][b_key]['@type'] === ((_config$blocks2 = config.blocks) === null || _config$blocks2 === void 0 ? void 0 : (_config$blocks2$initi = _config$blocks2.initialBlocksFocus) === null || _config$blocks2$initi === void 0 ? void 0 : _config$blocks2$initi[this.props.type])) {\n            selectedBlock = b_key;\n          }\n        });\n      }\n    }\n\n    this.state = {\n      formData,\n      initialFormData: _cloneDeep(formData),\n      errors: {},\n      selected: selectedBlock,\n      multiSelected: [],\n      isClient: false\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n  }\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n\n\n  async componentDidUpdate(prevProps, prevState) {\n    let {\n      requestError\n    } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n\n    if (requestError && prevProps.requestError !== requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(requestError);\n      activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema\n      });\n      this.setState({\n        errors,\n        activeIndex\n      });\n    }\n\n    if (this.props.onChangeFormData) {\n      if ( // TODO: use fast-deep-equal\n      JSON.stringify(prevState === null || prevState === void 0 ? void 0 : prevState.formData) !== JSON.stringify(this.state.formData)) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n  }\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n\n\n  onTabChange(e, {\n    activeIndex\n  }) {\n    this.setState({\n      activeIndex\n    });\n  }\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n\n\n  onClickInput(e) {\n    this.setState({\n      isFormPristine: false\n    });\n  }\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n\n\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: {\n          [id]: value\n        }\n      });\n      this.setState({\n        errors\n      });\n    }\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let newState = _objectSpread({}, state);\n\n    if (!props.isFormSelected) {\n      newState.selected = null;\n    }\n\n    return newState;\n  }\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n\n\n  onChangeField(id, value) {\n    this.setState(prevState => {\n      const {\n        errors,\n        formData\n      } = prevState;\n      delete errors[id];\n      return {\n        errors,\n        formData: _objectSpread(_objectSpread({}, formData), {}, {\n          // We need to catch also when the value equals false this fixes #888\n          [id]: value || value !== undefined && isBoolean(value) ? value : null\n        })\n      };\n    });\n  }\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n\n\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n      const blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor = this.state.multiSelected.length > 0 ? blocks_layout.indexOf(this.state.multiSelected[0]) : blocks_layout.indexOf(this.state.selected);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.state.multiSelected || [];\n\n        if (!this.state.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.state.selected];\n          selected = null;\n        }\n\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = _without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n\n    this.setState({\n      selected,\n      multiSelected\n    });\n\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData\n      });\n    }\n\n    this.props.onCancel(event);\n  }\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const errors = this.props.schema ? FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData: this.state.formData,\n      formatMessage: this.props.intl.formatMessage\n    }) : {};\n\n    if (_keys(errors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema\n      });\n      this.setState({\n        errors,\n        activeIndex\n      }, () => {\n        Object.keys(errors).forEach(err => toast.error(__jsx(Toast, {\n          error: true,\n          title: err,\n          content: errors[err].join(', '),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }\n        })));\n      }); // Changes the focus to the metadata tab in the sidebar if error\n\n      this.props.setSidebarTab(0);\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(this.state.formData);\n      }\n\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData\n        });\n      }\n    }\n  }\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      settings\n    } = config;\n    const {\n      schema: originalSchema,\n      onCancel,\n      onSubmit\n    } = this.props;\n    const {\n      formData\n    } = this.state;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n    return this.props.visual ? // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n    // but draftJS don't like it much and the hydration gets messed up\n    this.state.isClient && __jsx(\"div\", {\n      className: \"ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }\n    }, __jsx(BlocksToolbar, {\n      formData: this.state.formData,\n      selectedBlock: this.state.selected,\n      selectedBlocks: this.state.multiSelected,\n      onChangeBlocks: newBlockData => this.setState({\n        formData: _objectSpread(_objectSpread({}, formData), newBlockData)\n      }),\n      onSetSelectedBlocks: blockIds => this.setState({\n        multiSelected: blockIds\n      }),\n      onSelectBlock: this.onSelectBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }\n    }), __jsx(UndoToolbar, {\n      state: {\n        formData: this.state.formData,\n        selected: this.state.selected,\n        multiSelected: this.state.multiSelected\n      },\n      enableHotKeys: true,\n      onUndoRedo: ({\n        state\n      }) => this.setState(state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }\n    }), __jsx(BlocksForm, {\n      onChangeFormData: newFormData => this.setState({\n        formData: _objectSpread(_objectSpread({}, formData), newFormData)\n      }),\n      onChangeField: this.onChangeField,\n      onSelectBlock: this.onSelectBlock,\n      properties: formData,\n      pathname: this.props.pathname,\n      selectedBlock: this.state.selected,\n      multiSelected: this.state.multiSelected,\n      manage: this.props.isAdminForm,\n      allowedBlocks: this.props.allowedBlocks,\n      showRestricted: this.props.showRestricted,\n      editable: this.props.editable,\n      isMainForm: this.props.editable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }\n    }), this.state.isClient && this.props.editable && __jsx(Portal, {\n      node: __CLIENT__ && document.getElementById('sidebar-metadata'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 13\n      }\n    }, __jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: _keys(this.state.errors).length > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 15\n      }\n    }, schema && _map(schema.fieldsets, item => [__jsx(Segment, {\n      secondary: true,\n      attached: true,\n      className: `fieldset-${item.id}`,\n      key: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }\n    }, item.title), __jsx(Segment, {\n      attached: true,\n      key: `fieldset-contents-${item.title}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 21\n      }\n    }, _map(item.fields, (field, index) => {\n      var _this$state$formData;\n\n      return __jsx(Field, _extends({}, schema.properties[field], {\n        id: field,\n        fieldSet: item.title.toLowerCase(),\n        formData: this.state.formData,\n        focus: false,\n        value: (_this$state$formData = this.state.formData) === null || _this$state$formData === void 0 ? void 0 : _this$state$formData[field],\n        required: schema.required.indexOf(field) !== -1,\n        onChange: this.onChangeField,\n        onBlur: this.onBlurField,\n        onClick: this.onClickInput,\n        key: field,\n        error: this.state.errors[field],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 25\n        }\n      }));\n    }))])))) : __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 7\n      }\n    }, __jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: _keys(this.state.errors).length > 0,\n      className: settings.verticalFormTabs ? 'vertical-form' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }\n    }, __jsx(\"fieldset\", {\n      className: \"invisible\",\n      disabled: !this.props.editable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 11\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 13\n      }\n    }, schema && schema.fieldsets.length > 1 && __jsx(React.Fragment, null, settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n      secondary: true,\n      attached: true,\n      key: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 21\n      }\n    }, this.props.title), __jsx(Tab, {\n      menu: {\n        secondary: true,\n        pointing: true,\n        attached: true,\n        tabular: true,\n        className: 'formtabs',\n        vertical: settings.verticalFormTabs\n      },\n      grid: {\n        paneWidth: 9,\n        tabWidth: 3,\n        stackable: true\n      },\n      onTabChange: this.onTabChange,\n      activeIndex: this.state.activeIndex,\n      panes: _map(schema.fieldsets, item => ({\n        menuItem: item.title,\n        render: () => [!settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n          secondary: true,\n          attached: true,\n          key: this.props.title,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 27\n          }\n        }, this.props.title), item.description && __jsx(Message, {\n          attached: \"bottom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 27\n          }\n        }, item.description), ..._map(item.fields, (field, index) => {\n          var _this$state$formData2;\n\n          return __jsx(Field, _extends({}, schema.properties[field], {\n            id: field,\n            formData: this.state.formData,\n            fieldSet: item.title.toLowerCase(),\n            focus: index === 0,\n            value: (_this$state$formData2 = this.state.formData) === null || _this$state$formData2 === void 0 ? void 0 : _this$state$formData2[field],\n            required: schema.required.indexOf(field) !== -1,\n            onChange: this.onChangeField,\n            onBlur: this.onBlurField,\n            onClick: this.onClickInput,\n            key: field,\n            error: this.state.errors[field],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 27\n            }\n          }));\n        })]\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 19\n      }\n    })), schema && schema.fieldsets.length === 1 && __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 17\n      }\n    }, this.props.title && __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 21\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        fontSize: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 23\n      }\n    }, \" \", this.props.title)), this.props.description && __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 21\n      }\n    }, this.props.description), _keys(this.state.errors).length > 0 && __jsx(Message, {\n      icon: \"warning\",\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: this.props.intl.formatMessage(messages.thereWereSomeErrors),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 21\n      }\n    }), this.props.error && __jsx(Message, {\n      icon: \"warning\",\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: this.props.error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 21\n      }\n    }), _map(schema.fieldsets[0].fields, field => {\n      var _this$state$formData3;\n\n      return __jsx(Field, _extends({}, schema.properties[field], {\n        id: field,\n        value: (_this$state$formData3 = this.state.formData) === null || _this$state$formData3 === void 0 ? void 0 : _this$state$formData3[field],\n        required: schema.required.indexOf(field) !== -1,\n        onChange: this.onChangeField,\n        onBlur: this.onBlurField,\n        onClick: this.onClickInput,\n        key: field,\n        error: this.state.errors[field],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 21\n        }\n      }));\n    })), !this.props.hideActions && __jsx(Segment, {\n      className: \"actions\",\n      clearing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 17\n      }\n    }, onSubmit && __jsx(Button, {\n      basic: true,\n      primary: true,\n      floated: \"right\",\n      type: \"submit\",\n      \"aria-label\": this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      title: this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: aheadSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 23\n      }\n    })), onCancel && __jsx(Button, {\n      basic: true,\n      secondary: true,\n      \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n      title: this.props.intl.formatMessage(messages.cancel),\n      floated: \"right\",\n      onClick: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 23\n      }\n    })))))));\n  }\n\n}\n\n_defineProperty(Form, \"propTypes\", {\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onCancel: PropTypes.func,\n  submitLabel: PropTypes.string,\n  resetAfterSubmit: PropTypes.bool,\n  resetOnCancel: PropTypes.bool,\n  isEditForm: PropTypes.bool,\n  isAdminForm: PropTypes.bool,\n  title: PropTypes.string,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  loading: PropTypes.bool,\n  hideActions: PropTypes.bool,\n  description: PropTypes.string,\n  visual: PropTypes.bool,\n  blocks: PropTypes.arrayOf(PropTypes.object),\n  isFormSelected: PropTypes.bool,\n  onSelectForm: PropTypes.func,\n  editable: PropTypes.bool,\n  onChangeFormData: PropTypes.func,\n  requestError: PropTypes.string,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool\n});\n\n_defineProperty(Form, \"defaultProps\", {\n  formData: null,\n  onSubmit: null,\n  onCancel: null,\n  submitLabel: null,\n  resetAfterSubmit: false,\n  resetOnCancel: false,\n  isEditForm: false,\n  isAdminForm: false,\n  title: null,\n  description: null,\n  error: null,\n  loading: null,\n  hideActions: false,\n  visual: false,\n  blocks: [],\n  pathname: '',\n  schema: {},\n  isFormSelected: true,\n  onSelectForm: null,\n  editable: true,\n  requestError: null,\n  allowedBlocks: null\n});\n\nconst FormIntl = injectIntl(Form, {\n  forwardRef: true\n});\nexport default compose(connect(null, {\n  setSidebarTab\n}, null, {\n  forwardRef: true\n}))(FormIntl);","map":{"version":3,"names":["BlocksForm","Field","Icon","Toast","difference","FormValidation","getBlocksFieldname","getBlocksLayoutFieldname","messages","aheadSVG","clearSVG","isBoolean","PropTypes","React","Component","injectIntl","Portal","connect","Button","Container","Form","UiForm","Message","Segment","Tab","v4","uuid","toast","BlocksToolbar","UndoToolbar","setSidebarTab","compose","config","constructor","props","fieldsModified","Object","keys","state","formData","initialFormData","value","key","includes","schema","newSchema","layoutFieldsetIndex","fieldsets","fieldset","id","layoutFields","fields","filter","field","length","slice","ids","title","text","blocksFieldname","blocksLayoutFieldname","isEditForm","properties","hasOwnProperty","items","settings","defaultBlockType","selectedBlock","blocks","initialBlocksFocus","type","forEach","b_key","errors","selected","multiSelected","isClient","onChangeField","bind","onSelectBlock","onSubmit","onCancel","onTabChange","onBlurField","onClickInput","componentDidUpdate","prevProps","prevState","requestError","activeIndex","giveServerErrorsToCorrespondingFields","showFirstTabWithErrors","setState","onChangeFormData","JSON","stringify","e","isFormPristine","validateFieldsPerFieldset","formatMessage","intl","touchedField","componentDidMount","getDerivedStateFromProps","newState","isFormSelected","undefined","isMultipleSelection","event","blocks_layout","shiftKey","anchor","indexOf","focus","ctrlKey","metaKey","onSelectForm","nativeEvent","stopImmediatePropagation","preventDefault","resetOnCancel","resetAfterSubmit","err","error","join","getOnlyFormModifiedValues","render","originalSchema","removeBlocksLayoutFields","visual","newBlockData","blockIds","newFormData","pathname","isAdminForm","allowedBlocks","showRestricted","editable","__CLIENT__","document","getElementById","item","index","toLowerCase","required","verticalFormTabs","secondary","pointing","attached","tabular","className","vertical","paneWidth","tabWidth","stackable","menuItem","description","fontSize","thereWereSomeErrors","message","hideActions","submitLabel","save","loading","cancel","shape","arrayOf","string","objectOf","any","definitions","func","bool","object","FormIntl","forwardRef"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Form/Form.jsx"],"sourcesContent":["/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport {\n  difference,\n  FormValidation,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  messages,\n} from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport {\n  findIndex,\n  isEmpty,\n  keys,\n  map,\n  mapValues,\n  pickBy,\n  without,\n  cloneDeep,\n} from 'lodash';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Container,\n  Form as UiForm,\n  Message,\n  Segment,\n  Tab,\n} from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar, UndoToolbar } from '@plone/volto/components';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }),\n    formData: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    resetOnCancel: PropTypes.bool,\n    isEditForm: PropTypes.bool,\n    isAdminForm: PropTypes.bool,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    blocks: PropTypes.arrayOf(PropTypes.object),\n    isFormSelected: PropTypes.bool,\n    onSelectForm: PropTypes.func,\n    editable: PropTypes.bool,\n    onChangeFormData: PropTypes.func,\n    requestError: PropTypes.string,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    resetOnCancel: false,\n    isEditForm: false,\n    isAdminForm: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    blocks: [],\n    pathname: '',\n    schema: {},\n    isFormSelected: true,\n    onSelectForm: null,\n    editable: true,\n    requestError: null,\n    allowedBlocks: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      text: uuid(),\n    };\n    let { formData } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = {\n        ...mapValues(props.schema.properties, 'default'),\n        ...formData,\n      };\n    }\n    // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (\n      formData.hasOwnProperty(blocksFieldname) &&\n      formData.hasOwnProperty(blocksLayoutFieldname)\n    ) {\n      if (\n        !formData[blocksLayoutFieldname] ||\n        isEmpty(formData[blocksLayoutFieldname].items)\n      ) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text],\n        };\n      }\n      if (!formData[blocksFieldname] || isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title',\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType,\n          },\n        };\n      }\n    }\n\n    let selectedBlock = null;\n    if (\n      formData.hasOwnProperty(blocksLayoutFieldname) &&\n      formData[blocksLayoutFieldname].items.length > 0\n    ) {\n      selectedBlock = formData[blocksLayoutFieldname].items[0];\n\n      if (config.blocks?.initialBlocksFocus?.[this.props.type]) {\n        //Default selected is not the first block, but the one from config.\n        Object.keys(formData[blocksFieldname]).forEach((b_key) => {\n          if (\n            formData[blocksFieldname][b_key]['@type'] ===\n            config.blocks?.initialBlocksFocus?.[this.props.type]\n          ) {\n            selectedBlock = b_key;\n          }\n        });\n      }\n    }\n    this.state = {\n      formData,\n      initialFormData: cloneDeep(formData),\n      errors: {},\n      selected: selectedBlock,\n      multiSelected: [],\n      isClient: false,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let { requestError } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n\n    if (requestError && prevProps.requestError !== requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(\n        requestError,\n      );\n      activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n\n      this.setState({\n        errors,\n        activeIndex,\n      });\n    }\n\n    if (this.props.onChangeFormData) {\n      if (\n        // TODO: use fast-deep-equal\n        JSON.stringify(prevState?.formData) !==\n        JSON.stringify(this.state.formData)\n      ) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, { activeIndex }) {\n    this.setState({ activeIndex });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: { [id]: value },\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let newState = { ...state };\n    if (!props.isFormSelected) {\n      newState.selected = null;\n    }\n\n    return newState;\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState((prevState) => {\n      const { errors, formData } = prevState;\n      delete errors[id];\n      return {\n        errors,\n        formData: {\n          ...formData,\n          // We need to catch also when the value equals false this fixes #888\n          [id]:\n            value || (value !== undefined && isBoolean(value)) ? value : null,\n        },\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(\n        this.state.formData,\n      );\n\n      const blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.state.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.state.multiSelected[0])\n            : blocks_layout.indexOf(this.state.selected);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.state.multiSelected || [];\n        if (!this.state.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.state.selected];\n          selected = null;\n        }\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n\n    this.setState({\n      selected,\n      multiSelected,\n    });\n\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData,\n      });\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const errors = this.props.schema\n      ? FormValidation.validateFieldsPerFieldset({\n          schema: this.props.schema,\n          formData: this.state.formData,\n          formatMessage: this.props.intl.formatMessage,\n        })\n      : {};\n\n    if (keys(errors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n      this.setState(\n        {\n          errors,\n          activeIndex,\n        },\n        () => {\n          Object.keys(errors).forEach((err) =>\n            toast.error(\n              <Toast error title={err} content={errors[err].join(', ')} />,\n            ),\n          );\n        },\n      );\n      // Changes the focus to the metadata tab in the sidebar if error\n      this.props.setSidebarTab(0);\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(this.state.formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n      }\n    }\n  }\n\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  getOnlyFormModifiedValues = () => {\n    const fieldsModified = Object.keys(\n      difference(this.state.formData, this.state.initialFormData),\n    );\n    return {\n      ...pickBy(this.state.formData, (value, key) =>\n        fieldsModified.includes(key),\n      ),\n      ...(this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': this.state.formData['@static_behaviors'],\n      }),\n    };\n  };\n\n  /**\n   * Removed blocks and blocks_layout fields from the form.\n   * @method removeBlocksLayoutFields\n   * @param {object} schema The schema definition of the form.\n   * @returns A modified copy of the given schema.\n   */\n  removeBlocksLayoutFields = (schema) => {\n    const newSchema = { ...schema };\n    const layoutFieldsetIndex = findIndex(\n      newSchema.fieldsets,\n      (fieldset) => fieldset.id === 'layout',\n    );\n    if (layoutFieldsetIndex > -1) {\n      const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n      newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(\n        (field) => field !== 'blocks' && field !== 'blocks_layout',\n      );\n      if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n        newSchema.fieldsets = [\n          ...newSchema.fieldsets.slice(0, layoutFieldsetIndex),\n          ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1),\n        ];\n      }\n    }\n    return newSchema;\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    const { schema: originalSchema, onCancel, onSubmit } = this.props;\n    const { formData } = this.state;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n\n    return this.props.visual ? (\n      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n      // but draftJS don't like it much and the hydration gets messed up\n      this.state.isClient && (\n        <div className=\"ui container\">\n          <BlocksToolbar\n            formData={this.state.formData}\n            selectedBlock={this.state.selected}\n            selectedBlocks={this.state.multiSelected}\n            onChangeBlocks={(newBlockData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newBlockData,\n                },\n              })\n            }\n            onSetSelectedBlocks={(blockIds) =>\n              this.setState({ multiSelected: blockIds })\n            }\n            onSelectBlock={this.onSelectBlock}\n          />\n          <UndoToolbar\n            state={{\n              formData: this.state.formData,\n              selected: this.state.selected,\n              multiSelected: this.state.multiSelected,\n            }}\n            enableHotKeys\n            onUndoRedo={({ state }) => this.setState(state)}\n          />\n          <BlocksForm\n            onChangeFormData={(newFormData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newFormData,\n                },\n              })\n            }\n            onChangeField={this.onChangeField}\n            onSelectBlock={this.onSelectBlock}\n            properties={formData}\n            pathname={this.props.pathname}\n            selectedBlock={this.state.selected}\n            multiSelected={this.state.multiSelected}\n            manage={this.props.isAdminForm}\n            allowedBlocks={this.props.allowedBlocks}\n            showRestricted={this.props.showRestricted}\n            editable={this.props.editable}\n            isMainForm={this.props.editable}\n          />\n          {this.state.isClient && this.props.editable && (\n            <Portal\n              node={__CLIENT__ && document.getElementById('sidebar-metadata')}\n            >\n              <UiForm\n                method=\"post\"\n                onSubmit={this.onSubmit}\n                error={keys(this.state.errors).length > 0}\n              >\n                {schema &&\n                  map(schema.fieldsets, (item) => [\n                    <Segment\n                      secondary\n                      attached\n                      className={`fieldset-${item.id}`}\n                      key={item.title}\n                    >\n                      {item.title}\n                    </Segment>,\n                    <Segment attached key={`fieldset-contents-${item.title}`}>\n                      {map(item.fields, (field, index) => (\n                        <Field\n                          {...schema.properties[field]}\n                          id={field}\n                          fieldSet={item.title.toLowerCase()}\n                          formData={this.state.formData}\n                          focus={false}\n                          value={this.state.formData?.[field]}\n                          required={schema.required.indexOf(field) !== -1}\n                          onChange={this.onChangeField}\n                          onBlur={this.onBlurField}\n                          onClick={this.onClickInput}\n                          key={field}\n                          error={this.state.errors[field]}\n                        />\n                      ))}\n                    </Segment>,\n                  ])}\n              </UiForm>\n            </Portal>\n          )}\n        </div>\n      )\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n          className={settings.verticalFormTabs ? 'vertical-form' : ''}\n        >\n          <fieldset className=\"invisible\" disabled={!this.props.editable}>\n            <Segment.Group raised>\n              {schema && schema.fieldsets.length > 1 && (\n                <>\n                  {settings.verticalFormTabs && this.props.title && (\n                    <Segment secondary attached key={this.props.title}>\n                      {this.props.title}\n                    </Segment>\n                  )}\n                  <Tab\n                    menu={{\n                      secondary: true,\n                      pointing: true,\n                      attached: true,\n                      tabular: true,\n                      className: 'formtabs',\n                      vertical: settings.verticalFormTabs,\n                    }}\n                    grid={{ paneWidth: 9, tabWidth: 3, stackable: true }}\n                    onTabChange={this.onTabChange}\n                    activeIndex={this.state.activeIndex}\n                    panes={map(schema.fieldsets, (item) => ({\n                      menuItem: item.title,\n                      render: () => [\n                        !settings.verticalFormTabs && this.props.title && (\n                          <Segment secondary attached key={this.props.title}>\n                            {this.props.title}\n                          </Segment>\n                        ),\n                        item.description && (\n                          <Message attached=\"bottom\">\n                            {item.description}\n                          </Message>\n                        ),\n                        ...map(item.fields, (field, index) => (\n                          <Field\n                            {...schema.properties[field]}\n                            id={field}\n                            formData={this.state.formData}\n                            fieldSet={item.title.toLowerCase()}\n                            focus={index === 0}\n                            value={this.state.formData?.[field]}\n                            required={schema.required.indexOf(field) !== -1}\n                            onChange={this.onChangeField}\n                            onBlur={this.onBlurField}\n                            onClick={this.onClickInput}\n                            key={field}\n                            error={this.state.errors[field]}\n                          />\n                        )),\n                      ],\n                    }))}\n                  />\n                </>\n              )}\n              {schema && schema.fieldsets.length === 1 && (\n                <Segment>\n                  {this.props.title && (\n                    <Segment className=\"primary\">\n                      <h1 style={{ fontSize: '16px' }}> {this.props.title}</h1>\n                    </Segment>\n                  )}\n                  {this.props.description && (\n                    <Segment secondary>{this.props.description}</Segment>\n                  )}\n                  {keys(this.state.errors).length > 0 && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.intl.formatMessage(\n                        messages.thereWereSomeErrors,\n                      )}\n                    />\n                  )}\n                  {this.props.error && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.error.message}\n                    />\n                  )}\n                  {map(schema.fieldsets[0].fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={this.state.formData?.[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={this.onChangeField}\n                      onBlur={this.onBlurField}\n                      onClick={this.onClickInput}\n                      key={field}\n                      error={this.state.errors[field]}\n                    />\n                  ))}\n                </Segment>\n              )}\n              {!this.props.hideActions && (\n                <Segment className=\"actions\" clearing>\n                  {onSubmit && (\n                    <Button\n                      basic\n                      primary\n                      floated=\"right\"\n                      type=\"submit\"\n                      aria-label={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      title={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      loading={this.props.loading}\n                    >\n                      <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                  {onCancel && (\n                    <Button\n                      basic\n                      secondary\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                      floated=\"right\"\n                      onClick={this.onCancel}\n                    >\n                      <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                </Segment>\n              )}\n            </Segment.Group>\n          </fieldset>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nconst FormIntl = injectIntl(Form, { forwardRef: true });\n\nexport default compose(\n  connect(null, { setSidebarTab }, null, { forwardRef: true }),\n)(FormIntl);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}