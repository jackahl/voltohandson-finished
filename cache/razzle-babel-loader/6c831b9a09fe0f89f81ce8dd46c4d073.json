{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Multilingual/CreateTranslation.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeLanguage, getTranslationLocator, getContent } from '@plone/volto/actions';\nimport { flattenToAppURL, normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst CreateTranslation = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    language,\n    translationOf\n  } = props.location.state;\n  const [translationLocation, setTranslationLocation] = React.useState(null);\n  const [translationObject, setTranslationObject] = React.useState(null);\n  const languageFrom = useSelector(state => state.intl.locale);\n  React.useEffect(() => {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then(resp => {\n      setTranslationLocation(resp['@id']);\n    }); //and we load the translationObject\n\n    dispatch(getContent(translationOf, null, 'translationObject')).then(resp => {\n      setTranslationObject(resp);\n    }); // On unmount we dispatch the language change\n\n    return () => {\n      // We change the interface language\n      if (config.settings.supportedLanguages.includes(language)) {\n        const langFileName = normalizeLanguageName(language);\n        import('@root/../locales/' + langFileName + '.json').then(locale => {\n          dispatch(changeLanguage(language, locale.default));\n        });\n      }\n    }; // On mount only\n\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n  return translationLocation && translationObject && __jsx(Redirect, {\n    to: {\n      pathname: `${flattenToAppURL(translationLocation)}/add`,\n      search: `?type=${props.location.state.type}`,\n      state: {\n        translationOf: props.location.state.translationOf,\n        language: props.location.state.language,\n        translationObject: translationObject,\n        languageFrom\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  });\n};\n\n_s(CreateTranslation, \"2Zq6zejxLz3CDYAxOOiBr0ghLoU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CreateTranslation;\nexport default CreateTranslation;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTranslation\");","map":{"version":3,"names":["React","Redirect","useDispatch","useSelector","changeLanguage","getTranslationLocator","getContent","flattenToAppURL","normalizeLanguageName","config","CreateTranslation","props","dispatch","language","translationOf","location","state","translationLocation","setTranslationLocation","useState","translationObject","setTranslationObject","languageFrom","intl","locale","useEffect","then","resp","settings","supportedLanguages","includes","langFileName","default","pathname","search","type"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Multilingual/CreateTranslation.jsx"],"sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  changeLanguage,\n  getTranslationLocator,\n  getContent,\n} from '@plone/volto/actions';\nimport { flattenToAppURL, normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst CreateTranslation = (props) => {\n  const dispatch = useDispatch();\n  const { language, translationOf } = props.location.state;\n  const [translationLocation, setTranslationLocation] = React.useState(null);\n  const [translationObject, setTranslationObject] = React.useState(null);\n  const languageFrom = useSelector((state) => state.intl.locale);\n\n  React.useEffect(() => {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then((resp) => {\n      setTranslationLocation(resp['@id']);\n    });\n\n    //and we load the translationObject\n    dispatch(getContent(translationOf, null, 'translationObject')).then(\n      (resp) => {\n        setTranslationObject(resp);\n      },\n    );\n\n    // On unmount we dispatch the language change\n    return () => {\n      // We change the interface language\n      if (config.settings.supportedLanguages.includes(language)) {\n        const langFileName = normalizeLanguageName(language);\n        import('@root/../locales/' + langFileName + '.json').then((locale) => {\n          dispatch(changeLanguage(language, locale.default));\n        });\n      }\n    };\n    // On mount only\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n\n  return (\n    translationLocation &&\n    translationObject && (\n      <Redirect\n        to={{\n          pathname: `${flattenToAppURL(translationLocation)}/add`,\n          search: `?type=${props.location.state.type}`,\n          state: {\n            translationOf: props.location.state.translationOf,\n            language: props.location.state.language,\n            translationObject: translationObject,\n            languageFrom,\n          },\n        }}\n      />\n    )\n  );\n};\n\nexport default CreateTranslation;\n"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SACEC,cADF,EAEEC,qBAFF,EAGEC,UAHF,QAIO,sBAJP;AAKA,SAASC,eAAT,EAA0BC,qBAA1B,QAAuD,sBAAvD;AACA,OAAOC,MAAP,MAAmB,uBAAnB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;EAAA;;EACnC,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;EACA,MAAM;IAAEW,QAAF;IAAYC;EAAZ,IAA8BH,KAAK,CAACI,QAAN,CAAeC,KAAnD;EACA,MAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDlB,KAAK,CAACmB,QAAN,CAAe,IAAf,CAAtD;EACA,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CrB,KAAK,CAACmB,QAAN,CAAe,IAAf,CAAlD;EACA,MAAMG,YAAY,GAAGnB,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACO,IAAN,CAAWC,MAAvB,CAAhC;EAEAxB,KAAK,CAACyB,SAAN,CAAgB,MAAM;IACpB;IACAb,QAAQ,CAACP,qBAAqB,CAACS,aAAD,EAAgBD,QAAhB,CAAtB,CAAR,CAAyDa,IAAzD,CAA+DC,IAAD,IAAU;MACtET,sBAAsB,CAACS,IAAI,CAAC,KAAD,CAAL,CAAtB;IACD,CAFD,EAFoB,CAMpB;;IACAf,QAAQ,CAACN,UAAU,CAACQ,aAAD,EAAgB,IAAhB,EAAsB,mBAAtB,CAAX,CAAR,CAA+DY,IAA/D,CACGC,IAAD,IAAU;MACRN,oBAAoB,CAACM,IAAD,CAApB;IACD,CAHH,EAPoB,CAapB;;IACA,OAAO,MAAM;MACX;MACA,IAAIlB,MAAM,CAACmB,QAAP,CAAgBC,kBAAhB,CAAmCC,QAAnC,CAA4CjB,QAA5C,CAAJ,EAA2D;QACzD,MAAMkB,YAAY,GAAGvB,qBAAqB,CAACK,QAAD,CAA1C;QACA,OAAO,sBAAsBkB,YAAtB,GAAqC,OAA5C,EAAqDL,IAArD,CAA2DF,MAAD,IAAY;UACpEZ,QAAQ,CAACR,cAAc,CAACS,QAAD,EAAWW,MAAM,CAACQ,OAAlB,CAAf,CAAR;QACD,CAFD;MAGD;IACF,CARD,CAdoB,CAuBpB;;IACA;EACD,CAzBD,EAyBG,EAzBH;EA2BA,OACEf,mBAAmB,IACnBG,iBADA,IAEE,MAAC,QAAD;IACE,EAAE,EAAE;MACFa,QAAQ,EAAG,GAAE1B,eAAe,CAACU,mBAAD,CAAsB,MADhD;MAEFiB,MAAM,EAAG,SAAQvB,KAAK,CAACI,QAAN,CAAeC,KAAf,CAAqBmB,IAAK,EAFzC;MAGFnB,KAAK,EAAE;QACLF,aAAa,EAAEH,KAAK,CAACI,QAAN,CAAeC,KAAf,CAAqBF,aAD/B;QAELD,QAAQ,EAAEF,KAAK,CAACI,QAAN,CAAeC,KAAf,CAAqBH,QAF1B;QAGLO,iBAAiB,EAAEA,iBAHd;QAILE;MAJK;IAHL,CADN;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAHJ;AAiBD,CAnDD;;GAAMZ,iB;UACaR,W,EAIIC,W;;;KALjBO,iB;AAqDN,eAAeA,iBAAf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}