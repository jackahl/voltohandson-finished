{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _map from \"lodash/map\";\n\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockView.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\n/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { serializeNodes, serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { Node } from 'slate'; // TODO: loading LESS files with `volto-slate/...` paths does not work currently\n\nimport '../../editor/plugins/Table/less/public.less';\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\n\nconst View = _ref => {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    column: null,\n    direction: null\n  });\n  const headers = useMemo(() => {\n    var _data$table$rows, _data$table$rows$;\n\n    return (_data$table$rows = data.table.rows) === null || _data$table$rows === void 0 ? void 0 : (_data$table$rows$ = _data$table$rows[0]) === null || _data$table$rows$ === void 0 ? void 0 : _data$table$rows$.cells;\n  }, [data.table.rows]);\n  const rows = useMemo(() => {\n    const items = {};\n    if (!data.table.rows) return {};\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[row.key] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[row.key][cellIndex] = _objectSpread(_objectSpread({}, cell), {}, {\n            value: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodes(cell.value) : '\\u00A0',\n            valueText: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodesToText(cell.value) : '\\u00A0'\n          });\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [state, rows]);\n  return __jsx(React.Fragment, null, data && data.table && __jsx(Table, {\n    fixed: data.table.fixed,\n    compact: data.table.compact,\n    basic: data.table.basic ? 'very' : false,\n    celled: data.table.celled,\n    inverted: data.table.inverted,\n    striped: data.table.striped,\n    sortable: data.table.sortable,\n    className: \"slate-table-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, !data.table.hideHeaders ? __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, headers.map((cell, index) => __jsx(Table.HeaderCell, {\n    key: cell.key,\n    textAlign: \"left\",\n    verticalAlign: \"middle\",\n    sorted: state.column === index ? state.direction : null,\n    onClick: () => {\n      if (!data.table.sortable) return;\n      setState({\n        column: index,\n        direction: state.column !== index ? 'ascending' : state.direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, cell.value && Node.string({\n    children: cell.value\n  }).length > 0 ? serializeNodes(cell.value) : '\\u00A0')))) : '', __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, _map(sortedRows, row => __jsx(Table.Row, {\n    key: row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, _map(rows[row], cell => __jsx(Table.Cell, {\n    key: cell.key,\n    textAlign: \"left\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 19\n    }\n  }, cell.value)))))));\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n\n_s(View, \"K1OWSQpW47Eg+p/8fmty680VNms=\");\n\n_c = View;\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;\n\nvar _c;\n\n$RefreshReg$(_c, \"View\");","map":{"version":3,"names":["React","useState","useMemo","PropTypes","Table","serializeNodes","serializeNodesToText","Node","View","data","state","setState","column","direction","headers","table","rows","cells","items","forEach","row","index","key","cell","cellIndex","value","string","children","length","valueText","sortedRows","Object","keys","sort","a","b","a_text","b_text","fixed","compact","basic","celled","inverted","striped","sortable","hideHeaders","map","propTypes","objectOf","any","isRequired"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockView.jsx"],"sourcesContent":["/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport {\n  serializeNodes,\n  serializeNodesToText,\n} from '@plone/volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nconst View = ({ data }) => {\n  const [state, setState] = useState({\n    column: null,\n    direction: null,\n  });\n\n  const headers = useMemo(() => {\n    return data.table.rows?.[0]?.cells;\n  }, [data.table.rows]);\n\n  const rows = useMemo(() => {\n    const items = {};\n    if (!data.table.rows) return {};\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[row.key] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[row.key][cellIndex] = {\n            ...cell,\n            value:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodes(cell.value)\n                : '\\u00A0',\n            valueText:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodesToText(cell.value)\n                : '\\u00A0',\n          };\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n\n  return (\n    <>\n      {data && data.table && (\n        <Table\n          fixed={data.table.fixed}\n          compact={data.table.compact}\n          basic={data.table.basic ? 'very' : false}\n          celled={data.table.celled}\n          inverted={data.table.inverted}\n          striped={data.table.striped}\n          sortable={data.table.sortable}\n          className=\"slate-table-block\"\n        >\n          {!data.table.hideHeaders ? (\n            <Table.Header>\n              <Table.Row>\n                {headers.map((cell, index) => (\n                  <Table.HeaderCell\n                    key={cell.key}\n                    textAlign=\"left\"\n                    verticalAlign=\"middle\"\n                    sorted={state.column === index ? state.direction : null}\n                    onClick={() => {\n                      if (!data.table.sortable) return;\n                      setState({\n                        column: index,\n                        direction:\n                          state.column !== index\n                            ? 'ascending'\n                            : state.direction === 'ascending'\n                            ? 'descending'\n                            : 'ascending',\n                      });\n                    }}\n                  >\n                    {cell.value &&\n                    Node.string({ children: cell.value }).length > 0\n                      ? serializeNodes(cell.value)\n                      : '\\u00A0'}\n                  </Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n          ) : (\n            ''\n          )}\n          <Table.Body>\n            {map(sortedRows, (row) => (\n              <Table.Row key={row}>\n                {map(rows[row], (cell) => (\n                  <Table.Cell\n                    key={cell.key}\n                    textAlign=\"left\"\n                    verticalAlign=\"middle\"\n                  >\n                    {cell.value}\n                  </Table.Cell>\n                ))}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}