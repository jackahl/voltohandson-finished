{"ast":null,"code":"/**\n * Workflow actions.\n * @module actions/workflow/workflow\n */\nimport { GET_WORKFLOW, GET_WORKFLOW_MULTIPLE, TRANSITION_WORKFLOW } from '@plone/volto/constants/ActionTypes';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n/**\n * Get workflow function.\n * @function getWorkflow\n * @param {string|Array} urls Workflow url(s).\n * @returns {Object} Get workflow action.\n */\n\nexport function getWorkflow(urls) {\n  return {\n    type: typeof urls === 'string' ? GET_WORKFLOW : GET_WORKFLOW_MULTIPLE,\n    request: typeof urls === 'string' ? {\n      op: 'get',\n      path: `${urls}/@workflow`\n    } : urls.map(url => ({\n      op: 'get',\n      path: `${url}/@workflow`\n    }))\n  };\n}\n/**\n * Transition workflow.\n * @function transitionWorkflow\n * @param {string} urls Content url(s).\n * @param {bool} include_children Include children.\n * @returns {Object} Transition workflow action.\n */\n\nexport function transitionWorkflow(urls, include_children = false) {\n  return {\n    type: TRANSITION_WORKFLOW,\n    request: typeof urls === 'string' ? {\n      op: 'post',\n      path: flattenToAppURL(urls),\n      data: {\n        include_children\n      }\n    } : urls.map(url => ({\n      op: 'post',\n      path: flattenToAppURL(url),\n      data: {\n        include_children\n      }\n    }))\n  };\n}","map":{"version":3,"names":["GET_WORKFLOW","GET_WORKFLOW_MULTIPLE","TRANSITION_WORKFLOW","flattenToAppURL","getWorkflow","urls","type","request","op","path","map","url","transitionWorkflow","include_children","data"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/actions/workflow/workflow.js"],"sourcesContent":["/**\n * Workflow actions.\n * @module actions/workflow/workflow\n */\n\nimport {\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n  TRANSITION_WORKFLOW,\n} from '@plone/volto/constants/ActionTypes';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * Get workflow function.\n * @function getWorkflow\n * @param {string|Array} urls Workflow url(s).\n * @returns {Object} Get workflow action.\n */\nexport function getWorkflow(urls) {\n  return {\n    type: typeof urls === 'string' ? GET_WORKFLOW : GET_WORKFLOW_MULTIPLE,\n    request:\n      typeof urls === 'string'\n        ? { op: 'get', path: `${urls}/@workflow` }\n        : urls.map((url) => ({ op: 'get', path: `${url}/@workflow` })),\n  };\n}\n\n/**\n * Transition workflow.\n * @function transitionWorkflow\n * @param {string} urls Content url(s).\n * @param {bool} include_children Include children.\n * @returns {Object} Transition workflow action.\n */\nexport function transitionWorkflow(urls, include_children = false) {\n  return {\n    type: TRANSITION_WORKFLOW,\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'post',\n            path: flattenToAppURL(urls),\n            data: { include_children },\n          }\n        : urls.map((url) => ({\n            op: 'post',\n            path: flattenToAppURL(url),\n            data: { include_children },\n          })),\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SACEA,YADF,EAEEC,qBAFF,EAGEC,mBAHF,QAIO,oCAJP;AAKA,SAASC,eAAT,QAAgC,sBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;EAChC,OAAO;IACLC,IAAI,EAAE,OAAOD,IAAP,KAAgB,QAAhB,GAA2BL,YAA3B,GAA0CC,qBAD3C;IAELM,OAAO,EACL,OAAOF,IAAP,KAAgB,QAAhB,GACI;MAAEG,EAAE,EAAE,KAAN;MAAaC,IAAI,EAAG,GAAEJ,IAAK;IAA3B,CADJ,GAEIA,IAAI,CAACK,GAAL,CAAUC,GAAD,KAAU;MAAEH,EAAE,EAAE,KAAN;MAAaC,IAAI,EAAG,GAAEE,GAAI;IAA1B,CAAV,CAAT;EALD,CAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA4BP,IAA5B,EAAkCQ,gBAAgB,GAAG,KAArD,EAA4D;EACjE,OAAO;IACLP,IAAI,EAAEJ,mBADD;IAELK,OAAO,EACL,OAAOF,IAAP,KAAgB,QAAhB,GACI;MACEG,EAAE,EAAE,MADN;MAEEC,IAAI,EAAEN,eAAe,CAACE,IAAD,CAFvB;MAGES,IAAI,EAAE;QAAED;MAAF;IAHR,CADJ,GAMIR,IAAI,CAACK,GAAL,CAAUC,GAAD,KAAU;MACjBH,EAAE,EAAE,MADa;MAEjBC,IAAI,EAAEN,eAAe,CAACQ,GAAD,CAFJ;MAGjBG,IAAI,EAAE;QAAED;MAAF;IAHW,CAAV,CAAT;EATD,CAAP;AAeD"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}