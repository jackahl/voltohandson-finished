{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/config.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport config from '@plone/volto/registry';\nimport boldIcon from '@plone/volto/icons/bold.svg';\nimport codeIcon from '@plone/volto/icons/code.svg';\nimport formatClearIcon from '@plone/volto/icons/format-clear.svg';\nimport headingIcon from '@plone/volto/icons/heading.svg';\nimport italicIcon from '@plone/volto/icons/italic.svg';\nimport listBulletIcon from '@plone/volto/icons/list-bullet.svg';\nimport listNumberedIcon from '@plone/volto/icons/list-numbered.svg';\nimport subheadingIcon from '@plone/volto/icons/subheading.svg';\nimport subTextIcon from '@plone/volto/icons/subtext.svg';\nimport underlineIcon from '@plone/volto/icons/underline.svg';\nimport strikethroughIcon from '@plone/volto/icons/strikethrough.svg';\nimport subindexIcon from '@plone/volto/icons/subindex.svg';\nimport superindexIcon from '@plone/volto/icons/superindex.svg';\nimport { createEmptyParagraph } from '@plone/volto-slate/utils';\nimport { MarkButton, MarkElementButton, BlockButton, ClearFormattingButton, Separator, Expando } from './ui';\nimport { highlightSelection } from './decorate'; // highlightByType,\n\nimport { insertData, isInline, withDeleteSelectionOnEnter, withDeserializers, normalizeNode } from './extensions';\nimport { // inlineTagDeserializer,\nbodyTagDeserializer, blockTagDeserializer, preTagDeserializer, spanTagDeserializer, bTagDeserializer, codeTagDeserializer } from './deserialize'; // Registry of available buttons\n\nexport const buttons = {\n  bold: props => __jsx(MarkElementButton, _extends({\n    title: \"Bold\",\n    format: \"strong\",\n    icon: boldIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  })),\n  italic: props => __jsx(MarkElementButton, _extends({\n    title: \"Italic\",\n    format: \"em\",\n    icon: italicIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  })),\n  underline: props => __jsx(MarkElementButton, _extends({\n    title: \"Underline\",\n    format: \"u\",\n    icon: underlineIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  })),\n  strikethrough: props => __jsx(MarkElementButton, _extends({\n    title: \"Strikethrough\",\n    format: \"del\",\n    icon: strikethroughIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  })),\n  sub: props => __jsx(MarkElementButton, _extends({\n    title: \"Subscript\",\n    format: \"sub\",\n    icon: subindexIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  })),\n  sup: props => __jsx(MarkElementButton, _extends({\n    title: \"Superscript\",\n    format: \"sup\",\n    icon: superindexIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  })),\n  code: props => __jsx(MarkButton, _extends({\n    title: \"Code\",\n    format: \"code\",\n    icon: codeIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  })),\n  'heading-two': props => __jsx(BlockButton, _extends({\n    title: \"Title\",\n    format: \"h2\",\n    allowedChildren: config.settings.slate.allowedHeadlineElements,\n    icon: headingIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  })),\n  'heading-three': props => __jsx(BlockButton, _extends({\n    title: \"Subtitle\",\n    format: \"h3\",\n    allowedChildren: config.settings.slate.allowedHeadlineElements,\n    icon: subheadingIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  })),\n  'heading-four': props => __jsx(BlockButton, _extends({\n    title: \"Heading 4\",\n    allowedChildren: config.settings.slate.allowedHeadlineElements,\n    format: \"h4\",\n    icon: subTextIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  })),\n  clearformatting: props => __jsx(ClearFormattingButton, {\n    title: \"Clear formatting\",\n    icon: formatClearIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 5\n    }\n  }),\n  'numbered-list': props => __jsx(BlockButton, _extends({\n    title: \"Numbered list\",\n    format: \"ol\",\n    icon: listNumberedIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  })),\n  'bulleted-list': props => __jsx(BlockButton, {\n    title: \"Bulleted list\",\n    format: \"ul\",\n    icon: listBulletIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }),\n  separator: props => __jsx(Separator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 25\n    }\n  }),\n  expando: props => __jsx(Expando, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 23\n    }\n  })\n};\nexport const defaultToolbarButtons = ['bold', 'italic', 'underline', 'strikethrough', 'separator', 'heading-two', 'heading-three', 'heading-four', 'separator', 'clearformatting', 'separator', 'sub', 'sup', 'separator', 'bulleted-list', 'numbered-list'];\nexport const toolbarButtons = [...defaultToolbarButtons];\nexport const expandedToolbarButtons = [...defaultToolbarButtons]; // These components are rendered in the toolbar on demand, as configured by\n// plugins.  They are rendered as \"context\" buttons, when there is no selection\n// Each one is a function (editor) => (<Component/> or null). It is important\n// to be able to tell if a plugin would return something because we don't want\n// to render the toolbar at all if there's no children (due to CSS reasons).\n\nexport const contextToolbarButtons = []; // Each Element node type available in the editor can be configured to have\n// specific toolbar buttons shown above the element of that type when it\n// contains the selection. The Table plugin of SlateEditor uses this to put a\n// Delete table button above the currently selected table.\n\nexport const elementToolbarButtons = {}; // A set of components that are always rendered, unlike the button variety.\n// They make it possible to orchestrate form-based editing of components\n\nexport const persistentHelpers = []; // The slate editor is \"decorated\" with the capabilities from this list.\n// While Slate calls them plugins, we use \"extension\" to avoid confusion.\n// A Volto Slate editor plugins adds more functionality: buttons, new elements,\n// etc.\n// Each extension is a simple mutator function with signature: `editor => editor`.\n// See https://docs.slatejs.org/concepts/07-plugins and\n// https://docs.slatejs.org/concepts/06-editor\n//\n// First here gets executed last, so if you want to override behavior, push new\n// extensions to the end of this list, to rely on default behavior implemented\n// here.\n\nexport const extensions = [withDeleteSelectionOnEnter, withDeserializers, insertData, isInline, normalizeNode]; // Default hotkeys and the format they trigger\n\nexport const hotkeys = {\n  'mod+b': {\n    format: 'strong',\n    type: 'inline'\n  },\n  'mod+i': {\n    format: 'em',\n    type: 'inline'\n  },\n  'mod+u': {\n    format: 'u',\n    type: 'inline'\n  },\n  'mod+s': {\n    format: 'del',\n    type: 'inline'\n  } // 'mod+`': { format: 'code', type: 'inline' },\n  // TODO: more hotkeys, including from plugins!\n\n}; // Raw shortcut/keydown handlers\n\nexport const keyDownHandlers = {}; // Paragraphs (as default type of blocks) and lists need special handling\n\nexport const listTypes = ['ul', 'ol'];\nexport const listItemType = 'li';\nexport const tableTypes = ['table', 'tbody', 'thead', 'tfoot', 'tr', 'td', 'th'];\nexport const defaultBlockType = 'p'; // Default rendered elements\n// TODO: expose the IDs in constants.js, for uniformity\n\nexport const elements = {\n  default: _ref => {\n    let {\n      attributes,\n      children\n    } = _ref;\n    return __jsx(\"p\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 42\n      }\n    }), children);\n  },\n  h1: _ref2 => {\n    let {\n      attributes,\n      children\n    } = _ref2;\n    return __jsx(\"h1\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 37\n      }\n    }), children);\n  },\n  h2: _ref3 => {\n    let {\n      attributes,\n      children\n    } = _ref3;\n    return __jsx(\"h2\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 37\n      }\n    }), children);\n  },\n  h3: _ref4 => {\n    let {\n      attributes,\n      children\n    } = _ref4;\n    return __jsx(\"h3\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 37\n      }\n    }), children);\n  },\n  h4: _ref5 => {\n    let {\n      attributes,\n      children\n    } = _ref5;\n    return __jsx(\"h4\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 37\n      }\n    }), children);\n  },\n  li: _ref6 => {\n    let {\n      attributes,\n      children\n    } = _ref6;\n    return __jsx(\"li\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 37\n      }\n    }), children);\n  },\n  ol: _ref7 => {\n    let {\n      attributes,\n      children\n    } = _ref7;\n    return __jsx(\"ol\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 37\n      }\n    }), children);\n  },\n  ul: _ref8 => {\n    let {\n      attributes,\n      children\n    } = _ref8;\n    return __jsx(\"ul\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 12\n      }\n    }), children);\n  },\n  div: _ref9 => {\n    let {\n      attributes,\n      children\n    } = _ref9;\n    return __jsx(\"div\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 38\n      }\n    }), children);\n  },\n  p: _ref10 => {\n    let {\n      attributes,\n      children\n    } = _ref10;\n    return __jsx(\"p\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 12\n      }\n    }), children);\n  },\n  // While usual slate editor consider these to be Leafs, we treat them as\n  // inline elements because they can sometimes contain elements (ex:\n  // <b><a/></b>\n  em: _ref11 => {\n    let {\n      children\n    } = _ref11;\n    return __jsx(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 25\n      }\n    }, children);\n  },\n  i: _ref12 => {\n    let {\n      children\n    } = _ref12;\n    return __jsx(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 24\n      }\n    }, children);\n  },\n  b: _ref13 => {\n    let {\n      children\n    } = _ref13;\n    return __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 12\n      }\n    }, children);\n  },\n  strong: _ref14 => {\n    let {\n      children\n    } = _ref14;\n    return __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 12\n      }\n    }, children);\n  },\n  u: _ref15 => {\n    let {\n      children\n    } = _ref15;\n    return __jsx(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 24\n      }\n    }, children);\n  },\n  s: _ref16 => {\n    let {\n      children\n    } = _ref16;\n    return __jsx(\"del\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 24\n      }\n    }, children);\n  },\n  del: _ref17 => {\n    let {\n      children\n    } = _ref17;\n    return __jsx(\"del\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 26\n      }\n    }, children);\n  },\n  sub: _ref18 => {\n    let {\n      children\n    } = _ref18;\n    return __jsx(\"sub\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 26\n      }\n    }, children);\n  },\n  sup: _ref19 => {\n    let {\n      children\n    } = _ref19;\n    return __jsx(\"sup\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 26\n      }\n    }, children);\n  },\n  code: _ref20 => {\n    let {\n      children\n    } = _ref20;\n    return __jsx(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 27\n      }\n    }, children);\n  }\n};\nexport const inlineElements = ['em', 'i', 'b', 'strong', 'u', 'del', 'sub', 'sup', 'code']; // Order of definition here is important (higher = inner element)\n\nexport const leafs = {// code: ({ children }) => {\n  //   return <code>{children}</code>;\n  // },\n};\nexport const defaultValue = () => {\n  return [createEmptyParagraph()];\n}; // HTML deserialization (html -> slate data conversion)\n// These are used in clipboard paste handling\n// Any tag that is not listed here (or added by a plugin) will be stripped\n// (its children will be rendered, though)\n\nexport const htmlTagsToSlate = {\n  B: bTagDeserializer,\n  BODY: bodyTagDeserializer,\n  CODE: codeTagDeserializer,\n  PRE: preTagDeserializer,\n  SPAN: spanTagDeserializer,\n  BLOCKQUOTE: blockTagDeserializer('blockquote'),\n  DEL: blockTagDeserializer('del'),\n  EM: blockTagDeserializer('em'),\n  H1: blockTagDeserializer('h1'),\n  H2: blockTagDeserializer('h2'),\n  H3: blockTagDeserializer('h3'),\n  H4: blockTagDeserializer('h4'),\n  H5: blockTagDeserializer('h5'),\n  H6: blockTagDeserializer('h6'),\n  I: blockTagDeserializer('i'),\n  P: blockTagDeserializer('p'),\n  S: blockTagDeserializer('del'),\n  STRONG: blockTagDeserializer('strong'),\n  SUB: blockTagDeserializer('sub'),\n  SUP: blockTagDeserializer('sup'),\n  U: blockTagDeserializer('u'),\n  OL: blockTagDeserializer('ol'),\n  UL: blockTagDeserializer('ul'),\n  LI: blockTagDeserializer('li')\n}; // Adds \"highlight\" decoration in the editor. Used by `highlightByType`\n// See the Footnote plugin for an example.\n\nexport const nodeTypesToHighlight = []; // \"Runtime\" decorator functions. These are transient decorations that are\n// applied in the editor. They are not persisted in the final value, so they\n// are useful for example to highlight search results or a certain type of node\n// Signature: ([node, path], ranges) => ranges\n\nexport const runtimeDecorators = [highlightSelection]; // , highlightByType\n// Only these types of element nodes are allowed in the headlines\n\nexport const allowedHeadlineElements = ['em', 'i']; // Scroll into view when typing\n\nexport const scrollIntoView = true;","map":{"version":3,"names":["React","config","boldIcon","codeIcon","formatClearIcon","headingIcon","italicIcon","listBulletIcon","listNumberedIcon","subheadingIcon","subTextIcon","underlineIcon","strikethroughIcon","subindexIcon","superindexIcon","createEmptyParagraph","MarkButton","MarkElementButton","BlockButton","ClearFormattingButton","Separator","Expando","highlightSelection","insertData","isInline","withDeleteSelectionOnEnter","withDeserializers","normalizeNode","bodyTagDeserializer","blockTagDeserializer","preTagDeserializer","spanTagDeserializer","bTagDeserializer","codeTagDeserializer","buttons","bold","props","italic","underline","strikethrough","sub","sup","code","settings","slate","allowedHeadlineElements","clearformatting","separator","expando","defaultToolbarButtons","toolbarButtons","expandedToolbarButtons","contextToolbarButtons","elementToolbarButtons","persistentHelpers","extensions","hotkeys","format","type","keyDownHandlers","listTypes","listItemType","tableTypes","defaultBlockType","elements","default","attributes","children","h1","h2","h3","h4","li","ol","ul","div","p","em","i","b","strong","u","s","del","inlineElements","leafs","defaultValue","htmlTagsToSlate","B","BODY","CODE","PRE","SPAN","BLOCKQUOTE","DEL","EM","H1","H2","H3","H4","H5","H6","I","P","S","STRONG","SUB","SUP","U","OL","UL","LI","nodeTypesToHighlight","runtimeDecorators","scrollIntoView"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/packages/volto-slate/src/editor/config.jsx"],"sourcesContent":["import React from 'react';\nimport config from '@plone/volto/registry';\n\nimport boldIcon from '@plone/volto/icons/bold.svg';\nimport codeIcon from '@plone/volto/icons/code.svg';\nimport formatClearIcon from '@plone/volto/icons/format-clear.svg';\nimport headingIcon from '@plone/volto/icons/heading.svg';\nimport italicIcon from '@plone/volto/icons/italic.svg';\nimport listBulletIcon from '@plone/volto/icons/list-bullet.svg';\nimport listNumberedIcon from '@plone/volto/icons/list-numbered.svg';\nimport subheadingIcon from '@plone/volto/icons/subheading.svg';\nimport subTextIcon from '@plone/volto/icons/subtext.svg';\nimport underlineIcon from '@plone/volto/icons/underline.svg';\nimport strikethroughIcon from '@plone/volto/icons/strikethrough.svg';\nimport subindexIcon from '@plone/volto/icons/subindex.svg';\nimport superindexIcon from '@plone/volto/icons/superindex.svg';\n\nimport { createEmptyParagraph } from '@plone/volto-slate/utils';\n\nimport {\n  MarkButton,\n  MarkElementButton,\n  BlockButton,\n  ClearFormattingButton,\n  Separator,\n  Expando,\n} from './ui';\nimport { highlightSelection } from './decorate'; // highlightByType,\nimport {\n  insertData,\n  isInline,\n  withDeleteSelectionOnEnter,\n  withDeserializers,\n  normalizeNode,\n} from './extensions';\nimport {\n  // inlineTagDeserializer,\n  bodyTagDeserializer,\n  blockTagDeserializer,\n  preTagDeserializer,\n  spanTagDeserializer,\n  bTagDeserializer,\n  codeTagDeserializer,\n} from './deserialize';\n\n// Registry of available buttons\nexport const buttons = {\n  bold: (props) => (\n    <MarkElementButton\n      title=\"Bold\"\n      format=\"strong\"\n      icon={boldIcon}\n      {...props}\n    />\n  ),\n  italic: (props) => (\n    <MarkElementButton\n      title=\"Italic\"\n      format=\"em\"\n      icon={italicIcon}\n      {...props}\n    />\n  ),\n  underline: (props) => (\n    <MarkElementButton\n      title=\"Underline\"\n      format=\"u\"\n      icon={underlineIcon}\n      {...props}\n    />\n  ),\n  strikethrough: (props) => (\n    <MarkElementButton\n      title=\"Strikethrough\"\n      format=\"del\"\n      icon={strikethroughIcon}\n      {...props}\n    />\n  ),\n  sub: (props) => (\n    <MarkElementButton\n      title=\"Subscript\"\n      format=\"sub\"\n      icon={subindexIcon}\n      {...props}\n    />\n  ),\n  sup: (props) => (\n    <MarkElementButton\n      title=\"Superscript\"\n      format=\"sup\"\n      icon={superindexIcon}\n      {...props}\n    />\n  ),\n  code: (props) => (\n    <MarkButton title=\"Code\" format=\"code\" icon={codeIcon} {...props} />\n  ),\n  'heading-two': (props) => (\n    <BlockButton\n      title=\"Title\"\n      format=\"h2\"\n      allowedChildren={config.settings.slate.allowedHeadlineElements}\n      icon={headingIcon}\n      {...props}\n    />\n  ),\n  'heading-three': (props) => (\n    <BlockButton\n      title=\"Subtitle\"\n      format=\"h3\"\n      allowedChildren={config.settings.slate.allowedHeadlineElements}\n      icon={subheadingIcon}\n      {...props}\n    />\n  ),\n  'heading-four': (props) => (\n    <BlockButton\n      title=\"Heading 4\"\n      allowedChildren={config.settings.slate.allowedHeadlineElements}\n      format=\"h4\"\n      icon={subTextIcon}\n      {...props}\n    />\n  ),\n  clearformatting: (props) => (\n    <ClearFormattingButton title=\"Clear formatting\" icon={formatClearIcon} />\n  ),\n  'numbered-list': (props) => (\n    <BlockButton\n      title=\"Numbered list\"\n      format=\"ol\"\n      icon={listNumberedIcon}\n      {...props}\n    />\n  ),\n  'bulleted-list': (props) => (\n    <BlockButton title=\"Bulleted list\" format=\"ul\" icon={listBulletIcon} />\n  ),\n  separator: (props) => <Separator />,\n  expando: (props) => <Expando />,\n};\n\nexport const defaultToolbarButtons = [\n  'bold',\n  'italic',\n  'underline',\n  'strikethrough',\n  'separator',\n  'heading-two',\n  'heading-three',\n  'heading-four',\n  'separator',\n  'clearformatting',\n  'separator',\n  'sub',\n  'sup',\n  'separator',\n  'bulleted-list',\n  'numbered-list',\n];\n\nexport const toolbarButtons = [...defaultToolbarButtons];\n\nexport const expandedToolbarButtons = [...defaultToolbarButtons];\n\n// These components are rendered in the toolbar on demand, as configured by\n// plugins.  They are rendered as \"context\" buttons, when there is no selection\n// Each one is a function (editor) => (<Component/> or null). It is important\n// to be able to tell if a plugin would return something because we don't want\n// to render the toolbar at all if there's no children (due to CSS reasons).\nexport const contextToolbarButtons = [];\n\n// Each Element node type available in the editor can be configured to have\n// specific toolbar buttons shown above the element of that type when it\n// contains the selection. The Table plugin of SlateEditor uses this to put a\n// Delete table button above the currently selected table.\nexport const elementToolbarButtons = {};\n\n// A set of components that are always rendered, unlike the button variety.\n// They make it possible to orchestrate form-based editing of components\nexport const persistentHelpers = [];\n\n// The slate editor is \"decorated\" with the capabilities from this list.\n// While Slate calls them plugins, we use \"extension\" to avoid confusion.\n// A Volto Slate editor plugins adds more functionality: buttons, new elements,\n// etc.\n// Each extension is a simple mutator function with signature: `editor => editor`.\n// See https://docs.slatejs.org/concepts/07-plugins and\n// https://docs.slatejs.org/concepts/06-editor\n//\n// First here gets executed last, so if you want to override behavior, push new\n// extensions to the end of this list, to rely on default behavior implemented\n// here.\nexport const extensions = [\n  withDeleteSelectionOnEnter,\n  withDeserializers,\n  insertData,\n  isInline,\n  normalizeNode,\n];\n\n// Default hotkeys and the format they trigger\nexport const hotkeys = {\n  'mod+b': { format: 'strong', type: 'inline' },\n  'mod+i': { format: 'em', type: 'inline' },\n  'mod+u': { format: 'u', type: 'inline' },\n  'mod+s': { format: 'del', type: 'inline' },\n  // 'mod+`': { format: 'code', type: 'inline' },\n  // TODO: more hotkeys, including from plugins!\n};\n\n// Raw shortcut/keydown handlers\nexport const keyDownHandlers = {};\n\n// Paragraphs (as default type of blocks) and lists need special handling\nexport const listTypes = ['ul', 'ol'];\nexport const listItemType = 'li';\nexport const tableTypes = [\n  'table',\n  'tbody',\n  'thead',\n  'tfoot',\n  'tr',\n  'td',\n  'th',\n];\nexport const defaultBlockType = 'p';\n\n// Default rendered elements\n// TODO: expose the IDs in constants.js, for uniformity\nexport const elements = {\n  default: ({ attributes, children }) => <p {...attributes}>{children}</p>,\n\n  h1: ({ attributes, children }) => <h1 {...attributes}>{children}</h1>,\n  h2: ({ attributes, children }) => <h2 {...attributes}>{children}</h2>,\n  h3: ({ attributes, children }) => <h3 {...attributes}>{children}</h3>,\n  h4: ({ attributes, children }) => <h4 {...attributes}>{children}</h4>,\n\n  li: ({ attributes, children }) => <li {...attributes}>{children}</li>,\n  ol: ({ attributes, children }) => <ol {...attributes}>{children}</ol>,\n  ul: ({ attributes, children }) => {\n    return <ul {...attributes}>{children}</ul>;\n  },\n\n  div: ({ attributes, children }) => <div {...attributes}>{children}</div>,\n  p: ({ attributes, children }) => {\n    return <p {...attributes}>{children}</p>;\n  },\n\n  // While usual slate editor consider these to be Leafs, we treat them as\n  // inline elements because they can sometimes contain elements (ex:\n  // <b><a/></b>\n  em: ({ children }) => <em>{children}</em>,\n  i: ({ children }) => <i>{children}</i>,\n  b: ({ children }) => {\n    return <b>{children}</b>;\n  },\n  strong: ({ children }) => {\n    return <strong>{children}</strong>;\n  },\n  u: ({ children }) => <u>{children}</u>,\n  s: ({ children }) => <del>{children}</del>,\n  del: ({ children }) => <del>{children}</del>,\n  sub: ({ children }) => <sub>{children}</sub>,\n  sup: ({ children }) => <sup>{children}</sup>,\n  code: ({ children }) => <code>{children}</code>,\n};\n\nexport const inlineElements = [\n  'em',\n  'i',\n  'b',\n  'strong',\n  'u',\n  'del',\n  'sub',\n  'sup',\n  'code',\n];\n\n// Order of definition here is important (higher = inner element)\nexport const leafs = {\n  // code: ({ children }) => {\n  //   return <code>{children}</code>;\n  // },\n};\n\nexport const defaultValue = () => {\n  return [createEmptyParagraph()];\n};\n\n// HTML deserialization (html -> slate data conversion)\n// These are used in clipboard paste handling\n// Any tag that is not listed here (or added by a plugin) will be stripped\n// (its children will be rendered, though)\nexport const htmlTagsToSlate = {\n  B: bTagDeserializer,\n  BODY: bodyTagDeserializer,\n  CODE: codeTagDeserializer,\n  PRE: preTagDeserializer,\n  SPAN: spanTagDeserializer,\n\n  BLOCKQUOTE: blockTagDeserializer('blockquote'),\n  DEL: blockTagDeserializer('del'),\n  EM: blockTagDeserializer('em'),\n  H1: blockTagDeserializer('h1'),\n  H2: blockTagDeserializer('h2'),\n  H3: blockTagDeserializer('h3'),\n  H4: blockTagDeserializer('h4'),\n  H5: blockTagDeserializer('h5'),\n  H6: blockTagDeserializer('h6'),\n  I: blockTagDeserializer('i'),\n  P: blockTagDeserializer('p'),\n  S: blockTagDeserializer('del'),\n  STRONG: blockTagDeserializer('strong'),\n  SUB: blockTagDeserializer('sub'),\n  SUP: blockTagDeserializer('sup'),\n  U: blockTagDeserializer('u'),\n\n  OL: blockTagDeserializer('ol'),\n  UL: blockTagDeserializer('ul'),\n  LI: blockTagDeserializer('li'),\n};\n\n// Adds \"highlight\" decoration in the editor. Used by `highlightByType`\n// See the Footnote plugin for an example.\nexport const nodeTypesToHighlight = [];\n\n// \"Runtime\" decorator functions. These are transient decorations that are\n// applied in the editor. They are not persisted in the final value, so they\n// are useful for example to highlight search results or a certain type of node\n// Signature: ([node, path], ranges) => ranges\nexport const runtimeDecorators = [highlightSelection]; // , highlightByType\n\n// Only these types of element nodes are allowed in the headlines\nexport const allowedHeadlineElements = ['em', 'i'];\n\n// Scroll into view when typing\nexport const scrollIntoView = true;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}