{"ast":null,"code":"/**\n * Api helper.\n * @module helpers/Api\n */\nimport superagent from 'superagent';\nimport Cookies from 'universal-cookie';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport { stripQuerystring } from '@plone/volto/helpers';\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\n\nfunction formatUrl(path) {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n/**\n * Api class.\n * @class Api\n */\n\n\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor(req) {\n    const cookies = new Cookies();\n    methods.forEach(method => {\n      this[method] = (path, {\n        params,\n        data,\n        type,\n        headers = {},\n        checkUrl = false\n      } = {}) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n\n          if (params) {\n            request.query(params);\n          }\n\n          let authToken;\n\n          if (req) {\n            // We are in SSR\n            authToken = req.universalCookies.get('auth_token');\n            request.use(addHeadersFactory(req));\n          } else {\n            authToken = cookies.get('auth_token');\n          }\n\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n\n          request.set('Accept', 'application/json');\n\n          if (type) {\n            request.type(type);\n          }\n\n          Object.keys(headers).forEach(key => request.set(key, headers[key]));\n\n          if (data) {\n            request.send(data);\n          }\n\n          request.end((err, response) => {\n            if (checkUrl && request.url && request.xhr && stripQuerystring(request.url) !== stripQuerystring(request.xhr.responseURL)) {\n              var _request$xhr$response;\n\n              if (((_request$xhr$response = request.xhr.responseURL) === null || _request$xhr$response === void 0 ? void 0 : _request$xhr$response.length) === 0) {\n                return reject({\n                  code: 408,\n                  status: 408,\n                  url: request.xhr.responseURL\n                });\n              }\n\n              return reject({\n                code: 301,\n                url: request.xhr.responseURL\n              });\n            }\n\n            return err ? reject(err) : resolve(response.body || response.text);\n          });\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n\n}\n\nexport default Api;","map":{"version":3,"names":["superagent","Cookies","config","addHeadersFactory","stripQuerystring","methods","formatUrl","path","settings","APISUFIX","legacyTraverse","startsWith","adjustedPath","apiPath","internalApiPath","__SERVER__","Api","constructor","req","cookies","forEach","method","params","data","type","headers","checkUrl","request","promise","Promise","resolve","reject","query","authToken","universalCookies","get","use","set","Object","keys","key","send","end","err","response","url","xhr","responseURL","length","code","status","body","text"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Api/Api.js"],"sourcesContent":["/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport Cookies from 'universal-cookie';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport { stripQuerystring } from '@plone/volto/helpers';\n\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\nfunction formatUrl(path) {\n  const { settings } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor(req) {\n    const cookies = new Cookies();\n\n    methods.forEach((method) => {\n      this[method] = (\n        path,\n        { params, data, type, headers = {}, checkUrl = false } = {},\n      ) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n\n          if (params) {\n            request.query(params);\n          }\n\n          let authToken;\n          if (req) {\n            // We are in SSR\n            authToken = req.universalCookies.get('auth_token');\n            request.use(addHeadersFactory(req));\n          } else {\n            authToken = cookies.get('auth_token');\n          }\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n\n          request.set('Accept', 'application/json');\n\n          if (type) {\n            request.type(type);\n          }\n\n          Object.keys(headers).forEach((key) => request.set(key, headers[key]));\n\n          if (data) {\n            request.send(data);\n          }\n\n          request.end((err, response) => {\n            if (\n              checkUrl &&\n              request.url &&\n              request.xhr &&\n              stripQuerystring(request.url) !==\n                stripQuerystring(request.xhr.responseURL)\n            ) {\n              if (request.xhr.responseURL?.length === 0) {\n                return reject({\n                  code: 408,\n                  status: 408,\n                  url: request.xhr.responseURL,\n                });\n              }\n              return reject({\n                code: 301,\n                url: request.xhr.responseURL,\n              });\n            }\n            return err ? reject(err) : resolve(response.body || response.text);\n          });\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n}\n\nexport default Api;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}