{"ast":null,"code":"import _extends from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _uniqBy from \"lodash/uniqBy\";\nimport _map from \"lodash/map\";\nimport _last from \"lodash/last\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport { Error, Icon, Toolbar, VersionOverview } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  sitesetup: {\n    \"id\": \"Site Setup\",\n    \"defaultMessage\": \"Site Setup\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  versionoverview: {\n    \"id\": \"Version Overview\",\n    \"defaultMessage\": \"Version Overview\"\n  },\n  general: {\n    \"id\": \"General\",\n    \"defaultMessage\": \"General\"\n  },\n  addonconfiguration: {\n    \"id\": \"Add-on Configuration\",\n    \"defaultMessage\": \"Add-on Configuration\"\n  },\n  content: {\n    \"id\": \"Content\",\n    \"defaultMessage\": \"Content\"\n  },\n  moderatecomments: {\n    \"id\": \"Moderate Comments\",\n    \"defaultMessage\": \"Moderate Comments\"\n  },\n  usersandgroups: {\n    \"id\": \"Users and Groups\",\n    \"defaultMessage\": \"Users and Groups\"\n  },\n  usersControlPanelCategory: {\n    \"id\": \"Users\",\n    \"defaultMessage\": \"Users\"\n  },\n  users: {\n    \"id\": \"Users\",\n    \"defaultMessage\": \"Users\"\n  },\n  groups: {\n    \"id\": \"Groups\",\n    \"defaultMessage\": \"Groups\"\n  },\n  addons: {\n    \"id\": \"Add-Ons\",\n    \"defaultMessage\": \"Add-Ons\"\n  },\n  database: {\n    \"id\": \"Database\",\n    \"defaultMessage\": \"Database\"\n  },\n  usergroupmemberbership: {\n    \"id\": \"User Group Membership\",\n    \"defaultMessage\": \"User Group Membership\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  urlmanagement: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  }\n});\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\n\nclass Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isClient: false\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n\n\n  componentDidMount() {\n    this.props.listControlpanels();\n    this.props.getSystemInformation();\n    this.setState({\n      isClient: true\n    });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Error\n    if (this.props.controlpanelsRequest.loading && nextProps.controlpanelsRequest.error) {\n      this.setState({\n        error: nextProps.controlpanelsRequest.error\n      });\n    }\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n\n\n  render() {\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 14\n        }\n      });\n    }\n\n    let customcontrolpanels = config.settings.controlpanels ? config.settings.controlpanels.map(el => {\n      el.group = this.props.intl.formatMessage({\n        id: el.group,\n        defaultMessage: el.group\n      }) || el.group;\n      return el;\n    }) : [];\n\n    const controlpanels = _map(_concat(this.props.controlpanels, customcontrolpanels, [{\n      '@id': '/addons',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.addons)\n    }, {\n      '@id': '/database',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.database)\n    }, {\n      '@id': '/undo',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.undo)\n    }, {\n      '@id': '/aliases',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.urlmanagement)\n    }, {\n      '@id': '/moderate-comments',\n      group: this.props.intl.formatMessage(messages.content),\n      title: this.props.intl.formatMessage(messages.moderatecomments)\n    }, {\n      '@id': '/users',\n      group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n      title: this.props.intl.formatMessage(messages.users)\n    }, {\n      '@id': '/usergroupmembership',\n      group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n      title: this.props.intl.formatMessage(messages.usergroupmemberbership)\n    }, {\n      '@id': '/groups',\n      group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n      title: this.props.intl.formatMessage(messages.groups)\n    }]), controlpanel => _objectSpread(_objectSpread({}, controlpanel), {}, {\n      id: _last(controlpanel['@id'].split('/'))\n    }));\n\n    const groups = _map(_uniqBy(controlpanels, 'group'), 'group');\n\n    const {\n      controlPanelsIcons: icons\n    } = config.settings;\n    return __jsx(\"div\", {\n      className: \"view-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.sitesetup),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    }), __jsx(Container, {\n      className: \"controlpanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Site Setup\",\n      defaultMessage: \"Site Setup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 15\n      }\n    })), _map(groups, group => [__jsx(Segment, {\n      key: `header-${group}`,\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }, group), __jsx(Segment, {\n      key: `body-${group}`,\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 15\n      }\n    }, __jsx(Grid, {\n      columns: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, __jsx(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 19\n      }\n    }, _map(_filter(controlpanels, {\n      group\n    }), controlpanel => __jsx(Grid.Column, {\n      key: controlpanel.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 23\n      }\n    }, __jsx(Link, {\n      to: `/controlpanel/${controlpanel.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 25\n      }\n    }, __jsx(Header, {\n      as: \"h3\",\n      icon: true,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 27\n      }\n    }, __jsx(Icon, {\n      name: (icons === null || icons === void 0 ? void 0 : icons[controlpanel.id]) || icons.default,\n      size: \"48px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 29\n      }\n    }), __jsx(Header.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 29\n      }\n    }, controlpanel.title))))))))])), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Version Overview\",\n      defaultMessage: \"Version Overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 15\n      }\n    })), __jsx(Segment, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }\n    }, this.props.systemInformation ? __jsx(VersionOverview, _extends({}, this.props.systemInformation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }\n    })) : null))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: \"/\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\n_defineProperty(Controlpanels, \"propTypes\", {\n  listControlpanels: PropTypes.func.isRequired,\n  controlpanels: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    group: PropTypes.string,\n    title: PropTypes.string\n  })).isRequired,\n  pathname: PropTypes.string.isRequired\n});\n\nexport default compose(injectIntl, connect((state, props) => ({\n  controlpanels: state.controlpanels.controlpanels,\n  controlpanelsRequest: state.controlpanels.list,\n  pathname: props.location.pathname,\n  systemInformation: state.controlpanels.systeminformation\n}), {\n  listControlpanels,\n  getSystemInformation\n}))(Controlpanels);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Helmet","Container","Grid","Header","Segment","FormattedMessage","defineMessages","injectIntl","listControlpanels","getSystemInformation","Error","Icon","Toolbar","VersionOverview","config","backSVG","messages","sitesetup","back","versionoverview","general","addonconfiguration","content","moderatecomments","usersandgroups","usersControlPanelCategory","users","groups","addons","database","usergroupmemberbership","undo","urlmanagement","Controlpanels","constructor","props","state","error","isClient","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","controlpanelsRequest","loading","render","customcontrolpanels","settings","controlpanels","map","el","group","intl","formatMessage","id","defaultMessage","title","controlpanel","split","controlPanelsIcons","icons","default","systemInformation","document","getElementById","pathname","func","isRequired","arrayOf","shape","string","list","location","systeminformation"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx"],"sourcesContent":["/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport { Error, Icon, Toolbar, VersionOverview } from '@plone/volto/components';\n\nimport config from '@plone/volto/registry';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  sitesetup: {\n    id: 'Site Setup',\n    defaultMessage: 'Site Setup',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  versionoverview: {\n    id: 'Version Overview',\n    defaultMessage: 'Version Overview',\n  },\n  general: {\n    id: 'General',\n    defaultMessage: 'General',\n  },\n  addonconfiguration: {\n    id: 'Add-on Configuration',\n    defaultMessage: 'Add-on Configuration',\n  },\n  content: {\n    id: 'Content',\n    defaultMessage: 'Content',\n  },\n  moderatecomments: {\n    id: 'Moderate Comments',\n    defaultMessage: 'Moderate Comments',\n  },\n  usersandgroups: {\n    id: 'Users and Groups',\n    defaultMessage: 'Users and Groups',\n  },\n  usersControlPanelCategory: {\n    id: 'Users',\n    defaultMessage: 'Users',\n  },\n  users: {\n    id: 'Users',\n    defaultMessage: 'Users',\n  },\n  groups: {\n    id: 'Groups',\n    defaultMessage: 'Groups',\n  },\n  addons: {\n    id: 'Add-Ons',\n    defaultMessage: 'Add-Ons',\n  },\n  database: {\n    id: 'Database',\n    defaultMessage: 'Database',\n  },\n  usergroupmemberbership: {\n    id: 'User Group Membership',\n    defaultMessage: 'User Group Membership',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  urlmanagement: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n});\n\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nclass Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listControlpanels: PropTypes.func.isRequired,\n    controlpanels: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        group: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listControlpanels();\n    this.props.getSystemInformation();\n    this.setState({ isClient: true });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Error\n    if (\n      this.props.controlpanelsRequest.loading &&\n      nextProps.controlpanelsRequest.error\n    ) {\n      this.setState({\n        error: nextProps.controlpanelsRequest.error,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    let customcontrolpanels = config.settings.controlpanels\n      ? config.settings.controlpanels.map((el) => {\n          el.group =\n            this.props.intl.formatMessage({\n              id: el.group,\n              defaultMessage: el.group,\n            }) || el.group;\n          return el;\n        })\n      : [];\n    const controlpanels = map(\n      concat(this.props.controlpanels, customcontrolpanels, [\n        {\n          '@id': '/addons',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.addons),\n        },\n        {\n          '@id': '/database',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.database),\n        },\n        {\n          '@id': '/undo',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.undo),\n        },\n        {\n          '@id': '/aliases',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.urlmanagement),\n        },\n        {\n          '@id': '/moderate-comments',\n          group: this.props.intl.formatMessage(messages.content),\n          title: this.props.intl.formatMessage(messages.moderatecomments),\n        },\n        {\n          '@id': '/users',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.users),\n        },\n        {\n          '@id': '/usergroupmembership',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.usergroupmemberbership),\n        },\n        {\n          '@id': '/groups',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.groups),\n        },\n      ]),\n      (controlpanel) => ({\n        ...controlpanel,\n        id: last(controlpanel['@id'].split('/')),\n      }),\n    );\n    const groups = map(uniqBy(controlpanels, 'group'), 'group');\n    const { controlPanelsIcons: icons } = config.settings;\n\n    return (\n      <div className=\"view-wrapper\">\n        <Helmet title={this.props.intl.formatMessage(messages.sitesetup)} />\n        <Container className=\"controlpanel\">\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage id=\"Site Setup\" defaultMessage=\"Site Setup\" />\n            </Segment>\n            {map(groups, (group) => [\n              <Segment key={`header-${group}`} secondary>\n                {group}\n              </Segment>,\n              <Segment key={`body-${group}`} attached>\n                <Grid columns={6}>\n                  <Grid.Row>\n                    {map(filter(controlpanels, { group }), (controlpanel) => (\n                      <Grid.Column key={controlpanel.id}>\n                        <Link to={`/controlpanel/${controlpanel.id}`}>\n                          <Header as=\"h3\" icon textAlign=\"center\">\n                            <Icon\n                              name={icons?.[controlpanel.id] || icons.default}\n                              size=\"48px\"\n                            />\n                            <Header.Content>\n                              {controlpanel.title}\n                            </Header.Content>\n                          </Header>\n                        </Link>\n                      </Grid.Column>\n                    ))}\n                  </Grid.Row>\n                </Grid>\n              </Segment>,\n            ])}\n          </Segment.Group>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Version Overview\"\n                defaultMessage=\"Version Overview\"\n              />\n            </Segment>\n            <Segment attached>\n              {this.props.systemInformation ? (\n                <VersionOverview {...this.props.systemInformation} />\n              ) : null}\n            </Segment>\n          </Segment.Group>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to=\"/\" className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanels: state.controlpanels.controlpanels,\n      controlpanelsRequest: state.controlpanels.list,\n      pathname: props.location.pathname,\n      systemInformation: state.controlpanels.systeminformation,\n    }),\n    { listControlpanels, getSystemInformation },\n  ),\n)(Controlpanels);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Site Setup","defaultMessage":"Site Setup"},{"id":"Back","defaultMessage":"Back"},{"id":"Version Overview","defaultMessage":"Version Overview"},{"id":"General","defaultMessage":"General"},{"id":"Add-on Configuration","defaultMessage":"Add-on Configuration"},{"id":"Content","defaultMessage":"Content"},{"id":"Moderate Comments","defaultMessage":"Moderate Comments"},{"id":"Users and Groups","defaultMessage":"Users and Groups"},{"id":"Users","defaultMessage":"Users"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Add-Ons","defaultMessage":"Add-Ons"},{"id":"Database","defaultMessage":"Database"},{"id":"User Group Membership","defaultMessage":"User Group Membership"},{"id":"Undo","defaultMessage":"Undo"},{"id":"URL Management","defaultMessage":"URL Management"}]}},"sourceType":"module"}