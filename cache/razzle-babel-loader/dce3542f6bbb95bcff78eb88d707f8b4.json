{"ast":null,"code":"const SECOND = 1000;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 30;\nconst YEAR = DAY * 365; // ? is this safe or should it be more accurate\n\nexport const short_date_format = {\n  // 12/9/2021\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric'\n};\nexport const short_date_and_time_format = {\n  // 12/9/21, 10:39 AM\n  dateStyle: 'short',\n  timeStyle: 'short'\n};\nexport const long_date_format = {\n  // Thursday, December 9, 2021 at 10:39 AM\n  dateStyle: 'full',\n  timeStyle: 'short'\n};\nexport const toDate = d => ['string', 'number'].includes(typeof d) ? new Date(d) : d;\n/**\n * Friendly formatting for dates\n */\n\nexport function formatDate({\n  date,\n  // Date() or  '2022-01-03T19:26:08.999Z'\n  format,\n  // format object, see https://tc39.es/ecma402/#datetimeformat-objects\n  locale = 'en',\n  long,\n  // true if format should be in long readable form.\n  includeTime,\n  // true if short date format should include time\n  formatToParts = false\n}) {\n  date = toDate(date);\n  format = format ? format : long && !includeTime ? long_date_format : includeTime ? short_date_and_time_format : short_date_format;\n  const formatter = new Intl.DateTimeFormat(locale, format);\n  return formatToParts ? formatter.formatToParts(date) : formatter.format(date);\n}\nexport function formatRelativeDate({\n  date,\n  locale = 'en',\n  relativeTo,\n  style = 'long',\n  // long|short|narrow\n  formatToParts = false\n}) {\n  date = toDate(date);\n  relativeTo = toDate(relativeTo || new Date());\n  const deltaMiliTime = date.getTime() - relativeTo.getTime();\n  const absDeltaMiliTime = Math.abs(deltaMiliTime);\n  const deltaSeconds = absDeltaMiliTime / SECOND;\n  const deltaMinutes = absDeltaMiliTime / MINUTE;\n  const deltaHours = absDeltaMiliTime / HOUR;\n  const deltaDays = absDeltaMiliTime / DAY;\n  const deltaMonths = absDeltaMiliTime / MONTH;\n  const deltaYears = absDeltaMiliTime / YEAR;\n  const deltas = [deltaYears, deltaMonths, deltaDays, deltaHours, deltaMinutes, deltaSeconds];\n  const pos = deltas.map(Math.round).findIndex(d => d > 0);\n  const tag = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'][pos];\n  const formatter = new Intl.RelativeTimeFormat(locale, {\n    numeric: 'auto',\n    style\n  });\n  const v = Math.round(deltaMiliTime < 0 ? -1 * deltas[pos] : deltas[pos]); // console.log({ date, relativeTo, v });\n\n  return isNaN(v) ? '' : formatToParts ? formatter.formatToParts(v, tag) : formatter.format(v, tag); // use \"now\" ?\n}","map":{"version":3,"names":["SECOND","MINUTE","HOUR","DAY","MONTH","YEAR","short_date_format","year","month","day","short_date_and_time_format","dateStyle","timeStyle","long_date_format","toDate","d","includes","Date","formatDate","date","format","locale","long","includeTime","formatToParts","formatter","Intl","DateTimeFormat","formatRelativeDate","relativeTo","style","deltaMiliTime","getTime","absDeltaMiliTime","Math","abs","deltaSeconds","deltaMinutes","deltaHours","deltaDays","deltaMonths","deltaYears","deltas","pos","map","round","findIndex","tag","RelativeTimeFormat","numeric","v","isNaN"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/Utils/Date.js"],"sourcesContent":["const SECOND = 1000;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 30;\nconst YEAR = DAY * 365; // ? is this safe or should it be more accurate\n\nexport const short_date_format = {\n  // 12/9/2021\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nexport const short_date_and_time_format = {\n  // 12/9/21, 10:39 AM\n  dateStyle: 'short',\n  timeStyle: 'short',\n};\n\nexport const long_date_format = {\n  // Thursday, December 9, 2021 at 10:39 AM\n  dateStyle: 'full',\n  timeStyle: 'short',\n};\n\nexport const toDate = (d) =>\n  ['string', 'number'].includes(typeof d) ? new Date(d) : d;\n\n/**\n * Friendly formatting for dates\n */\nexport function formatDate({\n  date, // Date() or  '2022-01-03T19:26:08.999Z'\n  format, // format object, see https://tc39.es/ecma402/#datetimeformat-objects\n  locale = 'en',\n  long, // true if format should be in long readable form.\n  includeTime, // true if short date format should include time\n  formatToParts = false,\n}) {\n  date = toDate(date);\n  format = format\n    ? format\n    : long && !includeTime\n    ? long_date_format\n    : includeTime\n    ? short_date_and_time_format\n    : short_date_format;\n\n  const formatter = new Intl.DateTimeFormat(locale, format);\n  return formatToParts ? formatter.formatToParts(date) : formatter.format(date);\n}\n\nexport function formatRelativeDate({\n  date,\n  locale = 'en',\n  relativeTo,\n  style = 'long', // long|short|narrow\n  formatToParts = false,\n}) {\n  date = toDate(date);\n  relativeTo = toDate(relativeTo || new Date());\n\n  const deltaMiliTime = date.getTime() - relativeTo.getTime();\n  const absDeltaMiliTime = Math.abs(deltaMiliTime);\n\n  const deltaSeconds = absDeltaMiliTime / SECOND;\n  const deltaMinutes = absDeltaMiliTime / MINUTE;\n  const deltaHours = absDeltaMiliTime / HOUR;\n  const deltaDays = absDeltaMiliTime / DAY;\n  const deltaMonths = absDeltaMiliTime / MONTH;\n  const deltaYears = absDeltaMiliTime / YEAR;\n  const deltas = [\n    deltaYears,\n    deltaMonths,\n    deltaDays,\n    deltaHours,\n    deltaMinutes,\n    deltaSeconds,\n  ];\n  const pos = deltas.map(Math.round).findIndex((d) => d > 0);\n  const tag = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'][pos];\n\n  const formatter = new Intl.RelativeTimeFormat(locale, {\n    numeric: 'auto',\n    style,\n  });\n\n  const v = Math.round(deltaMiliTime < 0 ? -1 * deltas[pos] : deltas[pos]);\n  // console.log({ date, relativeTo, v });\n\n  return isNaN(v)\n    ? ''\n    : formatToParts\n    ? formatter.formatToParts(v, tag)\n    : formatter.format(v, tag); // use \"now\" ?\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}