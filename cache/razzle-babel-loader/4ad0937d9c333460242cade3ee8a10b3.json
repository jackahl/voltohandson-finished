{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Image/View.jsx\";\nvar __jsx = React.createElement;\n\n/**\n * View image block.\n * @module components/manage/Blocks/Image/View\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { UniversalLink } from '@plone/volto/components';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers';\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\n\nexport const View = _ref => {\n  var _data$href, _data$href$;\n\n  let {\n    data,\n    detached\n  } = _ref;\n  const href = (data === null || data === void 0 ? void 0 : (_data$href = data.href) === null || _data$href === void 0 ? void 0 : (_data$href$ = _data$href[0]) === null || _data$href$ === void 0 ? void 0 : _data$href$['@id']) || '';\n  return __jsx(\"p\", {\n    className: cx('block image align', {\n      center: !Boolean(data.align),\n      detached\n    }, data.align),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, data.url && __jsx(React.Fragment, null, (() => {\n    const image = __jsx(\"img\", {\n      className: cx({\n        'full-width': data.align === 'full',\n        large: data.size === 'l',\n        medium: data.size === 'm',\n        small: data.size === 's'\n      }),\n      src: isInternalURL(data.url) ? // Backwards compat in the case that the block is storing the full server URL\n      (() => {\n        if (data.size === 'l') return `${flattenToAppURL(data.url)}/@@images/image`;\n        if (data.size === 'm') return `${flattenToAppURL(data.url)}/@@images/image/preview`;\n        if (data.size === 's') return `${flattenToAppURL(data.url)}/@@images/image/mini`;\n        return `${flattenToAppURL(data.url)}/@@images/image`;\n      })() : data.url,\n      alt: data.alt || '',\n      loading: \"lazy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    });\n\n    if (href) {\n      return __jsx(UniversalLink, {\n        href: href,\n        openLinkInNewTab: data.openLinkInNewTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, image);\n    } else {\n      return image;\n    }\n  })()));\n};\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n\n_c = View;\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default _c2 = withBlockExtensions(View);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"View\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","PropTypes","UniversalLink","cx","withBlockExtensions","flattenToAppURL","isInternalURL","View","data","detached","href","center","Boolean","align","url","image","large","size","medium","small","alt","openLinkInNewTab","propTypes","objectOf","any","isRequired"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/Blocks/Image/View.jsx"],"sourcesContent":["/**\n * View image block.\n * @module components/manage/Blocks/Image/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { UniversalLink } from '@plone/volto/components';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers';\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\nexport const View = ({ data, detached }) => {\n  const href = data?.href?.[0]?.['@id'] || '';\n  return (\n    <p\n      className={cx(\n        'block image align',\n        {\n          center: !Boolean(data.align),\n          detached,\n        },\n        data.align,\n      )}\n    >\n      {data.url && (\n        <>\n          {(() => {\n            const image = (\n              <img\n                className={cx({\n                  'full-width': data.align === 'full',\n                  large: data.size === 'l',\n                  medium: data.size === 'm',\n                  small: data.size === 's',\n                })}\n                src={\n                  isInternalURL(data.url)\n                    ? // Backwards compat in the case that the block is storing the full server URL\n                      (() => {\n                        if (data.size === 'l')\n                          return `${flattenToAppURL(data.url)}/@@images/image`;\n                        if (data.size === 'm')\n                          return `${flattenToAppURL(\n                            data.url,\n                          )}/@@images/image/preview`;\n                        if (data.size === 's')\n                          return `${flattenToAppURL(\n                            data.url,\n                          )}/@@images/image/mini`;\n                        return `${flattenToAppURL(data.url)}/@@images/image`;\n                      })()\n                    : data.url\n                }\n                alt={data.alt || ''}\n                loading=\"lazy\"\n              />\n            );\n            if (href) {\n              return (\n                <UniversalLink\n                  href={href}\n                  openLinkInNewTab={data.openLinkInNewTab}\n                >\n                  {image}\n                </UniversalLink>\n              );\n            } else {\n              return image;\n            }\n          })()}\n        </>\n      )}\n    </p>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default withBlockExtensions(View);\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,eAAT,EAA0BC,aAA1B,QAA+C,sBAA/C;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAI,GAAG,QAAwB;EAAA;;EAAA,IAAvB;IAAEC,IAAF;IAAQC;EAAR,CAAuB;EAC1C,MAAMC,IAAI,GAAG,CAAAF,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEE,IAAN,yEAAa,CAAb,6DAAkB,KAAlB,MAA4B,EAAzC;EACA,OACE;IACE,SAAS,EAAEP,EAAE,CACX,mBADW,EAEX;MACEQ,MAAM,EAAE,CAACC,OAAO,CAACJ,IAAI,CAACK,KAAN,CADlB;MAEEJ;IAFF,CAFW,EAMXD,IAAI,CAACK,KANM,CADf;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAUGL,IAAI,CAACM,GAAL,IACC,4BACG,CAAC,MAAM;IACN,MAAMC,KAAK,GACT;MACE,SAAS,EAAEZ,EAAE,CAAC;QACZ,cAAcK,IAAI,CAACK,KAAL,KAAe,MADjB;QAEZG,KAAK,EAAER,IAAI,CAACS,IAAL,KAAc,GAFT;QAGZC,MAAM,EAAEV,IAAI,CAACS,IAAL,KAAc,GAHV;QAIZE,KAAK,EAAEX,IAAI,CAACS,IAAL,KAAc;MAJT,CAAD,CADf;MAOE,GAAG,EACDX,aAAa,CAACE,IAAI,CAACM,GAAN,CAAb,GACI;MACA,CAAC,MAAM;QACL,IAAIN,IAAI,CAACS,IAAL,KAAc,GAAlB,EACE,OAAQ,GAAEZ,eAAe,CAACG,IAAI,CAACM,GAAN,CAAW,iBAApC;QACF,IAAIN,IAAI,CAACS,IAAL,KAAc,GAAlB,EACE,OAAQ,GAAEZ,eAAe,CACvBG,IAAI,CAACM,GADkB,CAEvB,yBAFF;QAGF,IAAIN,IAAI,CAACS,IAAL,KAAc,GAAlB,EACE,OAAQ,GAAEZ,eAAe,CACvBG,IAAI,CAACM,GADkB,CAEvB,sBAFF;QAGF,OAAQ,GAAET,eAAe,CAACG,IAAI,CAACM,GAAN,CAAW,iBAApC;MACD,CAZD,GAFJ,GAeIN,IAAI,CAACM,GAvBb;MAyBE,GAAG,EAAEN,IAAI,CAACY,GAAL,IAAY,EAzBnB;MA0BE,OAAO,EAAC,MA1BV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADF;;IA8BA,IAAIV,IAAJ,EAAU;MACR,OACE,MAAC,aAAD;QACE,IAAI,EAAEA,IADR;QAEE,gBAAgB,EAAEF,IAAI,CAACa,gBAFzB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAIGN,KAJH,CADF;IAQD,CATD,MASO;MACL,OAAOA,KAAP;IACD;EACF,CA3CA,GADH,CAXJ,CADF;AA6DD,CA/DM;AAiEP;AACA;AACA;AACA;AACA;;KArEaR,I;AAsEbA,IAAI,CAACe,SAAL,GAAiB;EACfd,IAAI,EAAEP,SAAS,CAACsB,QAAV,CAAmBtB,SAAS,CAACuB,GAA7B,EAAkCC;AADzB,CAAjB;AAIA,qBAAerB,mBAAmB,CAACG,IAAD,CAAlC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}