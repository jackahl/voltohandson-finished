{"ast":null,"code":"import _objectSpread from \"/home/jakob/workspace/training-project/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { matchAllRoutes } from './utils';\nimport { load, loadSuccess, loadFail, beginGlobalLoad, endGlobalLoad } from '@plone/volto/actions/asyncConnect/asyncConnect';\nimport { isPromise, getMutableState, getImmutableState } from './utils';\nimport { AsyncConnectWithContext } from './AsyncConnect';\nexport { loadOnServer, loadAsyncConnect } from './ssr'; // options is: { location, store: { dispatch }, route, match, routes }\n\nconst wrapWithDispatch = function (Component) {\n  let asyncItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return [{\n    key: 'voltoLoadAsyncProps',\n    promise: options => {\n      const {\n        store: {\n          dispatch\n        },\n        location: {\n          pathname\n        }\n      } = options;\n      const foundAsyncItems = applyExtenders(asyncItems, pathname);\n      const connects = foundAsyncItems.map(item => {\n        const {\n          key\n        } = item;\n        if (!key) return item;\n        const next = item.promise(options);\n\n        if (isPromise(next)) {\n          dispatch(load(key)); // add action dispatchers\n\n          next.then(data => dispatch(loadSuccess(key, data))).catch(err => dispatch(loadFail(key, err)));\n        } else if (next) {\n          dispatch(loadSuccess(key, next));\n        }\n\n        return _objectSpread(_objectSpread({}, item), {}, {\n          promise: next\n        });\n      });\n      Component.reduxAsyncConnect = connects;\n      return connects;\n    }\n  }];\n};\n\nconst applyExtenders = (asyncItems, pathname) => {\n  const {\n    asyncPropsExtenders = []\n  } = config.settings;\n  const extenders = matchAllRoutes(asyncPropsExtenders, pathname);\n  const foundAsyncItems = extenders.reduce((acc, extender) => extender.route.extend(acc), asyncItems);\n  let uniqueAsyncItems = foundAsyncItems.reduce((a, d) => {\n    if (!a.some(el => el.key === d.key)) {\n      a.push(d);\n    }\n\n    return a;\n  }, []);\n  return uniqueAsyncItems;\n};\n/**\n * A replacement for redux-connect's asyncConnect.\n *\n * It was needed because asyncConnect works as a direct wrapper on top of\n * a Component, so the config registry is not yet initialized. To solve this\n * problem we replace the original reduxAsyncConnect implementation (which was\n * a list of asyncConnected \"object promises\") with as single promise exposed\n * as { key: 'voltoLoadAsyncProps', promise: ... }.\n *\n * In more details, the original asyncConnect worked by replacing all our\n * \"object promises\" with a special version that's integrated with its own\n * Redux actions. We do another wrap, which takes the initial passed \"object\n * promises\", finds registered, per route, \"extenders\", calls these extenders\n * with the \"object promises\" and that's our \"object promises\" (which it calls\n * internally \"asyncItems\").\n */\n\n\nexport function asyncConnect(asyncItems, mapStateToProps, mapDispatchToProps, mergeProps, options) {\n  return Component => {\n    Component.reduxAsyncConnect = wrapWithDispatch(Component, asyncItems);\n\n    const finalMapStateToProps = (state, ownProps) => {\n      const {\n        pathname\n      } = state.router.location;\n      const foundAsyncItems = applyExtenders(asyncItems, pathname);\n      const mutableState = getMutableState(state);\n      const asyncStateToProps = foundAsyncItems.reduce((result, _ref) => {\n        let {\n          key\n        } = _ref;\n\n        if (!key) {\n          return result;\n        }\n\n        return _objectSpread(_objectSpread({}, result), {}, {\n          [key]: mutableState.reduxAsyncConnect[key]\n        });\n      }, {});\n\n      if (typeof mapStateToProps !== 'function') {\n        return asyncStateToProps;\n      }\n\n      return _objectSpread(_objectSpread({}, mapStateToProps(getImmutableState(mutableState), ownProps)), asyncStateToProps);\n    };\n\n    return connect(finalMapStateToProps, mapDispatchToProps, mergeProps, options)(Component);\n  };\n}\nexport const ReduxAsyncConnect = connect(null, {\n  beginGlobalLoad,\n  endGlobalLoad\n})(withRouter(AsyncConnectWithContext));","map":{"version":3,"names":["withRouter","connect","config","matchAllRoutes","load","loadSuccess","loadFail","beginGlobalLoad","endGlobalLoad","isPromise","getMutableState","getImmutableState","AsyncConnectWithContext","loadOnServer","loadAsyncConnect","wrapWithDispatch","Component","asyncItems","key","promise","options","store","dispatch","location","pathname","foundAsyncItems","applyExtenders","connects","map","item","next","then","data","catch","err","reduxAsyncConnect","asyncPropsExtenders","settings","extenders","reduce","acc","extender","route","extend","uniqueAsyncItems","a","d","some","el","push","asyncConnect","mapStateToProps","mapDispatchToProps","mergeProps","finalMapStateToProps","state","ownProps","router","mutableState","asyncStateToProps","result","ReduxAsyncConnect"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/AsyncConnect/index.js"],"sourcesContent":["import { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { matchAllRoutes } from './utils';\n\nimport {\n  load,\n  loadSuccess,\n  loadFail,\n  beginGlobalLoad,\n  endGlobalLoad,\n} from '@plone/volto/actions/asyncConnect/asyncConnect';\n\nimport { isPromise, getMutableState, getImmutableState } from './utils';\nimport { AsyncConnectWithContext } from './AsyncConnect';\nexport { loadOnServer, loadAsyncConnect } from './ssr';\n\n// options is: { location, store: { dispatch }, route, match, routes }\nconst wrapWithDispatch = (Component, asyncItems = []) => {\n  return [\n    {\n      key: 'voltoLoadAsyncProps',\n      promise: (options) => {\n        const {\n          store: { dispatch },\n          location: { pathname },\n        } = options;\n\n        const foundAsyncItems = applyExtenders(asyncItems, pathname);\n\n        const connects = foundAsyncItems.map((item) => {\n          const { key } = item;\n          if (!key) return item;\n          const next = item.promise(options);\n\n          if (isPromise(next)) {\n            dispatch(load(key));\n            // add action dispatchers\n            next\n              .then((data) => dispatch(loadSuccess(key, data)))\n              .catch((err) => dispatch(loadFail(key, err)));\n          } else if (next) {\n            dispatch(loadSuccess(key, next));\n          }\n          return {\n            ...item,\n            promise: next,\n          };\n        });\n\n        Component.reduxAsyncConnect = connects;\n        return connects;\n      },\n    },\n  ];\n};\n\nconst applyExtenders = (asyncItems, pathname) => {\n  const { asyncPropsExtenders = [] } = config.settings;\n  const extenders = matchAllRoutes(asyncPropsExtenders, pathname);\n\n  const foundAsyncItems = extenders.reduce(\n    (acc, extender) => extender.route.extend(acc),\n    asyncItems,\n  );\n\n  let uniqueAsyncItems = foundAsyncItems.reduce((a, d) => {\n    if (!a.some((el) => el.key === d.key)) {\n      a.push(d);\n    }\n    return a;\n  }, []);\n\n  return uniqueAsyncItems;\n};\n\n/**\n * A replacement for redux-connect's asyncConnect.\n *\n * It was needed because asyncConnect works as a direct wrapper on top of\n * a Component, so the config registry is not yet initialized. To solve this\n * problem we replace the original reduxAsyncConnect implementation (which was\n * a list of asyncConnected \"object promises\") with as single promise exposed\n * as { key: 'voltoLoadAsyncProps', promise: ... }.\n *\n * In more details, the original asyncConnect worked by replacing all our\n * \"object promises\" with a special version that's integrated with its own\n * Redux actions. We do another wrap, which takes the initial passed \"object\n * promises\", finds registered, per route, \"extenders\", calls these extenders\n * with the \"object promises\" and that's our \"object promises\" (which it calls\n * internally \"asyncItems\").\n */\nexport function asyncConnect(\n  asyncItems,\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps,\n  options,\n) {\n  return (Component) => {\n    Component.reduxAsyncConnect = wrapWithDispatch(Component, asyncItems);\n\n    const finalMapStateToProps = (state, ownProps) => {\n      const { pathname } = state.router.location;\n      const foundAsyncItems = applyExtenders(asyncItems, pathname);\n      const mutableState = getMutableState(state);\n      const asyncStateToProps = foundAsyncItems.reduce((result, { key }) => {\n        if (!key) {\n          return result;\n        }\n\n        return {\n          ...result,\n          [key]: mutableState.reduxAsyncConnect[key],\n        };\n      }, {});\n\n      if (typeof mapStateToProps !== 'function') {\n        return asyncStateToProps;\n      }\n\n      return {\n        ...mapStateToProps(getImmutableState(mutableState), ownProps),\n        ...asyncStateToProps,\n      };\n    };\n\n    return connect(\n      finalMapStateToProps,\n      mapDispatchToProps,\n      mergeProps,\n      options,\n    )(Component);\n  };\n}\n\nexport const ReduxAsyncConnect = connect(null, {\n  beginGlobalLoad,\n  endGlobalLoad,\n})(withRouter(AsyncConnectWithContext));\n"],"mappings":";AAAA,SAASA,UAAT,QAA2B,cAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,SACEC,IADF,EAEEC,WAFF,EAGEC,QAHF,EAIEC,eAJF,EAKEC,aALF,QAMO,gDANP;AAQA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,iBAArC,QAA8D,SAA9D;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,OAA/C,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,UAACC,SAAD,EAAgC;EAAA,IAApBC,UAAoB,uEAAP,EAAO;EACvD,OAAO,CACL;IACEC,GAAG,EAAE,qBADP;IAEEC,OAAO,EAAGC,OAAD,IAAa;MACpB,MAAM;QACJC,KAAK,EAAE;UAAEC;QAAF,CADH;QAEJC,QAAQ,EAAE;UAAEC;QAAF;MAFN,IAGFJ,OAHJ;MAKA,MAAMK,eAAe,GAAGC,cAAc,CAACT,UAAD,EAAaO,QAAb,CAAtC;MAEA,MAAMG,QAAQ,GAAGF,eAAe,CAACG,GAAhB,CAAqBC,IAAD,IAAU;QAC7C,MAAM;UAAEX;QAAF,IAAUW,IAAhB;QACA,IAAI,CAACX,GAAL,EAAU,OAAOW,IAAP;QACV,MAAMC,IAAI,GAAGD,IAAI,CAACV,OAAL,CAAaC,OAAb,CAAb;;QAEA,IAAIX,SAAS,CAACqB,IAAD,CAAb,EAAqB;UACnBR,QAAQ,CAAClB,IAAI,CAACc,GAAD,CAAL,CAAR,CADmB,CAEnB;;UACAY,IAAI,CACDC,IADH,CACSC,IAAD,IAAUV,QAAQ,CAACjB,WAAW,CAACa,GAAD,EAAMc,IAAN,CAAZ,CAD1B,EAEGC,KAFH,CAEUC,GAAD,IAASZ,QAAQ,CAAChB,QAAQ,CAACY,GAAD,EAAMgB,GAAN,CAAT,CAF1B;QAGD,CAND,MAMO,IAAIJ,IAAJ,EAAU;UACfR,QAAQ,CAACjB,WAAW,CAACa,GAAD,EAAMY,IAAN,CAAZ,CAAR;QACD;;QACD,uCACKD,IADL;UAEEV,OAAO,EAAEW;QAFX;MAID,CAlBgB,CAAjB;MAoBAd,SAAS,CAACmB,iBAAV,GAA8BR,QAA9B;MACA,OAAOA,QAAP;IACD;EAhCH,CADK,CAAP;AAoCD,CArCD;;AAuCA,MAAMD,cAAc,GAAG,CAACT,UAAD,EAAaO,QAAb,KAA0B;EAC/C,MAAM;IAAEY,mBAAmB,GAAG;EAAxB,IAA+BlC,MAAM,CAACmC,QAA5C;EACA,MAAMC,SAAS,GAAGnC,cAAc,CAACiC,mBAAD,EAAsBZ,QAAtB,CAAhC;EAEA,MAAMC,eAAe,GAAGa,SAAS,CAACC,MAAV,CACtB,CAACC,GAAD,EAAMC,QAAN,KAAmBA,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBH,GAAtB,CADG,EAEtBvB,UAFsB,CAAxB;EAKA,IAAI2B,gBAAgB,GAAGnB,eAAe,CAACc,MAAhB,CAAuB,CAACM,CAAD,EAAIC,CAAJ,KAAU;IACtD,IAAI,CAACD,CAAC,CAACE,IAAF,CAAQC,EAAD,IAAQA,EAAE,CAAC9B,GAAH,KAAW4B,CAAC,CAAC5B,GAA5B,CAAL,EAAuC;MACrC2B,CAAC,CAACI,IAAF,CAAOH,CAAP;IACD;;IACD,OAAOD,CAAP;EACD,CALsB,EAKpB,EALoB,CAAvB;EAOA,OAAOD,gBAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASM,YAAT,CACLjC,UADK,EAELkC,eAFK,EAGLC,kBAHK,EAILC,UAJK,EAKLjC,OALK,EAML;EACA,OAAQJ,SAAD,IAAe;IACpBA,SAAS,CAACmB,iBAAV,GAA8BpB,gBAAgB,CAACC,SAAD,EAAYC,UAAZ,CAA9C;;IAEA,MAAMqC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;MAChD,MAAM;QAAEhC;MAAF,IAAe+B,KAAK,CAACE,MAAN,CAAalC,QAAlC;MACA,MAAME,eAAe,GAAGC,cAAc,CAACT,UAAD,EAAaO,QAAb,CAAtC;MACA,MAAMkC,YAAY,GAAGhD,eAAe,CAAC6C,KAAD,CAApC;MACA,MAAMI,iBAAiB,GAAGlC,eAAe,CAACc,MAAhB,CAAuB,CAACqB,MAAD,WAAqB;QAAA,IAAZ;UAAE1C;QAAF,CAAY;;QACpE,IAAI,CAACA,GAAL,EAAU;UACR,OAAO0C,MAAP;QACD;;QAED,uCACKA,MADL;UAEE,CAAC1C,GAAD,GAAOwC,YAAY,CAACvB,iBAAb,CAA+BjB,GAA/B;QAFT;MAID,CATyB,EASvB,EATuB,CAA1B;;MAWA,IAAI,OAAOiC,eAAP,KAA2B,UAA/B,EAA2C;QACzC,OAAOQ,iBAAP;MACD;;MAED,uCACKR,eAAe,CAACxC,iBAAiB,CAAC+C,YAAD,CAAlB,EAAkCF,QAAlC,CADpB,GAEKG,iBAFL;IAID,CAvBD;;IAyBA,OAAO1D,OAAO,CACZqD,oBADY,EAEZF,kBAFY,EAGZC,UAHY,EAIZjC,OAJY,CAAP,CAKLJ,SALK,CAAP;EAMD,CAlCD;AAmCD;AAED,OAAO,MAAM6C,iBAAiB,GAAG5D,OAAO,CAAC,IAAD,EAAO;EAC7CM,eAD6C;EAE7CC;AAF6C,CAAP,CAAP,CAG9BR,UAAU,CAACY,uBAAD,CAHoB,CAA1B"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}