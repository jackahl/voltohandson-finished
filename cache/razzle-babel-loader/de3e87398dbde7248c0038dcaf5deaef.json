{"ast":null,"code":"var _jsxFileName = \"/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/WorkingCopyToastsFactory/WorkingCopyToastsFactory.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Toast } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { FormattedDate } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nconst messages = defineMessages({\n  thisIsAWorkingCopyOf: {\n    \"id\": \"This is a working copy of {title}\",\n    \"defaultMessage\": \"This is a working copy of {title}\"\n  },\n  workingCopyIs: {\n    \"id\": \"This has an ongoing working copy in {title}\",\n    \"defaultMessage\": \"This has an ongoing working copy in {title}\"\n  },\n  workingCopyCreatedBy: {\n    \"id\": \"Created by {creator} on {date}\",\n    \"defaultMessage\": \"Created by {creator} on {date}\"\n  }\n});\n\nconst WorkingCopyToastsFactory = props => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = useSelector(state => state.intl.locale);\n  const {\n    content\n  } = props;\n  const title = content === null || content === void 0 ? void 0 : content.title;\n  const working_copy = content === null || content === void 0 ? void 0 : content.working_copy;\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  useDeepCompareEffect(() => {\n    if (content && config.settings.hasWorkingCopySupport) {\n      if (working_copy) {\n        let toastMessage, toastTitle;\n\n        if (content.working_copy_of) {\n          var _content$working_copy;\n\n          // I'm a working copy\n          toastMessage = messages.thisIsAWorkingCopyOf;\n          toastTitle = __jsx(Link, {\n            to: flattenToAppURL(content.working_copy_of['@id']),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 13\n            }\n          }, (_content$working_copy = content.working_copy_of) === null || _content$working_copy === void 0 ? void 0 : _content$working_copy.title);\n        } else {\n          // I'm a baseline\n          toastMessage = messages.workingCopyIs;\n          toastTitle = __jsx(Link, {\n            to: flattenToAppURL(working_copy['@id']),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 13\n            }\n          }, working_copy === null || working_copy === void 0 ? void 0 : working_copy.title);\n        }\n\n        if (toast.isActive('workingcopyinfo')) {\n          toast.update('workingcopyinfo', {\n            render: __jsx(Toast, {\n              info: true,\n              title: intl.formatMessage(toastMessage, {\n                title: toastTitle\n              }),\n              content: intl.formatMessage(messages.workingCopyCreatedBy, {\n                creator: working_copy === null || working_copy === void 0 ? void 0 : working_copy.creator_name,\n                date: __jsx(FormattedDate, {\n                  date: working_copy === null || working_copy === void 0 ? void 0 : working_copy.created,\n                  format: dateOptions,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 21\n                  }\n                })\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 15\n              }\n            })\n          });\n        } else {\n          toast.info(__jsx(Toast, {\n            info: true,\n            title: intl.formatMessage(toastMessage, {\n              title: toastTitle\n            }),\n            content: intl.formatMessage(messages.workingCopyCreatedBy, {\n              creator: working_copy === null || working_copy === void 0 ? void 0 : working_copy.creator_name,\n              date: __jsx(FormattedDate, {\n                date: working_copy === null || working_copy === void 0 ? void 0 : working_copy.created,\n                format: dateOptions,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 19\n                }\n              })\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }\n          }), {\n            toastId: 'workingcopyinfo',\n            autoClose: false,\n            closeButton: false,\n            transition: null\n          });\n        }\n      }\n\n      if (!working_copy) {\n        if (toast.isActive('workingcopyinfo')) {\n          toast.dismiss('workingcopyinfo');\n        }\n      }\n    }\n  }, [pathname, content, title, working_copy, intl, lang, dateOptions]);\n  return null;\n};\n\nexport default WorkingCopyToastsFactory;","map":{"version":3,"names":["React","Link","toast","useSelector","useLocation","defineMessages","useIntl","Toast","flattenToAppURL","FormattedDate","config","useDeepCompareEffect","messages","thisIsAWorkingCopyOf","workingCopyIs","workingCopyCreatedBy","WorkingCopyToastsFactory","props","intl","pathname","lang","state","locale","content","title","working_copy","dateOptions","year","month","day","settings","hasWorkingCopySupport","toastMessage","toastTitle","working_copy_of","isActive","update","render","formatMessage","creator","creator_name","date","created","info","toastId","autoClose","closeButton","transition","dismiss"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/components/manage/WorkingCopyToastsFactory/WorkingCopyToastsFactory.jsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Toast } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { FormattedDate } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nconst messages = defineMessages({\n  thisIsAWorkingCopyOf: {\n    id: 'This is a working copy of {title}',\n    defaultMessage: 'This is a working copy of {title}',\n  },\n  workingCopyIs: {\n    id: 'This has an ongoing working copy in {title}',\n    defaultMessage: 'This has an ongoing working copy in {title}',\n  },\n  workingCopyCreatedBy: {\n    id: 'Created by {creator} on {date}',\n    defaultMessage: 'Created by {creator} on {date}',\n  },\n});\n\nconst WorkingCopyToastsFactory = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = useSelector((state) => state.intl.locale);\n  const { content } = props;\n  const title = content?.title;\n  const working_copy = content?.working_copy;\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  useDeepCompareEffect(() => {\n    if (content && config.settings.hasWorkingCopySupport) {\n      if (working_copy) {\n        let toastMessage, toastTitle;\n        if (content.working_copy_of) {\n          // I'm a working copy\n          toastMessage = messages.thisIsAWorkingCopyOf;\n          toastTitle = (\n            <Link to={flattenToAppURL(content.working_copy_of['@id'])}>\n              {content.working_copy_of?.title}\n            </Link>\n          );\n        } else {\n          // I'm a baseline\n          toastMessage = messages.workingCopyIs;\n          toastTitle = (\n            <Link to={flattenToAppURL(working_copy['@id'])}>\n              {working_copy?.title}\n            </Link>\n          );\n        }\n        if (toast.isActive('workingcopyinfo')) {\n          toast.update('workingcopyinfo', {\n            render: (\n              <Toast\n                info\n                title={intl.formatMessage(toastMessage, {\n                  title: toastTitle,\n                })}\n                content={intl.formatMessage(messages.workingCopyCreatedBy, {\n                  creator: working_copy?.creator_name,\n                  date: (\n                    <FormattedDate\n                      date={working_copy?.created}\n                      format={dateOptions}\n                    />\n                  ),\n                })}\n              />\n            ),\n          });\n        } else {\n          toast.info(\n            <Toast\n              info\n              title={intl.formatMessage(toastMessage, {\n                title: toastTitle,\n              })}\n              content={intl.formatMessage(messages.workingCopyCreatedBy, {\n                creator: working_copy?.creator_name,\n                date: (\n                  <FormattedDate\n                    date={working_copy?.created}\n                    format={dateOptions}\n                  />\n                ),\n              })}\n            />,\n            {\n              toastId: 'workingcopyinfo',\n              autoClose: false,\n              closeButton: false,\n              transition: null,\n            },\n          );\n        }\n      }\n      if (!working_copy) {\n        if (toast.isActive('workingcopyinfo')) {\n          toast.dismiss('workingcopyinfo');\n        }\n      }\n    }\n  }, [pathname, content, title, working_copy, intl, lang, dateOptions]);\n\n  return null;\n};\n\nexport default WorkingCopyToastsFactory;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"This is a working copy of {title}","defaultMessage":"This is a working copy of {title}"},{"id":"This has an ongoing working copy in {title}","defaultMessage":"This has an ongoing working copy in {title}"},{"id":"Created by {creator} on {date}","defaultMessage":"Created by {creator} on {date}"}]}},"sourceType":"module"}