{"ast":null,"code":"/**\n * AuthToken helper.\n * @module helpers/AuthToken\n */\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { loginRenew } from '@plone/volto/actions';\nimport { getCookieOptions } from '@plone/volto/helpers';\nimport { push } from 'connected-react-router';\n/**\n * Get auth token method (does not work in SSR)\n * @method getAuthToken\n * @returns {undefined}\n */\n\nexport function getAuthToken() {\n  const cookies = new Cookies();\n  return cookies.get('auth_token');\n}\n/**\n * Persist auth token method.\n * @method persistAuthToken\n * @param {object} store Redux store.\n * @returns {undefined}\n */\n\nexport function persistAuthToken(store, req) {\n  const cookies = new Cookies();\n  let currentValue;\n\n  if (req) {\n    // We are in SSR\n    currentValue = req.universalCookies.get('auth_token');\n  } else {\n    currentValue = cookies.get('auth_token');\n  }\n  /**\n   * handleChange method.\n   * @method handleChange\n   * @param {bool} initial Initial call.\n   * @returns {undefined}\n   */\n\n\n  function handleChange(initial) {\n    const previousValue = currentValue;\n    const state = store.getState();\n    currentValue = state.userSession.token;\n\n    if (module.hot && module.hot.data && module.hot.data.reloaded && previousValue) {\n      currentValue = previousValue;\n    }\n\n    if (previousValue !== currentValue || initial) {\n      if (!currentValue) {\n        if (previousValue) {\n          cookies.remove('auth_token', {\n            path: '/'\n          });\n        }\n      } else {\n        if (previousValue !== currentValue) {\n          cookies.set('auth_token', currentValue, getCookieOptions({\n            expires: new Date(jwtDecode(currentValue).exp * 1000)\n          }));\n        }\n\n        const exp = (jwtDecode(store.getState().userSession.token).exp * 1000 - new Date().getTime()) * 0.9 || 3600000;\n        setTimeout(() => {\n          if (store.getState().userSession.token) {\n            if (jwtDecode(store.getState().userSession.token).exp * 1000 > new Date().getTime()) {\n              store.dispatch(loginRenew());\n            } else {\n              // Logout\n              store.dispatch(push(`/logout?return_url=${store.getState().router.location.pathname}`));\n            }\n          }\n        }, exp);\n      }\n    }\n  }\n\n  store.subscribe(handleChange);\n  handleChange(true);\n}\n\nif (module.hot) {\n  module.hot.dispose(data => {\n    data.reloaded = true;\n  });\n}","map":{"version":3,"names":["Cookies","jwtDecode","loginRenew","getCookieOptions","push","getAuthToken","cookies","get","persistAuthToken","store","req","currentValue","universalCookies","handleChange","initial","previousValue","state","getState","userSession","token","module","hot","data","reloaded","remove","path","set","expires","Date","exp","getTime","setTimeout","dispatch","router","location","pathname","subscribe","dispose"],"sources":["/home/jakob/workspace/training-project/node_modules/@plone/volto/src/helpers/AuthToken/AuthToken.js"],"sourcesContent":["/**\n * AuthToken helper.\n * @module helpers/AuthToken\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\n\nimport { loginRenew } from '@plone/volto/actions';\nimport { getCookieOptions } from '@plone/volto/helpers';\nimport { push } from 'connected-react-router';\n\n/**\n * Get auth token method (does not work in SSR)\n * @method getAuthToken\n * @returns {undefined}\n */\nexport function getAuthToken() {\n  const cookies = new Cookies();\n  return cookies.get('auth_token');\n}\n\n/**\n * Persist auth token method.\n * @method persistAuthToken\n * @param {object} store Redux store.\n * @returns {undefined}\n */\nexport function persistAuthToken(store, req) {\n  const cookies = new Cookies();\n  let currentValue;\n  if (req) {\n    // We are in SSR\n    currentValue = req.universalCookies.get('auth_token');\n  } else {\n    currentValue = cookies.get('auth_token');\n  }\n\n  /**\n   * handleChange method.\n   * @method handleChange\n   * @param {bool} initial Initial call.\n   * @returns {undefined}\n   */\n  function handleChange(initial) {\n    const previousValue = currentValue;\n    const state = store.getState();\n    currentValue = state.userSession.token;\n\n    if (\n      module.hot &&\n      module.hot.data &&\n      module.hot.data.reloaded &&\n      previousValue\n    ) {\n      currentValue = previousValue;\n    }\n\n    if (previousValue !== currentValue || initial) {\n      if (!currentValue) {\n        if (previousValue) {\n          cookies.remove('auth_token', { path: '/' });\n        }\n      } else {\n        if (previousValue !== currentValue) {\n          cookies.set(\n            'auth_token',\n            currentValue,\n            getCookieOptions({\n              expires: new Date(jwtDecode(currentValue).exp * 1000),\n            }),\n          );\n        }\n        const exp =\n          (jwtDecode(store.getState().userSession.token).exp * 1000 -\n            new Date().getTime()) *\n            0.9 || 3600000;\n        setTimeout(() => {\n          if (store.getState().userSession.token) {\n            if (\n              jwtDecode(store.getState().userSession.token).exp * 1000 >\n              new Date().getTime()\n            ) {\n              store.dispatch(loginRenew());\n            } else {\n              // Logout\n              store.dispatch(\n                push(\n                  `/logout?return_url=${\n                    store.getState().router.location.pathname\n                  }`,\n                ),\n              );\n            }\n          }\n        }, exp);\n      }\n    }\n  }\n\n  store.subscribe(handleChange);\n  handleChange(true);\n}\n\nif (module.hot) {\n  module.hot.dispose((data) => {\n    data.reloaded = true;\n  });\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module"}